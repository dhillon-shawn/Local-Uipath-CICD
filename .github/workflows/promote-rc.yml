name: rc-promotion
on:
  workflow_call:
    inputs:
      rc_tag: { type: string, required: true }
      pr_num: { type: string, required: true }
      target_env: { type: string, required: true }
    secrets: {}

env:
  scope: "OR.Assets OR.BackgroundTasks OR.Execution OR.Folders OR.Jobs OR.Machines.Read OR.Monitoring OR.Robots.Read OR.Settings.Read OR.TestSets OR.TestSetExecutions OR.TestSetSchedules OR.Users.Read"

permissions:
  write-all

jobs:
  setup:
    runs-on: ubuntu-latest
    environment: ${{ inputs.target_env}}
    outputs:
      pid:     ${{ steps.meta.outputs.pid }}
      version: ${{ steps.meta.outputs.version }}
      package: ${{ steps.meta.outputs.package }}
      vars: ${{ steps.capture.outputs.vars }}
      email: ${{ steps.author.outputs.email }}
      publishable: ${{ steps.tests.outputs.PUBLISHABLE }}
    steps:
      - name: checkout
        uses: actions/checkout@v4



      - name: Capture environment and repo vars
        id: capture
        run: |
          echo "vars<<EOF" >> "$GITHUB_OUTPUT"
          echo '${{ toJSON(vars) }}' >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
      - name: Download rc-meta.json for this tag
        env:
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          mkdir -p rc
          gh release download "${{ inputs.rc_tag }}" --repo "$REPO" --dir rc --pattern "rc-meta.json"
          test -f rc/rc-meta.json || { echo "rc-meta.json missing on ${{ inputs.rc_tag }}"; exit 1; }
          cat rc/rc-meta.json
          
      - name: Read pid/version/package from meta
        id: meta
        run: |
          set -euo pipefail
          PID=$(jq -r '.pid' rc/rc-meta.json)
          VERSION=$(jq -r '.version' rc/rc-meta.json)
          PACKAGE=$(jq -r '.package' rc/rc-meta.json)
          test -n "$PID" -a -n "$VERSION" -a -n "$PACKAGE" || { echo "Invalid rc-meta.json"; exit 1; }
          echo "pid=$PID"        >> "$GITHUB_OUTPUT"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "package=$PACKAGE" >> "$GITHUB_OUTPUT"
          
      - name: Download the exact package from this RC
        env:
            GH_TOKEN: ${{ github.token }}
            REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          mkdir -p rc
          echo "Downloading ${{ steps.meta.outputs.package }} from tag ${{ inputs.rc_tag }}"
          gh release download "${{ inputs.rc_tag }}" \
            --repo "$REPO" \
            --dir rc \
            --pattern "${{ steps.meta.outputs.package }}"
          ls -lah rc

      - name: Copy into into ./output
        run: |
          set -euo pipefail
          mkdir -p output
          cp "rc/${{ steps.meta.outputs.package }}" "output/${{ steps.meta.outputs.package }}"
          ls -lah output

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: output
          path: ./output


  Resolve:
    runs-on: ubuntu-latest
    needs: setup
    steps:

      - name: checkout
        uses: actions/checkout@v4
      - name: auth
        uses: dhillon-shawn/Local-CICD-UTILS/auth@v0
        with:
          target_env: ${{ inputs.target_env}}
          role_arn: ${{ secrets.RPA_UIPATH_CICD_ROLE_ARN }}
          aws_region: "us-west-2"
          secret_id: ${{ secrets.RPA_UIPATH_CICD_SECRET_ARN }}
          scopes: ${{ env.scope }}

      - id: folder
        name: Resolve / create folder
        uses: dhillon-shawn/Local-CICD-UTILS/ensure-folder@v0
        with:
          target_env: ${{ inputs.target_env}}
          pid: ${{ needs.setup.outputs.pid }}
          dev_rid: ${{ fromJSON(needs.setup.outputs.vars).DEV_RID }}
          bot_rid: ${{ fromJSON(needs.setup.outputs.vars).BOT_RID }}
          mid: ${{ fromJSON(needs.setup.outputs.vars).MID }}
          bot_uid: ${{ fromJSON(needs.setup.outputs.vars).BOT_UID }}
          dev_uid: ${{ fromJSON(needs.setup.outputs.vars).DEV_UID }}
          FOLDER_NAME: "${{ fromJSON(needs.setup.outputs.vars).FOLDER_NAME }}"

      - name: Ensure assets (only on first promote / prod merge)
        uses: dhillon-shawn/Local-CICD-UTILS/migrate-assets@v0


  CLI:
    runs-on: windows-latest
    needs: [setup, Resolve]
    if: ((  needs.setup.outputs.publishable  == 'true')  && inputs.target_env == 'test')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: auth
        uses: dhillon-shawn/Local-CICD-UTILS/auth@v0
        with:
          target_env: "test"
          role_arn: ${{ secrets.RPA_UIPATH_CICD_ROLE_ARN }}
          aws_region: "us-west-2"
          secret_id: ${{ secrets.RPA_UIPATH_CICD_SECRET_ARN }}
          scopes: ${{ env.scope }}

      - name: setup uipcli and nuget feed
        uses: dhillon-shawn/Local-CICD-UTILS/uipcli-config@v0

      - name: CI
        id: CI
        uses: dhillon-shawn/Local-CICD-UTILS/ci@v0
        with:
          folder_name: "${{ fromJSON(needs.setup.outputs.vars).FOLDER_NAME }}"
          target_env: 'test'
          publishable: ${{ needs.setup.outputs.publishable}}


  Deploy:
    needs: [setup, Resolve, CLI]
    runs-on: ubuntu-latest
    if: ${{ always() && needs.CLI.result != 'failure' && !cancelled() }}
    steps:
      - name: auth
        uses: dhillon-shawn/Local-CICD-UTILS/auth@v0
        with:
          target_env: ${{ inputs.target_env}}
          role_arn: ${{ secrets.RPA_UIPATH_CICD_ROLE_ARN }}
          aws_region: "us-west-2"
          secret_id: ${{ secrets.RPA_UIPATH_CICD_SECRET_ARN }}
          scopes: ${{ env.scope }}

      - name: Deploy
        id: CD
        uses: dhillon-shawn/Local-CICD-UTILS/cd@v0
        with:
          folder_name: "${{ fromJSON(needs.setup.outputs.vars).FOLDER_NAME }}"
          target_env: ${{ inputs.target_env}}
          version: ${{ needs.setup.outputs.version }}
          pid: ${{ needs.setup.outputs.pid }}

  send:
    needs: [setup,Resolve, Deploy]
    if: ${{ always() && !cancelled() }}
    uses: dhillon-shawn/Local-Uipath-CICD/.github/workflows/send-email.yml@main
    secrets: inherit
    with:
        target_env: ${{ inputs.target_env}}
        result: ${{ needs.DEPLOY.result }}
        version: ${{ needs.setup.outputs.version }}
        folder_name: ${{ fromJSON(needs.setup.outputs.vars).FOLDER_NAME }}
        pid: ${{ needs.setup.outputs.pid }}
        email: ${{ needs.setup.outputs.email }}
        publishable: ${{ needs.setup.outputs.publishable }}
