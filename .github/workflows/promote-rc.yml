name: rc-promotion
on:
  workflow_call:
    inputs:
      rc_tag: { type: string, required: true }
      pr_num: { type: string, required: true }
      target_env: { type: string, required: true }
    secrets: {}

env:
  scope: "OR.Assets OR.BackgroundTasks OR.Execution OR.Folders OR.Jobs OR.Machines.Read OR.Monitoring OR.Robots.Read OR.Settings.Read OR.TestSets OR.TestSetExecutions OR.TestSetSchedules OR.Users.Read"

permissions:
  write-all

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      pid:     ${{ steps.meta.outputs.pid }}
      version: ${{ steps.meta.outputs.version }}
      package: ${{ steps.meta.outputs.package }}
      vars: ${{ steps.capture.outputs.vars }}
      email: ${{ steps.author.outputs.email }}
      publishable: ${{ steps.tests.outputs.PUBLISHABLE }}
    environment: ${{ inputs.target_env}}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Resolve human email for this PR
        shell: bash
        id: author
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO:     ${{ github.repository }}
          PR_NUM:   ${{ github.event.pull_request.number }}
        run: |
          is_valid_email() {
            # Lowercase, reject GitHub noreply and obvious bots
            local e="${1,,}"
            [[ -n "$e" ]] || return 1
            [[ "$e" =~ @ ]] || return 1
            [[ "$e" =~ @users\.noreply\.github\.com$ ]] && return 1
            [[ "$e" =~ \[bot\]@ ]] && return 1
            [[ "$e" == "action@github.com" ]] && return 1
            return 0
          }

          EMAIL=""

          # 1) PR commit emails (author & committer), first non-bot/non-noreply
          EMAIL_FROM_COMMITS="$(gh api "repos/$REPO/pulls/$PR_NUM/commits" --paginate \
            --jq '[ .[] | .commit.author.email, .commit.committer.email ]
                  | map(select(. != null))
                  | map(ascii_downcase)
                  | map(select(endswith("@users.noreply.github.com")|not))
                  | map(select(contains("[bot]@")|not))
                  | map(select(. != "action@github.com"))
                  | unique
                  | .[0] // empty' || true)"
          if is_valid_email "$EMAIL_FROM_COMMITS"; then
            EMAIL="$EMAIL_FROM_COMMITS"
          fi

          # 2) Fallback: PR author public email
          if [[ -z "$EMAIL" ]]; then
            LOGIN="$(gh api "repos/$REPO/pulls/$PR_NUM" --jq '.user.login')"
            EMAIL_FROM_USER="$(gh api "users/$LOGIN" --jq '.email // empty' || true)"
            if is_valid_email "$EMAIL_FROM_USER"; then
              EMAIL="$EMAIL_FROM_USER"
            fi
          fi

          # 3) Fallback: any assignee public email
          if [[ -z "$EMAIL" ]]; then
            mapfile -t ASSIGNEES < <(gh api "repos/$REPO/pulls/$PR_NUM" --jq '.assignees[].login' || true)
            for u in "${ASSIGNEES[@]:-}"; do
              E="$(gh api "users/$u" --jq '.email // empty' || true)"
              if is_valid_email "$E"; then EMAIL="$E"; break; fi
            done
          fi

          # 4) If still empty, keep it blank—don’t fail
          echo "email=$EMAIL" >> "$GITHUB_OUTPUT"
          echo "Resolved email: ${EMAIL:-<none>}"

      - name: Publishable test cases?
        id: tests
        shell: bash
        run: |
          if jq -e '.designOptions.fileInfoCollection' project.json >/dev/null 2>&1; then
            valid_tests="$(jq '[.designOptions.fileInfoCollection[] | select(.editingStatus=="Publishable")] | length' project.json)"
          else
            valid_tests="0"
          fi
          if [ "$valid_tests" -gt 0 ]; then
            echo "PUBLISHABLE=true"  >> "$GITHUB_OUTPUT"
            echo "Publishable Test Cases Detected ✅"
          else
            echo "PUBLISHABLE=false" >> "$GITHUB_OUTPUT"
            echo "No Publishable Test Cases Detected ❌"
          fi
          
      - name: Capture environment and repo vars
        id: capture
        run: |
          echo "vars<<EOF" >> "$GITHUB_OUTPUT"
          echo '${{ toJSON(vars) }}' >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

          
      - name: Download rc-meta.json for this tag
        env:
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          mkdir -p rc
          gh release download "${{ inputs.rc_tag }}" --repo "$REPO" --dir rc --pattern "rc-meta.json"
          test -f rc/rc-meta.json || { echo "rc-meta.json missing on ${{ inputs.rc_tag }}"; exit 1; }
          cat rc/rc-meta.json
          
      - name: Read pid/version/package from meta
        id: meta
        run: |
          set -euo pipefail
          PID=$(jq -r '.pid' rc/rc-meta.json)
          VERSION=$(jq -r '.version' rc/rc-meta.json)
          PACKAGE=$(jq -r '.package' rc/rc-meta.json)
          test -n "$PID" -a -n "$VERSION" -a -n "$PACKAGE" || { echo "Invalid rc-meta.json"; exit 1; }
          echo "pid=$PID"        >> "$GITHUB_OUTPUT"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "package=$PACKAGE" >> "$GITHUB_OUTPUT"
          
      - name: Download the exact package from this RC
        env:
            GH_TOKEN: ${{ github.token }}
            REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          mkdir -p rc
          echo "Downloading ${{ steps.meta.outputs.package }} from tag ${{ inputs.rc_tag }}"
          gh release download "${{ inputs.rc_tag }}" \
            --repo "$REPO" \
            --dir rc \
            --pattern "${{ steps.meta.outputs.package }}"
          ls -lah rc

      - name: Copy into into ./output
        run: |
          set -euo pipefail
          mkdir -p output
          cp "rc/${{ steps.meta.outputs.package }}" "output/${{ steps.meta.outputs.package }}"
          ls -lah output

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: output
          path: ./output

      - name: auth
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/auth@main
        with:
          target_env: ${{ inputs.target_env}}
          role_arn: ${{ secrets.RPA_UIPATH_CICD_ROLE_ARN }}
          aws_region: "us-west-2"
          secret_id: ${{ secrets.RPA_UIPATH_CICD_SECRET_ARN }}
          scopes: ${{ env.scope }}

      - id: folder
        name: Resolve / create folder
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/ensure-folder@main
        with:
          target_env: ${{ inputs.target_env}}
          pid: ${{ steps.meta.outputs.pid }}
          or_url: ${{ env.OR_URL }}
          token: $TOKEN
          dev_rid: ${{ fromJSON(steps.capture.outputs.vars).DEV_RID }}
          bot_rid: ${{ fromJSON(steps.capture.outputs.vars).BOT_RID }}
          mid: ${{ fromJSON(steps.capture.outputs.vars).MID }}
          bot_uid: ${{ fromJSON(steps.capture.outputs.vars).BOT_UID }}
          dev_uid: ${{ fromJSON(steps.capture.outputs.vars).DEV_UID }}
          FOLDER_NAME: "${{ fromJSON(steps.capture.outputs.vars).FOLDER_NAME }}"


  CLI:
    runs-on: windows-latest
    needs: setup
    if: ((  needs.setup.outputs.publishable  == 'true')  && inputs.target_env == 'test')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: auth
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/auth@main
        with:
          target_env: "test"
          role_arn: ${{ secrets.RPA_UIPATH_CICD_ROLE_ARN }}
          aws_region: "us-west-2"
          secret_id: ${{ secrets.RPA_UIPATH_CICD_SECRET_ARN }}
          scopes: ${{ env.scope }}

      - name: setup uipcli and nuget feed
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/uipcli-config@main

      - name: CI
        id: CI
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/ci@main
        with:
          folder_name: "${{ fromJSON(needs.setup.outputs.vars).FOLDER_NAME }}"
          target_env: 'test'
          publishable: ${{ needs.setup.outputs.publishable}}


  Deploy:
    needs: [setup, CLI]
    runs-on: ubuntu-latest
    if: ${{ always() && needs.CLI.result != 'failure' && !cancelled() }}
    steps:
      - name: auth
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/auth@main
        with:
          target_env: ${{ inputs.target_env}}
          role_arn: ${{ secrets.RPA_UIPATH_CICD_ROLE_ARN }}
          aws_region: "us-west-2"
          secret_id: ${{ secrets.RPA_UIPATH_CICD_SECRET_ARN }}
          scopes: ${{ env.scope }}

      - name: Deploy
        id: CD
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/cd@main
        with:
          folder_name: "${{ fromJSON(needs.setup.outputs.vars).FOLDER_NAME }}"
          target_env: ${{ inputs.target_env}}
          version: ${{ needs.setup.outputs.version }}
          pid: ${{ needs.setup.outputs.pid }}

  send:
    needs: [setup, Deploy]
    if: ${{ always() && !cancelled() }}
    uses: dhillon-shawn/Local-Uipath-CICD/.github/workflows/send-email.yml@main
    secrets: inherit
    with:
        target_env: ${{ inputs.target_env}}
        result: ${{ needs.DEPLOY.result }}
        version: ${{ needs.setup.outputs.version }}
        folder_name: ${{ fromJSON(needs.setup.outputs.vars).FOLDER_NAME }}
        pid: ${{ needs.setup.outputs.pid }}
        email: ${{ needs.setup.outputs.email }}
        publishable: ${{ needs.setup.outputs.publishable }}
