name: rc-promotion
on:
  workflow_call:
    inputs:
      rc_tag: { type: string, required: true }
      pr_num: { type: string, required: false }
    secrets: {}

env:
  scope: "OR.Assets OR.BackgroundTasks OR.Execution OR.Folders OR.Jobs OR.Machines.Read OR.Monitoring OR.Robots.Read OR.Settings.Read OR.TestSets OR.TestSetExecutions OR.TestSetSchedules OR.Users.Read"

permissions:
  write-all

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      pid:     ${{ steps.pick.outputs.pid }}
      version: ${{ steps.pick.outputs.version }}
      name:    ${{ steps.pick.outputs.name }}
      vars: ${{ steps.capture.outputs.vars }}
      email: ${{ steps.author.outputs.EMAIL }}
    environment: 'prod'
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Commit author email
        id: author
        shell: bash
        run: |
          set -euo pipefail
          EMAIL="$(git log -n 10 --pretty='%ae' \
          | grep -viE '(^action@github\.com$)|(\[bot\]@users\.noreply\.github\.com$)|(@users\.noreply\.github\.com$)' \
          | head -n1)"
          echo "EMAIL=$EMAIL" >> "$GITHUB_OUTPUT"
          echo "Email: $EMAIL"
      - name: Capture environment and repo vars
        id: capture
        run: |
          echo "vars<<EOF" >> "$GITHUB_OUTPUT"
          echo '${{ toJSON(vars) }}' >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Pick most recently uploaded .nupkg on RC
        id: pick
        run: |
          set -euo pipefail

          # Get assets for this release tag
          ASSETS_JSON="$(gh api "repos/$REPO/releases/tags/${{ inputs.rc_tag }}")"

          # Build TSV: "<updated_at>\t<name>" for .nupkg only, then pick the newest by updated_at
          printf '%s\n' "$ASSETS_JSON" \
            | jq -r '.assets[] | select(.name | endswith(".nupkg")) | [.updated_at, .name] | @tsv' \
            | sort -k1,1 \
            | tail -n1 \
            > newest.tsv

          if [ ! -s newest.tsv ]; then
            echo "No .nupkg assets found on release tag ${{ inputs.rc_tag }}"
            exit 1
          fi

          read UPDATED NAME < newest.tsv
          echo "Chosen asset: $NAME (updated_at=$UPDATED)"

          # Derive pid/version from NAME using the LAST dot: pid.version.nupkg
          BASE="${NAME%.nupkg}"
          VERSION="${BASE##*.}"   # text after last dot
          PID="${BASE%.*}"        # text before last dot

          if [ -z "$PID" ] || [ -z "$VERSION" ]; then
            echo "Failed to parse pid/version from asset name: $NAME"
            exit 1
          fi

          echo "pid=$PID"       >> "$GITHUB_OUTPUT"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "name=$NAME"     >> "$GITHUB_OUTPUT"

      - name: Download chosen asset
        run: |
          set -euo pipefail
          mkdir -p rc
          echo "Downloading ${{ steps.pick.outputs.name }} from ${{ inputs.rc_tag }} (repo: $REPO)"
          gh release download "${{ inputs.rc_tag }}" \
            --repo "$REPO" \
            --dir rc \
            --pattern "${{ steps.pick.outputs.name }}"
          cp "rc/${{ steps.pick.outputs.name }}" "${{ steps.pick.outputs.name }}"
          ls -lah "${{ steps.pick.outputs.name }}"

      - name: Upload package for matrix jobs (preserve filename)
        uses: actions/upload-artifact@v4
        with:
          name: rc-package
          path: ${{ steps.pick.outputs.name }}



      - name: auth
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/auth@main
        with:
          target_env: 'prod'
          role_arn: ${{ secrets.RPA_UIPATH_CICD_ROLE_ARN }}
          aws_region: "us-west-2"
          secret_id: ${{ secrets.RPA_UIPATH_CICD_SECRET_ARN }}
          scopes: ${{ env.scope }}

      - id: folder
        name: Resolve / create folder
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/ensure-folder@main
        with:
          target_env: 'prod'
          pid: ${{ steps.pick.outputs.pid }}
          or_url: ${{ env.OR_URL }}
          token: $TOKEN
          dev_rid: ${{ fromJSON(steps.capture.outputs.vars).DEV_RID }}
          bot_rid: ${{ fromJSON(steps.capture.outputs.vars).BOT_RID }}
          mid: ${{ fromJSON(steps.capture.outputs.vars).MID }}
          bot_uid: ${{ fromJSON(steps.capture.outputs.vars).BOT_UID }}
          dev_uid: ${{ fromJSON(steps.capture.outputs.vars).DEV_UID }}
          FOLDER_NAME: "${{ fromJSON(steps.capture.outputs.vars).FOLDER_NAME }}"

  Deploy:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        env: [ "dev", "test", "prod" ]
    steps:
      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          name: rc-package
          path: .


      - name: auth
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/auth@main
        with:
          target_env: ${{ matrix.env }}
          role_arn: ${{ secrets.RPA_UIPATH_CICD_ROLE_ARN }}
          aws_region: "us-west-2"
          secret_id: ${{ secrets.RPA_UIPATH_CICD_SECRET_ARN }}
          scopes: ${{ env.scope }}

      - name: Deploy
        id: CD
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/cd@main
        with:
          folder_name: "${{ fromJSON(needs.setup.outputs.vars).FOLDER_NAME }}"
          target_env: ${{ matrix.env }}
          version: ${{ needs.setup.outputs.version }}
          pid: ${{ needs.setup.outputs.pid }}

  send:
    needs: [setup, Deploy]
    if: ${{ always() && !cancelled() }}
    uses: dhillon-shawn/Local-Uipath-CICD/.github/workflows/send-email.yml@main
    secrets: inherit
    with:
        target_env: 'prod'
        result: ${{ needs.DEPLOY.result }}
        version: ${{ needs.setup.outputs.version }}
        folder_name: ${{ fromJSON(needs.setup.outputs.vars).FOLDER_NAME }}
        pid: ${{ needs.setup.outputs.pid }}
        email: ${{ needs.setup.outputs.email }}
