name: Issue → Branch + PR

on:
  workflow_call:

permissions:
  write-all

concurrency:
  group: issue-${{ github.event.issue.number }}
  cancel-in-progress: false


jobs:
  issue_to_pr:
      # Only run for issues labeled release OR hotfix
      if: contains(join(github.event.issue.labels.*.name, ','), 'release') ||
          contains(join(github.event.issue.labels.*.name, ','), 'hotfix')
      runs-on: ubuntu-latest

      steps:
        - name: Decide mode (release vs hotfix)
          id: mode
          run: |
            labels="${{ join(github.event.issue.labels.*.name, ',') }}"
            if echo "$labels" | grep -qi hotfix; then
              echo "mode=hotfix" >> $GITHUB_OUTPUT
              echo "pr_draft=false" >> $GITHUB_OUTPUT
            else
              echo "mode=release" >> $GITHUB_OUTPUT
              echo "pr_draft=true"  >> $GITHUB_OUTPUT   # release PRs start as draft
            fi

        - name: Ensure assignee (fallback to issue author)
          if: ${{ toJson(github.event.issue.assignees) == '[]' }}
          uses: actions-ecosystem/action-add-assignees@v1
          with:
            github_token: ${{ github.token }}
            assignees: ${{ github.event.issue.user.login }}

        - name: Checkout default branch
          uses: actions/checkout@v4
          with:
            ref: ${{ github.event.repository.default_branch }}

        - name: Compute names
          id: names
          shell: bash
          run: |
            title="${{ github.event.issue.title }}"
            num="${{ github.event.issue.number }}"
            slug=$(echo "$title" | tr '[:upper:]' '[:lower:]' \
              | sed -E 's/[^a-z0-9]+/-/g;s/^-+|-+$//g' | cut -c1-50)
            prefix="${{ steps.mode.outputs.mode }}"
            echo "branch=${prefix}/${num}-${slug}" >> $GITHUB_OUTPUT
            echo "pr_title=${title} (#${num})"     >> $GITHUB_OUTPUT

        # --- Parse Issue Form ONLY for Release - Process (labels: process + release)
        - name: Parse Issue Form (release–process only)
          id: parse
          if: contains(join(github.event.issue.labels.*.name, ','), 'release') &&
              contains(join(github.event.issue.labels.*.name, ','), 'process')
          uses: zentered/issue-forms-body-parser@v2.0.0
          # outputs: steps.parse.outputs.data (JSON keyed by form ids)

        # --- Validate required CR fields for release–process
        - name: Validate CR fields (release–process only)
          if: steps.parse.outcome == 'success'
          shell: bash
          env:
            FORM_JSON: ${{ steps.parse.outputs.data }}
          run: |
            required=(
              user_email
              end
              effort
              description
              business_value
              plan
              validation_plan
              backout_plan
              impacted_groups
              impacted_users_emails
              last_notified_when
              last_notified_how
            )

            # If your parser outputs kebab-case, map to those keys.
            declare -A keymap=(
              [user_email]=user_email
              [end]=end
              [effort]=effort
              [description]=description
              [business_value]=business_value
              [plan]=plan
              [validation_plan]=validation_plan
              [backout_plan]=backout_plan
              [impacted_groups]=impacted_groups
              [impacted_users_emails]=impacted_users_emails
              [last_notified_when]=last_notified_when
              [last_notified_how]=last_notified_how
            )

            # helper to read .text or first .content
            get_val () {
              local actual="$1"
              printf '%s' "$FORM_JSON" | jq -r --arg a "$actual" '
                def grab($x): (.[$x].text // .[$x].content[0] // .[$x] // "");
                grab($a)
              '
            }

            MISSING=()
            for k in "${required[@]}"; do
              actual="${keymap[$k]:-$k}"
              val="$(get_val "$actual" | tr -d '\r' | sed -E 's/^[[:space:]]+|[[:space:]]+$//g')"
              if [ -z "$val" ] || [ "$val" = "*No response*" ]; then
                MISSING+=("$k")
              fi
            done

            if [ ${#MISSING[@]} -gt 0 ]; then
              echo "Missing required CR fields: ${MISSING[*]}"
              exit 1
            fi
            echo "CR fields present."

        # --- Create/init branch (no-op if it already exists)
        - name: Create/init branch
          shell: bash
          env:
            BRANCH: ${{ steps.names.outputs.branch }}
            ISSUE_NUMBER: ${{ github.event.issue.number }}
            MODE: ${{ steps.mode.outputs.mode }}
          run: |
            set -e
            echo "Ensuring branch=$BRANCH from default=${{ github.event.repository.default_branch }} for issue #$ISSUE_NUMBER mode=$MODE"
            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            if git ls-remote --heads origin "$BRANCH" | grep -q "$BRANCH"; then
              echo "Branch already exists."
              git fetch origin "$BRANCH"
              git checkout "$BRANCH"
            else
              git checkout -b "$BRANCH"
              git commit --allow-empty -m "ci: init $MODE branch for #$ISSUE_NUMBER [skip ci]"
              git push --set-upstream origin "$BRANCH"
              echo "Created branch=$BRANCH"
            fi

        # --- Create PR (NEW ONLY). If it already exists, we do NOT update it.
        - name: Create PR (new only)
          id: pr
          uses: actions/github-script@v7
          with:
            script: |
              const repo = context.repo;
              const base = '${{ github.event.repository.default_branch }}';
              const head = '${{ steps.names.outputs.branch }}';
              const draft = '${{ steps.mode.outputs.pr_draft }}' === 'true';
              const issueNum = context.payload.issue.number;

              // Build body (include raw issue body; JSON only for release–process)
              const formJson = `${{ steps.parse.outcome == 'success' && steps.parse.outputs.data || '' }}`;
              const body = [
                '> ✨ Managed by CI — new PR created from Issue Form.',
                '',
                `Linked issue: #${issueNum}`,
                '',
                '<!-- BEGIN:FORM (raw issue body) -->',
                `${context.payload.issue.body || ''}`,
                '<!-- END:FORM -->',
                '',
                formJson ? '```json' : '',
                formJson || '',
                formJson ? '```' : ''
              ].filter(Boolean).join('\n');

              try {
                const { data: pr } = await github.rest.pulls.create({
                  ...repo, title: '${{ steps.names.outputs.pr_title }}',
                  head, base, body, draft
                });
                core.setOutput('number', String(pr.number));
                core.setOutput('url', pr.html_url);
                core.setOutput('head', pr.head.ref);
                core.setOutput('base', pr.base.ref);
                core.setOutput('draft', String(!!pr.draft));
              } catch (e) {
                // If a PR already exists for this branch->base (422), do NOT update it.
                if (e.status === 422) {
                  core.info('A PR already exists for this branch. Skipping creation (new-only policy).');
                  core.setOutput('number', '');
                  core.setOutput('url', '');
                  return;
                }
                throw e;
              }

        # --- Comment PR link back on the issue (only if we actually created one)
        - name: Comment PR link + meta on the issue
          if: ${{ steps.pr.outputs.number }}
          uses: actions/github-script@v7
          env:
            PR_NUM: ${{ steps.pr.outputs.number }}
            PR_URL: ${{ steps.pr.outputs.url }}
            PR_HEAD: ${{ steps.pr.outputs.head }}
            PR_BASE: ${{ steps.pr.outputs.base }}
          with:
            script: |
              const repo = context.repo;
              const issue_number = context.payload.issue.number;
              const meta = {
                pr: process.env.PR_NUM,
                pr_url: process.env.PR_URL,
                branch: process.env.PR_HEAD,
                base: process.env.PR_BASE,
                issue: issue_number,
                mode: '${{ steps.mode.outputs.mode }}',
                created_by: context.actor,
                created_at: new Date().toISOString()
              };
              const body = [
                `Opened PR: ${process.env.PR_URL}`,
                `Branch: \`${process.env.PR_HEAD}\` → Base: \`${process.env.PR_BASE}\``,
                '',
                '<!-- pr-meta:',
                JSON.stringify(meta),
                '-->'
              ].join('\n');
              await github.rest.issues.createComment({ ...repo, issue_number, body })


