name: Issue → Branch + PR

on:
  workflow_call:

permissions:
  write-all

concurrency:
  group: issue-${{ github.event.issue.number }}
  cancel-in-progress: false


jobs:

  parse:

    runs-on: ubuntu-latest
    steps:
      - name: assign check
        id: check
        run: |
          echo "issue_number=${{ github.event.issue.number }}"
          echo "assignees_json=${{ toJson(github.event.issue.assignees) }}"
          if [ "${{ toJson(github.event.issue.assignees) }}" = "[]" ]; then
            echo "has_assignees=false" >> $GITHUB_OUTPUT
            echo "result=no current assignee"
          else
            echo "has_assignees=true" >> $GITHUB_OUTPUT
            echo "result=already assigned"
          fi

      - name: assign ensure
        if: steps.check.outputs.has_assignees == 'false'
        uses: pozil/auto-assign-issue@v2
        with:
          assignees: "${{ github.event.issue.user.login }}"
          numOfAssignee: 1

      - name: Create branch and draft PR
        id: cib
        uses: robvanderleek/create-issue-branch@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



      # Hotfix should be a normal PR: convert draft → ready (API-only, no checkout)
      - name: Promote hotfix PR to ready-for-review
        if: contains(join(github.event.issue.labels.*.name, ','), 'hotfix')
        uses: actions/github-script@v7
        with:
          script: |
            const repo = context.repo;
            const branchName = '${{ steps.cib.outputs.branchName }}';
            if (!branchName) return;

            const { data: prs } = await github.rest.pulls.list({
              ...repo, state: 'open', head: `${repo.owner}:${branchName}`
            });
            if (!prs.length) return;
            const pr = prs[0];
            if (!pr.draft) return;

            // Prefer the official "ready for review" endpoint; fall back to PATCH draft:false
            try {
              await github.request('POST /repos/{owner}/{repo}/pulls/{pull_number}/ready_for_review', {
                owner: repo.owner, repo: repo.repo, pull_number: pr.number
              });
            } catch {
              await github.rest.pulls.update({ ...repo, pull_number: pr.number, draft: false });
            }

      # Your meta comment back on the issue
      - name: Comment PR link + meta on the issue
        uses: actions/github-script@v7
        with:
          script: |
            const repo = context.repo;
            const issue = context.payload.issue;
            const branchName = '${{ steps.cib.outputs.branchName }}';
            if (!branchName) return;

            const { data: prs } = await github.rest.pulls.list({
              ...repo, state: 'open', head: `${repo.owner}:${branchName}`
            });
            if (!prs.length) return;
            const pr = prs[0];

            const slug = (issue.title || '')
              .toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-+|-+$/g, '').replace(/-+/g, '-');

            const meta = {
              pr: pr.number,
              pr_url: pr.html_url,
              branch: pr.head.ref,
              base: pr.base.ref,
              issue: issue.number,
              source_head_sha: pr.head.sha,
              slug,
              created_by: context.actor,
              created_at: new Date().toISOString()
            };

            const body = [
              `Opened PR: ${pr.html_url}`,
              `Branch: \`${pr.head.ref}\``,
              '',
              '<!-- pr-meta:',
              JSON.stringify(meta),
              '-->'
            ].join('\n');

            // Avoid duplicates
            const comments = await github.rest.issues.listComments({ ...repo, issue_number: issue.number, per_page: 50 });
            const exists = comments.data.some(c => (c.body||'').includes('<!-- pr-meta:') && (c.body||'').includes(`"pr": ${pr.number}`));
            if (!exists) await github.rest.issues.createComment({ ...repo, issue_number: issue.number, body });
