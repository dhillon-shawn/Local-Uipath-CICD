name: Issue → Branch + PR

on:
  workflow_call:

permissions:
  write-all

concurrency:
  group: issue-${{ github.event.issue.number }}
  cancel-in-progress: false


jobs:
   issue_to_pr:
    runs-on: ubuntu-latest
    steps:
      - name: Create branch + PR
        id: cib
        uses: robvanderleek/create-issue-branch@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Convert library/process PRs to DRAFT (hotfix stays ready — fires your ready_for_review CI now)
      - name: Convert PR to draft for library/process
        if: >
          contains(join(github.event.issue.labels.*.name, ','), 'library') ||
          contains(join(github.event.issue.labels.*.name, ','), 'process')
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          BRANCH="${{ steps.cib.outputs.branchName }}"
          [ -z "$BRANCH" ] && exit 0
          # Find the PR created for this branch
          PR_NUM=$(gh pr list --head "$BRANCH" --json number --jq '.[0].number' || true)
          [ -z "${PR_NUM:-}" ] && exit 0
          # Convert to draft
          gh pr ready "$PR_NUM" --undo

      # Ensure hotfix PR is explicitly "ready" (no-op if already ready)
      - name: Ensure hotfix PR is ready-for-review
        if: contains(join(github.event.issue.labels.*.name, ','), 'hotfix')
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          BRANCH="${{ steps.cib.outputs.branchName }}"
          [ -z "$BRANCH" ] && exit 0
          PR_NUM=$(gh pr list --head "$BRANCH" --json number --jq '.[0].number' || true)
          [ -z "${PR_NUM:-}" ] && exit 0
          gh pr ready "$PR_NUM" || true

      # Add an explicit link to the originating issue at the top of the PR body
      - name: Prefix PR body with "Refs #<issue>"
        uses: actions/github-script@v7
        with:
          script: |
            const repo = context.repo;
            const issue_number = context.payload.issue.number;

            // Find PR by branch created in previous step
            const branchName = '${{ steps.cib.outputs.branchName }}';
            if (!branchName) return;
            const { data: prs } = await github.rest.pulls.list({
              ...repo, state: 'open', head: `${repo.owner}:${branchName}`
            });
            if (!prs.length) return;
            const pr = prs[0];

            // Prepend a stable "Refs #<n>" header + Type
            const hasRefs = (pr.body || '').includes(`Refs #${issue_number}`);
            const type =
              context.payload.issue.labels.map(l => typeof l === 'string' ? l : l.name)
                .find(n => ['hotfix','library','process'].includes(n)) || 'unknown';
            if (!hasRefs) {
              const newBody = [`Refs #${issue_number}`, `Type: ${type}`, '', '---', '', pr.body || ''].join('\n');
              await github.rest.pulls.update({ ...repo, pull_number: pr.number, body: newBody });
            }

      # Comment link + meta back on the originating issue (your snippet, kept intact)
      - name: Comment PR link + meta on the issue
        uses: actions/github-script@v7
        with:
          script: |
            const repo = context.repo;
            const issue_number = context.payload.issue.number;

            const branchName = '${{ steps.cib.outputs.branchName }}';
            if (!branchName) return;

            const { data: prs } = await github.rest.pulls.list({
              ...repo, state: 'open', head: `${repo.owner}:${branchName}`
            });
            if (!prs.length) return;
            const pr = prs[0];

            const slug = (context.payload.issue.title || '')
              .toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-+|-+$/g, '').replace(/-+/g, '-');

            const meta = {
              pr: pr.number,
              pr_url: pr.html_url,
              branch: pr.head.ref,
              base: pr.base.ref,
              issue: issue_number,
              source_head_sha: pr.head.sha,
              slug,
              created_by: context.actor,
              created_at: new Date().toISOString()
            };

            const body = [
              `Opened PR: ${pr.html_url}`,
              `Branch: \`${pr.head.ref}\``,
              '',
              '<!-- pr-meta:',
              JSON.stringify(meta),
              '-->'
            ].join('\n');

            await github.rest.issues.createComment({ ...repo, issue_number, body });
