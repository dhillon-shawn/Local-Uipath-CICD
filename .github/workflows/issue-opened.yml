name: Issue → Branch + PR

on:
  workflow_call:

permissions:
  write-all

concurrency:
  group: issue-${{ github.event.issue.number }}
  cancel-in-progress: false


jobs:
  issue_to_pr:
    runs-on: ubuntu-latest
    steps:
      - name: Create branch and (draft) PR
        id: cib
        uses: robvanderleek/create-issue-branch@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # If it's a hotfix, immediately flip the PR from draft → ready
      - name: Promote hotfix PR to ready-for-review
        if: contains(join(github.event.issue.labels.*.name, ','), 'hotfix')
        uses: actions/github-script@v7
        with:
          script: |
            const repo = context.repo;
            const branchName = '${{ steps.cib.outputs.branchName }}';
            if (!branchName) return;

            // Find the PR created for this branch (state:open)
            const { data: prs } = await github.rest.pulls.list({
              ...repo, state: 'open', head: `${repo.owner}:${branchName}`
            });
            if (!prs.length) return;

            const pr = prs[0];
            if (pr.draft) {
              await github.rest.pulls.update({
                ...repo, pull_number: pr.number, draft: false
              }).catch(async () => {
                // Fallback for some repos: use the "ready for review" endpoint
                await github.request('POST /repos/{owner}/{repo}/pulls/{pull_number}/ready_for_review', {
                  owner: repo.owner, repo: repo.repo, pull_number: pr.number
                });
              });
            }

      # Your meta comment back on the originating issue (link + metadata)
      - name: Comment PR link + meta on the issue
        uses: actions/github-script@v7
        with:
          script: |
            const repo = context.repo;
            const issue_number = context.payload.issue.number;
            const branchName = '${{ steps.cib.outputs.branchName }}';
            if (!branchName) return;

            // Grab the PR we just opened (draft or promoted)
            const { data: prs } = await github.rest.pulls.list({
              ...repo, state: 'open', head: `${repo.owner}:${branchName}`
            });
            if (!prs.length) return;
            const pr = prs[0];

            const slug = (context.payload.issue.title || '')
              .toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-+|-+$/g, '').replace(/-+/g, '-');

            const meta = {
              pr: pr.number,
              pr_url: pr.html_url,
              branch: pr.head.ref,
              base: pr.base.ref,
              issue: issue_number,
              source_head_sha: pr.head.sha,
              slug,
              created_by: context.actor,
              created_at: new Date().toISOString()
            };

            const body = [
              `Opened PR: ${pr.html_url}`,
              `Branch: \`${pr.head.ref}\``,
              '',
              '<!-- pr-meta:',
              JSON.stringify(meta),
              '-->'
            ].join('\n');

            await github.rest.issues.createComment({ ...repo, issue_number, body });



