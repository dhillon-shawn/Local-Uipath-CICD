name: Issue → Branch + PR

on:
  workflow_call:

permissions:
  write-all

concurrency:
  group: issue-${{ github.event.issue.number }}
  cancel-in-progress: false

jobs:
  issue_to_pr:
    # run only if it looks like release or hotfix work
    if: contains(join(github.event.issue.labels.*.name, ','), 'release') ||
        contains(join(github.event.issue.labels.*.name, ','), 'hotfix')
    runs-on: ubuntu-latest

    steps:
      - name: Decide mode (release vs hotfix)
        id: mode
        run: |
          labels="${{ join(github.event.issue.labels.*.name, ',') }}"
          if echo "$labels" | grep -qi hotfix; then
            echo "mode=hotfix" >> $GITHUB_OUTPUT
            echo "pr_draft=false" >> $GITHUB_OUTPUT
          else
            echo "mode=release" >> $GITHUB_OUTPUT
            echo "pr_draft=true"  >> $GITHUB_OUTPUT  # your convention: release PRs start as draft
          fi

      - name: Ensure assignee (fallback to issue author)
        if: ${{ toJson(github.event.issue.assignees) == '[]' }}
        uses: actions-ecosystem/action-add-assignees@v1
        with:
          github_token: ${{ github.token }}
          assignees: ${{ github.event.issue.user.login }}

      - name: Checkout default branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.repository.default_branch }}

      - name: Compute names
        id: names
        run: |
          title="${{ github.event.issue.title }}"
          num="${{ github.event.issue.number }}"
          slug=$(echo "$title" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g;s/^-+|-+$//g' | cut -c1-50)
          prefix="${{ steps.mode.outputs.mode }}"
          echo "branch=${prefix}/${num}-${slug}" >> $GITHUB_OUTPUT
          echo "pr_title=${title} (#${num})"     >> $GITHUB_OUTPUT

      # --- Parse Issue Form ONLY for the "release - process" template (labels: process + release)
      - name: Parse Issue Form (release–process only)
        id: parse
        if: contains(join(github.event.issue.labels.*.name, ','), 'release') &&
            contains(join(github.event.issue.labels.*.name, ','), 'process')
        uses: zentered/issue-forms-body-parser@v2.0.0
        # outputs:
        #   steps.parse.outputs.data  -> JSON string of the form values
        #   steps.parse.outputs.fields -> CSV
        # Zero-config; no template path required.

      # --- OPTIONAL: Validate required CR fields here (release–process only)
      - name: Validate CR fields (release–process only)
        if: steps.parse.outcome == 'success'
        run: |
          required=("start" "end" "justification" "plan" "risk" "test_plan")
          MISSING=()
          for key in "${required[@]}"; do
            val=$(echo '${{ steps.parse.outputs.data }}' | jq -r --arg k "$key" '.[$k] // ""')
            if [ -z "$val" ] || [ "$val" = "null" ]; then MISSING+=("$key"); fi
          done
          if [ ${#MISSING[@]} -gt 0 ]; then
            echo "Missing required CR fields: ${MISSING[*]}"
            exit 1
          fi

      # --- Create branch idempotently (no-op if it already exists)
      - name: Create/init branch
        env:
          BRANCH: ${{ steps.names.outputs.branch }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          MODE: ${{ steps.mode.outputs.mode }}
        run: |
          set -e
          echo "Ensuring branch=$BRANCH from default=${{ github.event.repository.default_branch }} for issue #$ISSUE_NUMBER mode=$MODE"
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if git ls-remote --heads origin "$BRANCH" | grep -q "$BRANCH"; then
            echo "Branch already exists."
            git fetch origin "$BRANCH"
            git checkout "$BRANCH"
          else
            git checkout -b "$BRANCH"
            git commit --allow-empty -m "ci: init $MODE branch for #$ISSUE_NUMBER [skip ci]"
            git push --set-upstream origin "$BRANCH"
            echo "Created branch=$BRANCH"
          fi

      # --- Open or update PR (idempotent)
      - name: Open/Update PR
        id: cpr
        uses: peter-evans/create-pull-request@v7
        with:
          title: ${{ steps.names.outputs.pr_title }}
          body: |
            > ✨ Managed by CI — edit the Issue Form; we’ll keep this block in sync.

            Linked issue: #${{ github.event.issue.number }}

            <!-- BEGIN:FORM -->
            ${{ github.event.issue.body }}
            <!-- END:FORM -->

            <!-- RAW:JSON (present only for release–process) -->
            ```json
            ${{ steps.parse.outputs.data }}
            ```
          base: ${{ github.event.repository.default_branch }}
          branch: ${{ steps.names.outputs.branch }}
          draft: ${{ steps.mode.outputs.pr_draft }}



      # --- Comment PR link back on the issue (nice DX)
      - name: Comment PR link + meta on the issue
        uses: actions/github-script@v7
        with:
          script: |
            const repo = context.repo;
            const issue_number = context.payload.issue.number;
            const pr_number = Number(process.env.PR_NUM);
            const { data: pr } = await github.rest.pulls.get({ ...repo, pull_number: pr_number });

            const meta = {
              pr: pr.number,
              pr_url: pr.html_url,
              branch: pr.head.ref,
              base: pr.base.ref,
              issue: issue_number,
              source_head_sha: pr.head.sha,
              created_by: context.actor,
              created_at: new Date().toISOString()
            };

            const body = [
              `Opened/updated PR: ${pr.html_url}`,
              `Branch: \`${pr.head.ref}\``,
              '',
              '<!-- pr-meta:',
              JSON.stringify(meta),
              '-->'
            ].join('\n');

            await github.rest.issues.createComment({ ...repo, issue_number, body });
        env:
          PR_NUM: ${{ steps.cpr.outputs.pull-request-number }}
