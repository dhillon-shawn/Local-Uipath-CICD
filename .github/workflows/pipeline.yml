name: Central Pipeline

on:
  workflow_call:
    inputs:
      target_env:
        type: string
        required: true
      source_ref:
        type: string
        required: true
    secrets: {}
env:
  scope: "OR.Assets OR.BackgroundTasks OR.Execution OR.Folders OR.Jobs OR.Machines.Read OR.Monitoring OR.Robots.Read OR.Settings.Read OR.TestSets OR.TestSetExecutions OR.TestSetSchedules OR.Users.Read"

jobs:
  setup:
    name: setup (routing, mapping, manifests)
    environment: ${{ inputs.target_env }}
    runs-on: ubuntu-latest
    outputs:
      pid:                  ${{ steps.setup.outputs.PID }}
      ptype:                ${{ steps.setup.outputs.ptype }}
      email:                ${{ steps.setup.outputs.EMAIL }}
      publishable:          ${{ steps.setup.outputs.PUBLISHABLE }}

      pr_number:            ${{ steps.setup.outputs.PR_NUMBER }}
      pr_action:            ${{ steps.setup.outputs.PR_ACTION }}
      migrate:              ${{ steps.setup.outputs.MIGRATE }}

      vars: ${{ steps.capture.outputs.vars_json }}

      notes: ${{ steps.notes.outputs.release_text }}

    steps:
      - name: Checkout exact source ref
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.source_ref }}
          persist-credentials: true

      - name: Capture environment and repo vars
        id: capture
        run: |
          echo "vars_json<<EOF" >> "$GITHUB_OUTPUT"
          echo '${{ toJSON(vars) }}' >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

  #    - name: Print vars
  #      run: echo "${{ steps.capture.outputs.vars_json }}"

      - name: Pipeline Setup (Parse+Set)
        id: setup
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/setup@main
        with:
          target_env:  ${{ inputs.target_env }}
          source_ref:  ${{ inputs.source_ref }}
          vars:        ${{ steps.capture.outputs.vars_json }}

      - name: create and format release notes
        id: notes
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/release_notes@main


      - name: PRINT NOTES
        run: |
                echo "NOTES: ${{ steps.notes.outputs.release_text }}"



# ==================================================================================================
# Deps
# ==================================================================================================
  resolve-dependencies:
    name: prepare (auth → version → folder → assets/libs)
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      version:       ${{ steps.compute.outputs.version }}
      base_folder_name:   ${{ steps.folder.outputs.base_folder_name }}
      fid: ${{ steps.folder.outputs.fid }}
    steps:
      - name: Checkout exact source ref
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.source_ref }}
          persist-credentials: true

      - name: auth
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/auth@main
        with:
                target_env: ${{ inputs.target_env == 'hotfix' && 'prod' || inputs.target_env }}
                role_arn: ${{ secrets.RPA_UIPATH_CICD_ROLE_ARN }}
                aws_region: "us-west-2"
                secret_id: ${{ secrets.RPA_UIPATH_CICD_SECRET_ARN }}
                scopes: ${{ env.scope }}

      - id: compute
        name: Compute version
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/compute-version@main
        with:
          target_env:         ${{ inputs.target_env }}
          pid:                ${{ needs.setup.outputs.pid }}

      - id: folder
        name: Resolve / create folder
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/ensure-folder@main
        with:
          target_env:         ${{ inputs.target_env }}
          pid:                ${{ needs.setup.outputs.pid }}
          or_url:             ${{ env.OR_URL }}
          token:              $TOKEN
          dev_rid:            ${{ fromJSON(needs.setup.outputs.vars).DEV_RID }}
          bot_rid:            ${{ fromJSON(needs.setup.outputs.vars).BOT_RID }}
          mid:                ${{ fromJSON(needs.setup.outputs.vars).MID }}
          bot_uid:            ${{ fromJSON(needs.setup.outputs.vars).BOT_UID }}
          dev_uid:            ${{ fromJSON(needs.setup.outputs.vars).DEV_UID }}
          FOLDER_NAME:        "${{ fromJSON(needs.setup.outputs.vars).FOLDER_NAME }}"


      - name: Ensure assets (only on first promote / prod merge)
        if: ${{ needs.setup.outputs.migrate == 'true' }}
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/migrate-assets@main
        with:
          source_base_url:          ${{ env.BASE_URL }}
          TARGET_OR_URL:             ${{ env.OR_URL }}
          token:              $TOKEN


  CLI:
    runs-on: windows-latest
    needs: [setup, resolve-dependencies]
    steps:

      - name: auth
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/auth@main
        with:
                target_env: ${{ inputs.target_env == 'hotfix' && 'prod' || inputs.target_env }}
                role_arn: ${{ secrets.RPA_UIPATH_CICD_ROLE_ARN }}
                aws_region: "us-west-2"
                secret_id: ${{ secrets.RPA_UIPATH_CICD_SECRET_ARN }}
                scopes: ${{ env.scope }}

      - name: Checkout exact source ref (exclude .github)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.source_ref }}
          persist-credentials: true
          sparse-checkout: |
            /*
            !/.github/
          sparse-checkout-cone-mode: false

      - name: uipath-setup
        uses: Mikael-RnD/setup-uipath@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
        env:
          DOTNET_INSTALL_DIR: '${{ runner.temp }}/.dotnet'

      - name: Create Results DIR
        run: New-Item -Path "./results" -ItemType Directory




  #    - name: set nuget.config
  #      shell: powershell
  #      run: |
  #        @'
  #        <?xml version="1.0" encoding="utf-8"?>
  #        <configuration>
  #          <packageSources>
  #            <clear />
  #            <add key="UiPath-Marketplace" value="https://gallery.uipath.com/api/v3/index.json" />
  #            <add key="Official"         value="https://pkgs.dev.azure.com/uipath/Public.Feeds/_packaging/UiPath-Official/nuget/v3/index.json" />
  #          </packageSources>
  #        </configuration>
  #        '@ | Set-Content -Path '${{ github.workspace }}\nuget.config' -Encoding UTF8
  #        $uipcli = (Get-Command uipcli).Source
  #        Copy-Item '${{ github.workspace }}\nuget.config' -Destination (Split-Path $uipcli -Parent) -Force






      - name: analyze
        if: inputs.target_env == 'dev'
        shell: powershell
        run: |
          uipcli package analyze '${{ github.workspace }}\project.json' `
            --resultPath '${{ runner.temp }}\analyze.json' `
            --orchestratorUrl '${{ env.BASE_URL }}/' `
            --orchestratorTenant '${{ env.TENANT}}' `
            -A '${{ env.ORG }}' -I '${{env.APP_ID  }}' -S '${{env.APP_SECRET}}' `
            --orchestratorApplicationScope '${{env.scope}}' `
            --analyzerTraceLevel "Error" `
            --traceLevel Verbose --disableBuiltInNugetFeeds -y `
            --identityUrl '${{ env.BASE_URL }}/identity_'
            
          New-Item -ItemType Directory -Force -Path '.\results' | Out-Null
          Copy-Item '${{ runner.temp }}\analyze.json' '.\results\analyze.json' -Force

      - name: test
        if: ${{ inputs.target_env == 'test' && needs.setup.outputs.publishable == 'true' && needs.setup.outputs.ptype == 'Process' }}

        shell: powershell
        run: |
          uipcli test run '${{ env.BASE_URL }}/' '${{ env.TENANT }}' `
            -A '${{ env.ORG }}' -I '${{ env.APP_ID }}' -S '${{ env.APP_SECRET }}' `
            --identityURL  '${{ env.BASE_URL }}/identity_' `
            --applicationScope '${{ env.scope }}' `
            -o '${{ needs.resolve-dependencies.outputs.base_folder_name }}' `
            -P '${{ github.workspace }}/project.json' `
            --out 'junit' `
            --result_path './results/TestResults.xml' `
            --timeout '7200' `
            --retryCount '0' `
            --attachRobotLogs `
            --disableBuiltInNugetFeeds `
            --traceLevel Verbose -y
          
          
          
      - name: stage for pack
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $stage = Join-Path $env:RUNNER_TEMP 'uipack-stage'
          if (Test-Path $stage) { Remove-Item -Recurse -Force $stage }
          New-Item -ItemType Directory -Path $stage | Out-Null

          robocopy "${{ github.workspace }}" "$stage" /MIR `
            /XD '.git' '.github' 'output' 'results' '.nuget-cache' '.nuget-http' '.nuget' `
            /XF '*.nupkg' 'nuget.config'


          # Treat Robocopy exit codes 0–7 as success
          $rc = $LASTEXITCODE
          if ($rc -ge 8) { throw "robocopy failed with exit $rc" } else { Write-Host "robocopy exit $rc (OK)"; exit 0 }

          
      - name: pack
        shell: powershell
        run: |
            $ErrorActionPreference = 'Stop'
            $stage = Join-Path $env:RUNNER_TEMP 'uipack-stage'
            $proj  = Join-Path $stage 'project.json'
            if (-not (Test-Path $proj)) { throw "Staged project.json not found at $proj" }
            
            $stageOut = Join-Path $stage 'output'
            $repoOut  = Join-Path $env:GITHUB_WORKSPACE 'output'
            New-Item -ItemType Directory -Force -Path $stageOut | Out-Null
            New-Item -ItemType Directory -Force -Path $repoOut  | Out-Null

            uipcli package pack "$proj" `
              --output "$stageOut" `
              --outputType '${{ needs.setup.outputs.ptype }}' `
              -v '${{ needs.resolve-dependencies.outputs.version }}' `
              --repositoryUrl 'https://github.com/${{ github.repository }}' `
              --repositoryBranch '${{ github.ref_name }}' `
              --repositoryCommit '${{ github.sha }}' `
              --repositoryType 'git' `
              --projectUrl 'https://project/url.com' `
              --releaseNotes '${{ needs.setup.outputs.notes }}' `
              --libraryOrchestratorUrl '${{ env.BASE_URL }}/' `
              --libraryOrchestratorTenant '${{ env.TENANT }}' `
              -A '${{ env.ORG }}' -I '${{ env.APP_ID }}' -S '${{ env.APP_SECRET }}' `
              --libraryOrchestratorApplicationScope '${{ env.scope }}' `
              --libraryIdentityUrl '${{ env.BASE_URL }}/identity_' `
              --disableBuiltInNugetFeeds `
              --traceLevel 'Verbose' -y 
              
            Get-ChildItem "$stageOut" -Filter '*.nupkg' | ForEach-Object {
              Copy-Item $_.FullName $repoOut -Force
              Write-Host "Packaged: $($_.Name) -> $repoOut"
            }


            
            
      - name: Upload artifact
        if: ((${{ needs.setup.outputs.publishable }} == 'true')  && inputs.target_env == 'test') || inputs.target_env == 'dev'
        uses: actions/upload-artifact@v4
        with:
          name: results
          path: ./results/*


      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
              name: output
              path: ./output/


  DEPLOY:
    runs-on: ubuntu-latest
    needs: [setup, resolve-dependencies, CLI   ]
    steps:
      - name: Checkout exact source ref
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.source_ref }}
          persist-credentials: true

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: output
          path: ./output

      - name: auth
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/auth@main
        with:
                target_env: ${{ inputs.target_env == 'hotfix' && 'prod' || inputs.target_env }}
                role_arn: ${{ secrets.RPA_UIPATH_CICD_ROLE_ARN }}
                aws_region: "us-west-2"
                secret_id: ${{ secrets.RPA_UIPATH_CICD_SECRET_ARN }}
                scopes: ${{ env.scope }}


      - name: Deploy
        id: CD
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/cd@main
        with:
          FOLDER_NAME:  "${{ fromJSON(needs.setup.outputs.vars).FOLDER_NAME }}"
          fid:          ${{ needs.resolve-dependencies.outputs.fid }}
          target_env:   ${{ inputs.target_env }}
          version:      ${{ needs.resolve-dependencies.outputs.version }}
          pid:          ${{ needs.setup.outputs.pid }}
          or_url:       ${{ env.OR_URL }}
          token:        $TOKEN



  FORMAT:
    runs-on: ubuntu-latest
    needs: [setup,resolve-dependencies,CLI,DEPLOY]
    outputs:
      final_html:    ${{ steps.compose.outputs.html }}
      final_subject: ${{ steps.compose.outputs.subject }}
      attach_path:   ${{ steps.compose.outputs.attach_path }}
    steps:
      - name: Checkout exact source ref
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.source_ref }}

      - name: Download results artifact
        uses: actions/download-artifact@v4
        with:
          name: results
          path: ./results
        continue-on-error: true

      - name: Ensure email directory
        run: mkdir -p ./email


      - name: Test Results → HTML
        id: test_html
        if: ${{ inputs.target_env == 'test' &&  needs.setup.outputs.publishable == 'true' && hashFiles('results/TestResults.xml') != '' }}
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/test_results@main
        with:
          xml_path: ./results/TestResults.xml
          out_path: ./email/TestResults.html

      # Render analysis only for dev when file exists
      - name: Analysis → HTML
        id: analysis_html
        if: ${{ inputs.target_env == 'dev' && hashFiles('results/analyze.json') != '' }}
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/analysis_results@main
        with:
          json_path: ./results/analyze.json
          out_path:  ./email/analysis-report.html


      - name: Compose final email (table + body + subject)
        id: compose
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/compose_email@main
        with:
          publishable:        ${{ needs.setup.outputs.publishable }}
          target_env:         ${{ inputs.target_env }}
          test_html_path:     ${{ steps.test_html.outputs.html_path }}
          analysis_html_path: ${{ steps.analysis_html.outputs.html_path }}
          source_ref:  ${{ inputs.source_ref }}
          version:     ${{ needs.resolve-dependencies.outputs.version }}
          folder_name: ${{ needs.resolve-dependencies.outputs.base_folder_name }}
          project_id:  ${{ needs.setup.outputs.pid }}
          migrate:     ${{ needs.setup.outputs.migrate }}
          cd_status:   ${{ needs.DEPLOY.result }}


  send:
    needs: [setup,FORMAT]
    runs-on: windows-latest
    steps:
      - name: Send Email (SMTP)
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject:  ${{ needs.format.outputs.final_subject }}
          to:       ${{ needs.setup.outputs.email }}
          from:     "UiPath CI/CD <uipath-cicd@noreply.com>"
          html_body: ${{ needs.format.outputs.final_html }}
          convert_markdown: false
          attachments: ${{ needs.format.outputs.attach_path }}
