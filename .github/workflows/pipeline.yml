name: Central Pipeline

on:
  workflow_call:
    inputs:
      target_env: { type: string, required: true }
      sha:   { type: string, required: false }
      rc_tag:     { type: string, required: false }
      pr_num:  { type: string, required: false }

    secrets: {}
env:
  scope: "OR.Assets OR.BackgroundTasks OR.Execution OR.Folders OR.Jobs OR.Machines.Read OR.Monitoring OR.Robots.Read OR.Settings.Read OR.TestSets OR.TestSetExecutions OR.TestSetSchedules OR.Users.Read"

jobs:
  setup:
    name: setup
    environment: ${{ inputs.target_env }}
    runs-on: ubuntu-latest
    outputs:
      pid: ${{ steps.setup.outputs.PID }}
      ptype: ${{ steps.setup.outputs.ptype }}
      entry_point: ${{ steps.setup.outputs.entry_point }}
      deployment_matrix: ${{ steps.setup.outputs.deployment_matrix }}
      email: ${{ steps.setup.outputs.EMAIL }}
      publishable: ${{ steps.setup.outputs.PUBLISHABLE }}
      vars: ${{ steps.capture.outputs.vars }}
      notes: ${{ steps.setup.outputs.notes }}
      version: ${{ steps.compute.outputs.version }}
      fid: ${{ steps.folder.outputs.fid }}

    steps:
      - name: Checkout exact source ref
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}

      - name: Capture environment and repo vars
        id: capture
        run: |
          echo "vars<<EOF" >> "$GITHUB_OUTPUT"
          echo '${{ toJSON(vars) }}' >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Pipeline Setup
        id: setup
        uses: dhillon-shawn/Local-CICD-UTILS/setup@v0
        with:
          target_env: ${{ inputs.target_env }}
          vars: ${{ steps.capture.outputs.vars_json }}
          everything: true

      - name: auth
        uses: dhillon-shawn/Local-CICD-UTILS/auth@v0
        with:
          target_env: 'dev'
          role_arn: ${{ secrets.RPA_UIPATH_CICD_ROLE_ARN }}
          aws_region: "us-west-2"
          secret_id: ${{ secrets.RPA_UIPATH_CICD_SECRET_ARN }}
          scopes: ${{ env.scope }}

      - id: compute
        name: Compute version
        uses: dhillon-shawn/Local-CICD-UTILS/compute-version@v0
        with:
          target_env: ${{ inputs.target_env }}
          pid: ${{ steps.setup.outputs.pid }}

      - name: auth
        if: inputs.target_env != 'dev'
        uses: dhillon-shawn/Local-CICD-UTILS/auth@v0
        with:
          target_env: ${{ inputs.target_env == 'hotfix' && 'prod' || inputs.target_env }}
          role_arn: ${{ secrets.RPA_UIPATH_CICD_ROLE_ARN }}
          aws_region: "us-west-2"
          secret_id: ${{ secrets.RPA_UIPATH_CICD_SECRET_ARN }}
          scopes: ${{ env.scope }}

      - id: folder
        name: Resolve / create folder
        uses: dhillon-shawn/Local-CICD-UTILS/ensure-folder@v0
        with:
          target_env: ${{ inputs.target_env }}
          pid: ${{ steps.setup.outputs.pid }}
          dev_rid: ${{ fromJSON(steps.capture.outputs.vars).DEV_RID }}
          bot_rid: ${{ fromJSON(steps.capture.outputs.vars).BOT_RID }}
          mid: ${{ fromJSON(steps.capture.outputs.vars).MID }}
          bot_uid: ${{ fromJSON(steps.capture.outputs.vars).BOT_UID }}
          dev_uid: ${{ fromJSON(steps.capture.outputs.vars).DEV_UID }}
          FOLDER_NAME: "${{ fromJSON(steps.capture.outputs.vars).FOLDER_NAME }}"



  CLI:
    runs-on: windows-latest
    needs: [setup]
    steps:
      - name: Checkout exact source ref
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}


      - name: setup uipcli and nuget feed
        uses: dhillon-shawn/Local-CICD-UTILS/uipcli-config@v0



      - name: auth
        uses: dhillon-shawn/Local-CICD-UTILS/auth@v0
        with:
          target_env: ${{ inputs.target_env == 'hotfix' && 'prod' || inputs.target_env }}
          role_arn: ${{ secrets.RPA_UIPATH_CICD_ROLE_ARN }}
          aws_region: "us-west-2"
          secret_id: ${{ secrets.RPA_UIPATH_CICD_SECRET_ARN }}
          scopes: ${{ env.scope }}

      - name: CI
        if: ((  needs.setup.outputs.publishable  == 'true')  && inputs.target_env == 'test') || inputs.target_env == 'dev'
        id: CI
        uses: dhillon-shawn/Local-CICD-UTILS/ci@v0
        with:
          folder_name: "${{ fromJSON(needs.setup.outputs.vars).FOLDER_NAME }}"
          target_env: ${{ inputs.target_env == 'hotfix' && 'prod' || inputs.target_env }}
          publishable: ${{ needs.setup.outputs.publishable}}

      - name: auth
        if: inputs.target_env != 'dev'
        uses: dhillon-shawn/Local-CICD-UTILS/auth@v0
        with:
          target_env: "dev"
          role_arn: ${{ secrets.RPA_UIPATH_CICD_ROLE_ARN }}
          aws_region: "us-west-2"
          secret_id: ${{ secrets.RPA_UIPATH_CICD_SECRET_ARN }}
          scopes: ${{ env.scope }}

      - name: Package
        id: Pack
        uses: dhillon-shawn/Local-CICD-UTILS/pack@v0
        with:
          ptype: ${{ needs.setup.outputs.ptype }}
          version: ${{ needs.setup.outputs.version }}
          release_notes: ${{ needs.setup.outputs.notes }}




  Deploy:
    runs-on: ubuntu-latest
    needs: [setup, CLI]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup.outputs.deployment_matrix) }}
    concurrency:
      group: deploy-${{ matrix.env }}-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - name: Checkout exact source ref
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}

      - name: auth
        uses: dhillon-shawn/Local-CICD-UTILS/auth@v0
        with:
          target_env: ${{ matrix.env }}
          role_arn: ${{ secrets.RPA_UIPATH_CICD_ROLE_ARN }}
          aws_region: "us-west-2"
          secret_id: ${{ secrets.RPA_UIPATH_CICD_SECRET_ARN }}
          scopes: ${{ env.scope }}

      - name: Deploy
        id: CD
        uses: dhillon-shawn/Local-CICD-UTILS/cd@v0
        with:
          folder_name: "${{ fromJSON(needs.setup.outputs.vars).FOLDER_NAME }}"
          target_env: ${{ matrix.env }}
          version: ${{ needs.setup.outputs.version }}
          pid: ${{ needs.setup.outputs.pid }}

  rc:
    needs: [setup,Deploy]
    runs-on: ubuntu-latest
    steps:

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
            name: output
            path: ./output


      - name: Create RC + upload package/meta data
        if: ${{ inputs.rc_tag != '' }}
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO:     ${{ github.repository }}
          PID:      ${{ needs.setup.outputs.pid }}
          VERSION:  ${{ needs.setup.outputs.version }}
          SHA:      ${{ inputs.sha }}
          RC_TAG:   ${{ inputs.rc_tag }}
          PR_NUM:   ${{ inputs.pr_num }}
          FOLDER: "${{ fromJSON(needs.setup.outputs.vars).FOLDER_NAME }}"
          OUT_DIR:  output
        run: |
          set -euo pipefail
          PKG="$(find "$OUT_DIR" -type f -name '*.nupkg' | sort | head -n 1 || true)"
          test -n "${PKG:-}" || { echo "No .nupkg under ./$OUT_DIR"; exit 1; }
          NAME="$(basename "$PKG")"

          cat > rc-meta.json <<EOF
          {"folder":"${FOLDER}","pid":"${PID}","version":"${VERSION}","package":"${NAME}","commit":"${SHA}"}
          EOF

          if gh release view "$RC_TAG" --repo "$REPO" >/dev/null 2>&1; then
            gh release edit "$RC_TAG" \
              --repo   "$REPO" \
              --title  "RC $RC_TAG" \
              --notes  "PR #$PR_NUM - pid=$PID - version=$VERSION - commit=$SHA" \
              --target "$SHA" \
              --prerelease
          else
            gh release create "$RC_TAG" \
              --repo   "$REPO" \
              --title  "RC $RC_TAG" \
              --notes  "PR #$PR_NUM - pid=$PID - version=$VERSION - commit=$SHA" \
              --target "$SHA" \
              --prerelease
          fi

          gh release upload "$RC_TAG" --repo "$REPO" "$PKG" --clobber
          gh release upload "$RC_TAG" --repo "$REPO" rc-meta.json --clobber

          echo "RC $RC_TAG updated with $NAME and rc-meta.json"

  send:
    needs: [setup, CLI, Deploy, rc]
    if: ${{ always() && !cancelled() }}
    uses: dhillon-shawn/Local-Uipath-CICD/.github/workflows/send-email.yml@main
    secrets: inherit
    with:
        target_env: ${{ inputs.target_env }}
        publishable: ${{ needs.setup.outputs.publishable }}
        result: ${{ needs.DEPLOY.result }}
        version: ${{ needs.setup.outputs.version }}
        folder_name: ${{ fromJSON(needs.setup.outputs.vars).FOLDER_NAME }}
        pid: ${{ needs.setup.outputs.pid }}
        migrate: ${{ needs.setup.outputs.migrate }}
        email: ${{ needs.setup.outputs.email }}



