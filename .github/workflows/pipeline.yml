name: Central Pipeline

on:
  workflow_call:
    inputs:
      target_env: { type: string, required: true }
      sha: { type: string, required: false }
      rc_tag: { type: string, required: false }
      pr_num: { type: string, required: false }

    secrets: {}
env:
  scope: "OR.Assets OR.BackgroundTasks OR.Execution OR.Folders OR.Jobs OR.Machines.Read OR.Monitoring OR.Robots.Read OR.Settings.Read OR.TestSets OR.TestSetExecutions OR.TestSetSchedules OR.Users.Read"

jobs:
  setup:
    name: setup
    environment: ${{ inputs.target_env }}
    runs-on: ubuntu-latest
    outputs:
      pid: ${{ steps.setup.outputs.PID }}
      ptype: ${{ steps.setup.outputs.ptype }}
      entry_point: ${{ steps.setup.outputs.entry_point }}
      deployment_matrix: ${{ steps.setup.outputs.deployment_matrix }}
      email: ${{ steps.setup.outputs.EMAIL }}
      skip_ci: ${{ steps.setup.outputs.skip_ci }}
      vars: ${{ steps.capture.outputs.vars }}
      notes: ${{ steps.setup.outputs.notes }}
      bump_version: ${{ steps.setup.outputs.bump_major }}
      text_names:       ${{ steps.parse.outputs.text_names }}
      int_names:        ${{ steps.parse.outputs.int_names }}
      bool_names:       ${{ steps.parse.outputs.bool_names }}
      credential_names: ${{ steps.parse.outputs.credential_names }}


    steps:
      - name: Checkout exact source ref
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}

      - name: Capture environment and repo vars
        id: capture
        run: |
          echo "vars<<EOF" >> "$GITHUB_OUTPUT"
          echo '${{ toJSON(vars) }}' >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
      - name: Pipeline Setup
        id: setup
        uses: dhillon-shawn/Local-CICD-UTILS/setup@v0
        with:
          target_env: ${{ inputs.target_env }}
          everything: "true"

      - name: Scan assets
        id: parse
        uses: dhillon-shawn/Local-CICD-UTILS/parse-assets@v0

      - name: Upload assets.json
        uses: actions/upload-artifact@v4
        with:
          name: uipath-assets
          path: ${{ steps.parse.outputs.assets_json_path }}

  ensure:
    runs-on: windows-latest
    needs: [setup]
    outputs:
      version: ${{ steps.compute.outputs.version }}
    steps:
      - name: Checkout exact source ref
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}
      - name: auth
        uses: dhillon-shawn/Local-CICD-UTILS/auth@v0
        with:
          target_env: "dev"
          role_arn: ${{ secrets.RPA_UIPATH_CICD_ROLE_ARN }}
          aws_region: "us-west-2"
          secret_id: ${{ secrets.RPA_UIPATH_CICD_SECRET_ARN }}
          scopes: ${{ env.scope }}

      - id: compute
        name: Compute version
        uses: dhillon-shawn/Local-CICD-UTILS/compute-version@v0
        with:
          target_env: ${{ inputs.target_env }}
          pid: ${{ needs.setup.outputs.pid }}
          bump_major: ${{ needs.setup.outputs.bump_major }}


  CLI:
    runs-on: windows-latest
    needs: [setup, ensure]
    steps:
      - name: Checkout exact source ref
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}

      - name: setup uipcli and nuget feed
        uses: dhillon-shawn/Local-CICD-UTILS/uipcli-config@v0

      - name: auth
        uses: dhillon-shawn/Local-CICD-UTILS/auth@v0
        if: (((  needs.setup.outputs.skip_ci  == 'false')  && inputs.target_env == 'test') || inputs.target_env == 'dev') && needs.setup.outputs.ptype == 'Process'
        with:
          target_env: ${{ inputs.target_env == 'prod-bypass' && 'prod' || inputs.target_env }}
          role_arn: ${{ secrets.RPA_UIPATH_CICD_ROLE_ARN }}
          aws_region: "us-west-2"
          secret_id: ${{ secrets.RPA_UIPATH_CICD_SECRET_ARN }}
          scopes: ${{ env.scope }}

      - name: CI
        if: (((  needs.setup.outputs.skip_ci  == 'false')  && inputs.target_env == 'test') || inputs.target_env == 'dev') && needs.setup.outputs.ptype == 'Process'
        id: CI
        uses: dhillon-shawn/Local-CICD-UTILS/ci@v0
        with:
          folder_name: "${{ fromJSON(needs.setup.outputs.vars).FOLDER_NAME }}"
          target_env: ${{ inputs.target_env == 'prod-bypass' && 'prod' || inputs.target_env }}
          skip_ci: ${{ needs.setup.outputs.skip_ci}}

      - name: auth
        if: inputs.target_env != 'dev'
        uses: dhillon-shawn/Local-CICD-UTILS/auth@v0
        with:
          target_env: "dev"
          role_arn: ${{ secrets.RPA_UIPATH_CICD_ROLE_ARN }}
          aws_region: "us-west-2"
          secret_id: ${{ secrets.RPA_UIPATH_CICD_SECRET_ARN }}
          scopes: ${{ env.scope }}

      - name: Package
        id: Pack
        uses: dhillon-shawn/Local-CICD-UTILS/pack@v0
        with:
          ptype: ${{ needs.setup.outputs.ptype }}
          version: ${{ needs.ensure.outputs.version }}
          release_notes: ${{ needs.setup.outputs.notes }}

  Deploy:
    runs-on: ubuntu-latest
    needs: [setup, ensure, CLI]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup.outputs.deployment_matrix) }}
    concurrency:
      group: deploy-${{ matrix.env }}-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - name: Checkout exact source ref
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}

      - name: auth
        uses: dhillon-shawn/Local-CICD-UTILS/auth@v0
        with:
          target_env: ${{ matrix.env }}
          role_arn: ${{ secrets.RPA_UIPATH_CICD_ROLE_ARN }}
          aws_region: "us-west-2"
          secret_id: ${{ secrets.RPA_UIPATH_CICD_SECRET_ARN }}
          scopes: ${{ env.scope }}

      - name: Get asset values (dev)
        if: matrix.env == 'dev'
        id: get
        uses: dhillon-shawn/Local-CICD-UTILS/get-assets@v0
        with:
          folder_name: "${{ fromJSON(needs.setup.outputs.vars).FOLDER_NAME }}"
          text_names:  ${{ needs.parse-assets.outputs.text_names }}
          int_names:   ${{ needs.parse-assets.outputs.int_names }}
          bool_names:  ${{ needs.parse-assets.outputs.bool_names }}

      - name: Upload values (dev only)
        if: matrix.env == 'dev'
        uses: actions/upload-artifact@v4
        with:
          name: assets-values
          path: ${{ steps.get.outputs.path }}

      - name: Download values (non-dev)
        if: matrix.env != 'dev'
        uses: actions/download-artifact@v4
        with:
          name: assets-values

      - name: Migrate assets (non-dev)
        if: matrix.env != 'dev'
        id: mig
        uses: dhillon-shawn/Local-CICD-UTILS/migrate-assets@v0
        with:
          folder_name: "${{ fromJSON(needs.setup.outputs.vars).FOLDER_NAME }}"
          values_path: assets.values.json

      - name: Results
        if: matrix.env != 'dev'
        run: |
          echo "Migrated OK:    ${{ steps.mig.outputs.migrated_ok }}"
          echo "Migrated FAIL:  ${{ steps.mig.outputs.migrated_fail }}"
          
      - name: Deploy
        id: CD
        uses: dhillon-shawn/Local-CICD-UTILS/cd@v0
        with:
          folder_name: "${{ fromJSON(needs.setup.outputs.vars).FOLDER_NAME }}"
          target_env: ${{ matrix.env }}
          version: ${{ needs.ensure.outputs.version }}
          pid: ${{ needs.setup.outputs.pid }}
          ptype: ${{needs.setup.outputs.ptype}}

  rc:
    needs: [setup, ensure, Deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Create RC + upload package/meta data
        if: ${{ inputs.rc_tag != '' }}
        uses: dhillon-shawn/Local-CICD-UTILS/rc-upload@v0
        with:
          PID: ${{ needs.setup.outputs.pid }}
          VERSION: ${{ needs.ensure.outputs.version }}
          SHA: ${{ inputs.sha }}
          RC_TAG: ${{ inputs.rc_tag }}
          PR_NUM: ${{ inputs.pr_num }}
          FOLDER: "${{ fromJSON(needs.setup.outputs.vars).FOLDER_NAME }}"

  send:
    needs: [setup, ensure, CLI, Deploy, rc]
    if: ${{ always() && !cancelled() }}
    uses: dhillon-shawn/Local-Uipath-CICD/.github/workflows/send-email.yml@main
    secrets: inherit
    with:
      target_env: ${{ inputs.target_env }}
      result: ${{ needs.DEPLOY.result }}
      version: ${{ needs.ensure.outputs.version }}
      folder_name: ${{ fromJSON(needs.setup.outputs.vars).FOLDER_NAME }}
      pid: ${{ needs.setup.outputs.pid }}
      email: ${{ needs.setup.outputs.email }}
