name: Central Pipeline

on:
  workflow_call:
    inputs:
      target_env:
        type: string
        required: true
      source_ref:
        type: string
        required: true
    secrets: {}
env:
  scope: "OR.Assets OR.BackgroundTasks OR.Execution OR.Folders OR.Jobs OR.Machines.Read OR.Monitoring OR.Robots.Read OR.Settings.Read OR.TestSets OR.TestSetExecutions OR.TestSetSchedules OR.Users.Read"

jobs:
  setup:
    name: setup
    environment: ${{ inputs.target_env }}
    runs-on: ubuntu-latest
    outputs:
      pid:                  ${{ steps.setup.outputs.PID }}
      ptype:                ${{ steps.setup.outputs.ptype }}
      entry_point:          ${{ steps.setup.outputs.entry_point }}
      deployment_matrix:    ${{ steps.setup.outputs.deployment_matrix }}
      email:                ${{ steps.setup.outputs.EMAIL }}
      publishable:          ${{ steps.setup.outputs.PUBLISHABLE }}

      pr_number:            ${{ steps.setup.outputs.PR_NUMBER }}
      pr_action:            ${{ steps.setup.outputs.PR_ACTION }}
      migrate:              ${{ steps.setup.outputs.MIGRATE }}

      vars: ${{ steps.capture.outputs.vars }}

      notes: ${{ steps.notes.outputs.release_text }}

      version:       ${{ steps.compute.outputs.version }}
      base_folder_name:   ${{ steps.folder.outputs.base_folder_name }}
      fid: ${{ steps.folder.outputs.fid }}

    steps:
      - name: Checkout exact source ref
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.source_ref }}

      - name: Capture environment and repo vars
        id: capture
        run: |
          echo "vars<<EOF" >> "$GITHUB_OUTPUT"
          echo '${{ toJSON(vars) }}' >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

  #    - name: Print vars
  #      run: echo "${{ steps.capture.outputs.vars_json }}"

      - name: Pipeline Setup (Parse+Set)
        id: setup
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/setup@main
        with:
          target_env:  ${{ inputs.target_env }}
          source_ref:  ${{ inputs.source_ref }}
          vars:        ${{ steps.capture.outputs.vars_json }}

      - name: create and format release notes
        id: notes
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/release_notes@main


      - name: PRINT NOTES
        run: |
                echo "NOTES: ${{ steps.notes.outputs.release_text }}"
                
      - name: auth
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/auth@main
        with:
                target_env: ${{ inputs.target_env == 'hotfix' && 'prod' || inputs.target_env }}
                role_arn: ${{ secrets.RPA_UIPATH_CICD_ROLE_ARN }}
                aws_region: "us-west-2"
                secret_id: ${{ secrets.RPA_UIPATH_CICD_SECRET_ARN }}
                scopes: ${{ env.scope }}

      - id: compute
        name: Compute version
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/compute-version@main
        with:
          target_env:         ${{ inputs.target_env }}
          pid:                ${{ steps.setup.outputs.pid }}

      - id: folder
        name: Resolve / create folder
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/ensure-folder@main
        with:
          target_env:         ${{ inputs.target_env }}
          pid:                ${{ steps.setup.outputs.pid }}
          or_url:             ${{ env.OR_URL }}
          token:              $TOKEN
          dev_rid:            ${{ fromJSON(steps.capture.outputs.vars).DEV_RID }}
          bot_rid:            ${{ fromJSON(steps.capture.outputs.vars).BOT_RID }}
          mid:                ${{ fromJSON(steps.capture.outputs.vars).MID }}
          bot_uid:            ${{ fromJSON(steps.capture.outputs.vars).BOT_UID }}
          dev_uid:            ${{ fromJSON(steps.capture.outputs.vars).DEV_UID }}
          FOLDER_NAME:        "${{ fromJSON(steps.capture.outputs.vars).FOLDER_NAME }}"


      - name: Ensure assets (only on first promote / prod merge)
        if: ${{ steps.setup.outputs.migrate == 'true' }}
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/migrate-assets@main
        with:
          source_base_url:          ${{ env.BASE_URL }}
          TARGET_OR_URL:             ${{ env.OR_URL }}
          token:              $TOKEN

  CLI:
    runs-on: windows-latest
    needs: [setup]
    steps:
      - name: Checkout exact source ref
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.source_ref }}

      - name: Ensure .NET 8 SDK (cached, no admin needed)
        shell: powershell
        run: |
          $DotnetRoot = Join-Path $env:USERPROFILE '.dotnet'
          $SdkGlob    = Join-Path (Join-Path $DotnetRoot 'sdk') '8.0.*'
          $DotnetExe  = Join-Path $DotnetRoot 'dotnet.exe'

          $has8 = (Test-Path $DotnetExe) -and (Get-ChildItem $SdkGlob -Directory -ErrorAction SilentlyContinue)

          if (-not $has8) {
            Write-Host "Installing .NET SDK 8.x to $DotnetRoot"
            $Installer = Join-Path $env:RUNNER_TEMP 'dotnet-install.ps1'
            Invoke-WebRequest -UseBasicParsing https://dot.net/v1/dotnet-install.ps1 -OutFile $Installer
            powershell -NoProfile -ExecutionPolicy Bypass -File $Installer -Channel 8.0 -InstallDir $DotnetRoot -Quality GA
          } else {
            Write-Host "Reusing existing .NET SDK 8.x in $DotnetRoot"
          }

          $DotnetRoot | Out-File -FilePath $env:GITHUB_PATH -Append
          "DOTNET_ROOT=$DotnetRoot" | Out-File -FilePath $env:GITHUB_ENV -Append

          & $DotnetExe --info

      - name: Cache UiPath CLI v1
        uses: actions/cache@v4
        with:
          path: packages
          key: uipcli-25.4.9337.28376

      - name: Check UiPath CLI
        id: check-uipcli
        shell: powershell
        run: |
          $cmd = Get-Command packages\UiPath.CLI.Windows.25.4.9337.28376\tools\uipcli.exe -ErrorAction SilentlyContinue
          if ($cmd) {
            "has_uipcli=true"  >> $env:GITHUB_OUTPUT
            Write-Host "Found uipcli in $((Split-Path $cmd.Source -Parent))"
          } else {
            "has_uipcli=false" >> $env:GITHUB_OUTPUT
            Write-Host "uipcli not found on PATH"
          }
            
      - name: Setup NuGet CLI
        if: steps.check-uipcli.outputs.has_uipcli != 'true'
        shell: cmd
        run: |
          curl.exe -o nuget.exe -L https://dist.nuget.org/win-x86-commandline/latest/nuget.exe
      - name: Install UiPath CLI
        if: steps.check-uipcli.outputs.has_uipcli != 'true'
        shell: cmd
        run: |
          nuget.exe install UiPath.CLI.Windows -Version 25.4.9337.28376 -OutputDirectory packages -Source https://uipath.pkgs.visualstudio.com/Public.Feeds/_packaging/UiPath-Official/nuget/v3/index.json
          
      - name: Write nuget.config
        shell: powershell
        run: |
          $uipcli = (Get-Command "packages\UiPath.CLI.Windows.25.4.9337.28376\tools\uipcli.exe").Source
          Copy-Item '${{ github.workspace }}\nuget.config' -Destination (Split-Path $uipcli -Parent) -Force

      - name: Create Results DIR
        shell: powershell
        run: New-Item -Path "./results" -ItemType Directory -Force | Out-Null

      - name: analyze
        if: inputs.target_env == 'dev'
        shell: powershell
        run: |
          packages\UiPath.CLI.Windows.25.4.9337.28376\tools\uipcli.exe package analyze '${{ github.workspace }}\project.json' `
            --resultPath '${{ runner.temp }}\analyze.json' `
            --orchestratorUrl '${{ env.BASE_URL }}/' `
            --orchestratorTenant '${{ env.TENANT }}' `
            -A '${{ env.ORG }}' -I '${{env.APP_ID  }}' -S '${{env.APP_SECRET}}' `
            --orchestratorApplicationScope '${{ env.scope}}' `
            --analyzerTraceLevel "Warning" `
            --ignoredRules "ST-NMG-001,ST-NMG-002,ST-NMG-009,ST-NMG-011,ST-NMG-016,ST-NMG-008,ST-USG-032,ST-USG-034,ST-USG-027,UI-ANA-018,TA-DBP-002,ST-MRD-002,TA-DBP-003" `
            --traceLevel Verbose --disableBuiltInNugetFeeds -y `
            --identityUrl '${{ env.BASE_URL }}/identity_'
                  
          cat ${{ runner.temp }}\analyze.json
          New-Item -ItemType Directory -Force -Path '.\results' | Out-Null
          Copy-Item '${{ runner.temp }}\analyze.json' '.\results\analyze.json' -Force
          
          
      - name: test
        if: ${{ inputs.target_env == 'test' && needs.setup.outputs.publishable == 'true' }}
        shell: powershell
        run: |
          New-Item -Path "${{ runner.temp }}\test.xml" -ItemType File
          packages\UiPath.CLI.Windows.25.4.9337.28376\tools\uipcli.exe test run `
            '${{ env.BASE_URL }}/' '${{ env.TENANT }}' `
            -P '${{ github.workspace }}\project.json' --out "junit" --r '${{ runner.temp }}\test.xml' `
            -A '${{ env.ORG }}' -I '${{env.APP_ID  }}' -S '${{env.APP_SECRET}}' `
            --applicationScope '${{ env.scope}}' --attachRobotLogs `
            -o '${{ needs.setup.outputs.base_folder_name }}' `
            --traceLevel Verbose --disableBuiltInNugetFeeds -y `
            --identityUrl '${{ env.BASE_URL }}/identity_'
                  
          cat ${{ runner.temp }}\test.xml
          New-Item -ItemType Directory -Force -Path '.\results' | Out-Null
          Copy-Item '${{ runner.temp }}\test.xml' '.\results\test.xml' -Force

      - name: auth
        if: inputs.target_env != 'dev'
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/auth@main
        with:
                target_env: 'dev'
                role_arn: ${{ secrets.RPA_UIPATH_CICD_ROLE_ARN }}
                aws_region: "us-west-2"
                secret_id: ${{ secrets.RPA_UIPATH_CICD_SECRET_ARN }}
                scopes: ${{ env.scope }}

      - name: stage for pack
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $stage = Join-Path $env:RUNNER_TEMP 'uipack-stage'
          if (Test-Path $stage) { Remove-Item -Recurse -Force $stage }
          New-Item -ItemType Directory -Path $stage | Out-Null

          robocopy "${{ github.workspace }}" "$stage" /MIR `
            /XD '.git' '.github' 'output' 'results' '.nuget-cache' '.nuget-http' '.nuget' 'packages' 'nuget.exe' `
            /XF '*.nupkg' 'nuget.config'

          $rc = $LASTEXITCODE
          if ($rc -ge 8) { throw "robocopy failed with exit $rc" } else { Write-Host "robocopy exit $rc (OK)"; exit 0 }

      - name: pack
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $stage = Join-Path $env:RUNNER_TEMP 'uipack-stage'
          $proj  = Join-Path $stage 'project.json'
          if (-not (Test-Path $proj)) { throw "Staged project.json not found at $proj" }
                  
          $stageOut = Join-Path $stage 'output'
          $repoOut  = Join-Path $env:GITHUB_WORKSPACE 'output'
          New-Item -ItemType Directory -Force -Path $stageOut | Out-Null
          New-Item -ItemType Directory -Force -Path $repoOut  | Out-Null

          packages\UiPath.CLI.Windows.25.4.9337.28376\tools\uipcli.exe package pack "$proj" `
            --output "$stageOut" `
            --outputType '${{ needs.setup.outputs.ptype }}' `
            -v '${{ needs.setup.outputs.version }}' `
            --repositoryUrl 'https://github.com/${{ github.repository }}' `
            --repositoryBranch '${{ github.ref_name }}' `
            --repositoryCommit '${{ github.sha }}' `
            --repositoryType 'git' `
            --projectUrl 'https://project/url.com' `
            --releaseNotes '${{ needs.setup.outputs.notes }}' `
            --libraryOrchestratorUrl '${{ env.BASE_URL }}/' `
            --libraryOrchestratorTenant '${{ env.TENANT }}' `
            -A '${{ env.ORG }}' -I '${{ env.APP_ID }}' -S '${{ env.APP_SECRET }}' `
            --libraryOrchestratorApplicationScope '${{ env.scope }}' `
            --libraryIdentityUrl '${{ env.BASE_URL }}/identity_' `
            --disableBuiltInNugetFeeds `
            --traceLevel 'Verbose' -y 
                    
          Get-ChildItem "$stageOut" -Filter '*.nupkg' | ForEach-Object {
            Copy-Item $_.FullName $repoOut -Force
            Write-Host "Packaged: $($_.Name) -> $repoOut"
          }
            

      - name: Upload artifact
        if: ((${{ needs.setup.outputs.publishable }} == 'true')  && inputs.target_env == 'test') || inputs.target_env == 'dev'
        uses: actions/upload-artifact@v4
        with:
          name: results
          path: ./results/*
        continue-on-error: true


      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
              name: output
              path: ./output/
              if-no-files-found: error





  DEPLOY:
    runs-on: ubuntu-latest
    needs: [setup, CLI   ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup.outputs.deployment_matrix) }}
    concurrency:
      group: deploy-${{ matrix.env }}-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - name: Checkout exact source ref
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.source_ref }}


      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: output
          path: ./output


      - name: auth
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/auth@main
        with:
                target_env: ${{ matrix.env }}
                role_arn: ${{ secrets.RPA_UIPATH_CICD_ROLE_ARN }}
                aws_region: "us-west-2"
                secret_id: ${{ secrets.RPA_UIPATH_CICD_SECRET_ARN }}
                scopes: ${{ env.scope }}

      - name: Deploy
        id: CD
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/cd@main
        with:
          full_folder_name:  "${{ fromJSON(needs.setup.outputs.vars).FOLDER_NAME }}"
          base_folder_name:  "${{ needs.setup.outputs.base_folder_name }}"
          fid:          ${{ needs.setup.outputs.fid }}
          target_env:   ${{ matrix.env }}
          version:      ${{ needs.setup.outputs.version }}
          pid:          ${{ needs.setup.outputs.pid }}
          or_url:       ${{ env.OR_URL }}
          token:        $TOKEN





  send:
    needs: [setup, CLI, DEPLOY]
    runs-on: windows-latest
    if: ${{ always() && !cancelled() }}
    steps:

      - name: Download results artifact
        uses: actions/download-artifact@v4
        with:
          name: results
          path: ./results
        continue-on-error: true

      - name: Compose Analysis Email
        uses: dhillon-shawn/Local-Uipath-CICD/.github/actions/format-email@main
        id: compose
        with:
          target_env:  ${{ inputs.target_env }}
          publishable: ${{ needs.setup.outputs.publishable }}
          json_path: results/analyze.json
          xml_path: results/test.xml
          cd_status: ${{ needs.DEPLOY.result }}
          source_ref: ${{ github.sha }}
          version:   ${{ needs.setup.outputs.version }}
          folder_name: ${{ fromJSON(needs.setup.outputs.vars).FOLDER_NAME }}
          project_id: ${{ needs.setup.outputs.pid }}
          migrate:  ${{ needs.setup.outputs.migrate }}

      - name: Send Email (SMTP)
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject:  ${{ steps.compose.outputs.subject }}
          to:       ${{ needs.setup.outputs.email }}
          from:     "UiPath CI/CD <uipath-cicd@noreply.com>"
          html_body: file://${{ steps.compose.outputs.html }}
          convert_markdown: false

