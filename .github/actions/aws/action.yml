name: "AWS env pair -> APP_ID/APP_SECRET"
description: "Configure AWS, fetch one JSON secret, map {ENV}_APP_ID/_APP_SECRET -> APP_ID/APP_SECRET"
inputs:
  env:
    description: "Environment name, e.g. DEV|STAGE|PROD (case-insensitive)"
    required: true
  role_arn:
    description: "AWS role to assume (OIDC)"
    required: true
  aws_region:
    description: "AWS region for Secrets Manager"
    required: true
  secret_id:
    description: "Secret name/ARN that contains DEV_APP_ID, DEV_APP_SECRET, etc."
    required: true
runs:
  using: "composite"
  steps:
    - name: Configure AWS (OIDC)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.role_arn }}
        aws-region: ${{ inputs.aws_region }}

    # Keep secret as a single JSON string in APP_SECRETS (no blank alias).
    - name: Get secret as JSON string (env var)
      uses: aws-actions/aws-secretsmanager-get-secrets@v2
      with:
        secret-ids: |
          APP_SECRETS,${{ inputs.secret_id }}
        parse-json-secrets: false

    # Cross-OS JSON parse & export; no bash or PowerShell needed
    - name: Map {ENV}_APP_ID/_APP_SECRET -> APP_ID/APP_SECRET
      uses: actions/github-script@v7
      env:
        TARGET_ENV: ${{ inputs.env }}
        # APP_SECRETS is provided by the previous step as an env var
      with:
        script: |
          const core = require('@actions/core');

          const envName = (process.env.TARGET_ENV || '').trim();
          if (!envName) { core.setFailed('inputs.env is required'); process.exit(1); }

          const upper = envName.toUpperCase();
          const raw = process.env.APP_SECRETS;
          if (!raw) { core.setFailed('APP_SECRETS is empty. Check your secret alias or aws-secretsmanager-get-secrets step.'); process.exit(1); }

          let obj;
          try { obj = JSON.parse(raw); }
          catch (e) { core.setFailed('SecretString is not valid JSON'); process.exit(1); }

          // Case-insensitive lookup: normalize keys to UPPERCASE
          const map = {};
          for (const [k, v] of Object.entries(obj)) { map[k.toUpperCase()] = v; }

          const idKey = `${upper}_APP_ID`;
          const secretKey = `${upper}_APP_SECRET`;
          const appId = map[idKey];
          const appSecret = map[secretKey];

          if (!appId || !appSecret) {
            const pref = `${upper}_`;
            const candidates = Object.keys(map).filter(k => k.startsWith(pref));
            core.info(`Found keys with prefix '${pref}': ${candidates.join(', ') || '(none)'}`);
            core.setFailed(`Missing keys '${idKey}' or '${secretKey}' in the JSON of secret '${process.env.SECRET_NAME || '<<secret>>'}'.`);
            process.exit(1);
          }

          // Mask and export
          core.setSecret(String(appId));
          core.setSecret(String(appSecret));
          core.exportVariable('APP_ID', String(appId));
          core.exportVariable('APP_SECRET', String(appSecret));

