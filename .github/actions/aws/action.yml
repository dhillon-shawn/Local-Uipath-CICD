name: "Resolve env APP_ID/APP_SECRET from one AWS secret"
description: "Fetch a single JSON secret and expose APP_ID/APP_SECRET for the selected env"
inputs:
  env:
    description: "Environment name (e.g. dev|stage|prod|DEV|STAGE|PROD)"
    required: true
  role_arn:
    description: "AWS role to assume (OIDC)"
    required: true
  aws_region:
    description: "AWS region for Secrets Manager"
    required: true
  secret_id:
    description: "Secret name/ARN that contains keys like DEV_APP_ID, DEV_APP_SECRET"
    required: true
runs:
  using: "composite"
  steps:
    - name: Configure AWS (OIDC)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.role_arn }}
        aws-region: ${{ inputs.aws_region }}

    # Use a blank alias + parse JSON so the JSON keys become env vars directly
    - name: Fetch JSON secret -> env vars
      uses: aws-actions/aws-secretsmanager-get-secrets@v2
      with:
        secret-ids: |
          APP_SECRETS,${{ inputs.secret_id }}
        parse-json-secrets: false

    - name: Map {ENV}_APP_ID/_APP_SECRET -> APP_ID/APP_SECRET
      uses: actions/github-script@v7
      with:
        script: |
          const core = require('@actions/core');

          const envName = core.getInput('env') || '';
          if (!envName) core.setFailed('inputs.env is required');

          const upper = envName.toUpperCase();
          const raw = process.env.APP_SECRETS;
          if (!raw) core.setFailed('APP_SECRETS env var is empty; did we fetch the secret?');

          let obj;
          try { obj = JSON.parse(raw); }
          catch (e) { core.setFailed('SecretString is not valid JSON'); }

          const idKey = `${upper}_APP_ID`;
          const secretKey = `${upper}_APP_SECRET`;

          const appId = obj?.[idKey];
          const appSecret = obj?.[secretKey];

          if (!appId || !appSecret) {
            core.setFailed(`Missing keys '${idKey}' or '${secretKey}' in secret '${process.env.INPUT_SECRET_ID || '<<secret>>'}'.`);
          }

          // Mask in logs and export as job env
          core.setSecret(appId);
          core.setSecret(appSecret);
          core.exportVariable('APP_ID', appId);
          core.exportVariable('APP_SECRET', appSecret);
      env:
        INPUT_SECRET_ID: ${{ inputs.secret_id }}

