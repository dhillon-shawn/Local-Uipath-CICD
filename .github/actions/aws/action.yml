name: "AWS env pair â†’ APP_ID/APP_SECRET/FULL_URL (+ token)"
description: "Assume role, fetch one JSON secret, map {ENV}_*, build FULL_URL, fetch token at BASE_URL/identity"
inputs:
  env:
    description: "Environment (e.g. DEV|STAGE|PROD)"
    required: true
  role_arn:
    description: "AWS role to assume (OIDC)"
    required: true
  aws_region:
    description: "AWS region"
    required: true
  secret_id:
    description: "Secret name/ARN containing {ENV}_APP_ID/_APP_SECRET/_BASE_URL/_ORG/_TENANT"
    required: true
outputs:
  token:
    description: "Access token"
    value: ${{ steps.token.outputs.token }}
runs:
  using: "composite"
  steps:
    - name: Configure AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.role_arn }}
        aws-region: ${{ inputs.aws_region }}

    - name: Get secret JSON as env (UIPATH)
      uses: aws-actions/aws-secretsmanager-get-secrets@v2
      with:
        secret-ids: |
          UIPATH,${{ inputs.secret_id }}
        parse-json-secrets: false

    - name: Map vars and fetch token
      id: token
      uses: actions/github-script@v7
      env:
        TARGET_ENV: ${{ inputs.env }}
      with:
        script: |
          // assume JSON is valid and keys exist
          const U = process.env.TARGET_ENV.toUpperCase();
          const s = JSON.parse(process.env.UIPATH);

          const APP_ID     = String(s[`${U}_APP_ID`]);
          const APP_SECRET = String(s[`${U}_APP_SECRET`]);
          const BASE_URL   = String(s[`${U}_BASE_URL`]);
          const ORG        = String(s[`${U}_ORG`]);
          const TENANT     = String(s[`${U}_TENANT`]);

          core.setSecret(APP_ID);
          core.setSecret(APP_SECRET);
          core.exportVariable('APP_ID', APP_ID);
          core.exportVariable('APP_SECRET', APP_SECRET);
          core.exportVariable('BASE_URL', BASE_URL);

          const OR_URL = `${BASE_URL}/${ORG}/${TENANT}/orchestrator_`;
          core.exportVariable('OR_URL', OR_URL);

          const tokenUrl = `${BASE_URL.replace(/\/+$/,'')}/identity_/connect/token`;
          const body = new URLSearchParams({
            grant_type: 'client_credentials',
            client_id: APP_ID,
            client_secret: APP_SECRET
          }).toString();

          const res = await fetch(tokenUrl, {
            method: 'POST',
            headers: { 'content-type': 'application/x-www-form-urlencoded', 'accept': 'application/json' },
            body
          });

          const data = await res.json();
          const token = data.access_token || data.token || '';
          core.setSecret(token);
          core.exportVariable('ACCESS_TOKEN', token);
          core.setOutput('token', token);
