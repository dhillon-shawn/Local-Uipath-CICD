name: "Resolve env APP_ID/APP_SECRET from one AWS secret"
description: "Fetch a single JSON secret and expose APP_ID/APP_SECRET for the selected env"
inputs:
  env:
    description: "Environment name (e.g. dev|stage|prod|DEV|STAGE|PROD)"
    required: true
  role_arn:
    description: "AWS role to assume (OIDC)"
    required: true
  aws_region:
    description: "AWS region for Secrets Manager"
    required: true
  secret_id:
    description: "Secret name/ARN that contains keys like DEV_APP_ID, DEV_APP_SECRET"
    required: true
runs:
  using: "composite"
  steps:
    - name: Configure AWS (OIDC)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.role_arn }}
        aws-region: ${{ inputs.aws_region }}

    # Use a blank alias + parse JSON so the JSON keys become env vars directly
    - name: Fetch JSON secret -> env vars
      uses: aws-actions/aws-secretsmanager-get-secrets@v2
      with:
        secret-ids: |
          ,${{ inputs.secret_id }}
        parse-json-secrets: true

    # Linux/macOS: pick ENV_APP_ID/ENV_APP_SECRET and export as APP_ID/APP_SECRET
    - name: Map keys (Linux/macOS)
      if: ${{ runner.os != 'Windows' }}
      shell: bash
      run: |
        ENV_UPPER=$(echo '${{ inputs.env }}' | tr '[:lower:]' '[:upper:]')
        SRC_ID="${ENV_UPPER}_APP_ID"
        SRC_SECRET="${ENV_UPPER}_APP_SECRET"
        ID_VAL="${!SRC_ID}"
        SECRET_VAL="${!SRC_SECRET}"
        if [ -z "$ID_VAL" ] || [ -z "$SECRET_VAL" ]; then
          echo "Missing expected keys '$SRC_ID' or '$SRC_SECRET' in secret '${{ inputs.secret_id }}'." >&2
          exit 1
        fi
        echo "::add-mask::$ID_VAL"
        echo "::add-mask::$SECRET_VAL"
        {
          echo "APP_ID=$ID_VAL"
          echo "APP_SECRET=$SECRET_VAL"
        } >> "$GITHUB_ENV"

    # Windows: same mapping
    - name: Map keys (Windows)
      if: ${{ runner.os == 'Windows' }}
      shell: pwsh
      run: |
        $envUpper = "${{ inputs.env }}".ToUpper()
        $srcId = "${envUpper}_APP_ID"
        $srcSecret = "${envUpper}_APP_SECRET"
        $idVal = $env:$srcId
        $secretVal = $env:$srcSecret
        if (-not $idVal -or -not $secretVal) {
          throw "Missing expected keys '$srcId' or '$srcSecret' in secret '${{ inputs.secret_id }}'."
        }
        Write-Output "::add-mask::$idVal"
        Write-Output "::add-mask::$secretVal"
        "APP_ID=$idVal"     | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
        "APP_SECRET=$secretVal" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
