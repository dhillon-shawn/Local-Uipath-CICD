name: CI
description: Continuos Integration

inputs:
  base_folder_name: { required: true, description: "" }
  full_folder_name: { required: true, description: "" }
  publishable: { required: true, description: "" }
  org: { required: true, description: "" }
  scopes: { required: true, description: "" }
  base_url: { required: true, description: "" }
  target_env: { required: true, description: "" }
  tenant: { required: true, description: "" }
  notes: { required: true, description: "" }
  ptype: { required: true, description: "" }

runs:
  using: composite
  steps:
      - name: Create Results DIR
        shell: powershell
        run: New-Item -Path "./results" -ItemType Directory

      - name: restore
        shell: powershell
        env:
          NUGET_PACKAGES: ${{ runner.temp }}\.nuget-cache
          NUGET_HTTP_CACHE_PATH: ${{ runner.temp }}\.nuget-http
        run: |
          uipcli package restore '${{ github.workspace }}' `
            --restoreFolder '${{ runner.temp }}\.nuget-cache' `
            --nugetConfigFilePath '${{ github.workspace }}\nuget.config' `
            --libraryOrchestratorUrl '${{ inputs.base_url }}/' `
            --libraryOrchestratorTenant '${{ inputs.tenant }}' `
            -A '${{ inputs.org }}' -I '${{ env.APP_ID }}' -S '${{ env.APP_SECRET }}' `
            --libraryOrchestratorApplicationScope '${{ inputs.scope }}' `
            --disableBuiltInNugetFeeds `
            --libraryIdentityUrl '${{ inputs.base_url }}/identity_' `
            -y `
            --traceLevel "Verbose"

            
            
      - name: analyze
        if: inputs.target_env == 'dev'
        shell: powershell
        env:
          NUGET_PACKAGES:        ${{ runner.temp }}\.nuget-cache
          NUGET_HTTP_CACHE_PATH: ${{ runner.temp }}\.nuget-http
        run: |
          uipcli package analyze '${{ github.workspace }}\project.json' `
            --resultPath '${{ runner.temp }}\analyze.json' `
            --orchestratorUrl '${{ inputs.base_url }}/' `
            --orchestratorTenant '${{ inputs.tenant }}' `
            -A '${{ inputs.org }}' -I '${{env.APP_ID  }}' -S '${{env.APP_SECRET}}' `
            --orchestratorApplicationScope '${{ inputs.scope}}' `
            --analyzerTraceLevel "Error" `
            --traceLevel Verbose --disableBuiltInNugetFeeds -y `
            --identityUrl '${{ inputs.base_url }}/identity_'
            
          New-Item -ItemType Directory -Force -Path '.\results' | Out-Null
          Copy-Item '${{ runner.temp }}\analyze.json' '.\results\analyze.json' -Force

      - name: test
        if: ${{ inputs.target_env == 'test' && needs.setup.outputs.publishable == 'true' && needs.setup.outputs.ptype == 'Process' }}
        shell: powershell
        env:
          NUGET_PACKAGES:        ${{ runner.temp }}\.nuget-cache
          NUGET_HTTP_CACHE_PATH: ${{ runner.temp }}\.nuget-http
        run: |
          uipcli test run '${{ inputs.base_url }}/' '${{ inputs.tenant }}' `
            -A '${{ inputs.org }}' -I '${{ env.APP_ID }}' -S '${{ env.APP_SECRET }}' `
            --identityURL  '${{ inputs.base_url }}/identity_' `
            --applicationScope '${{ inputs.org }}' `
            -o '${{ inputs.base_folder_name }}' `
            -P '${{ github.workspace }}/project.json' `
            --out 'junit' `
            --result_path './results/TestResults.xml' `
            --timeout '7200' `
            --retryCount '0' `
            --attachRobotLogs `
            --disableBuiltInNugetFeeds `
            --traceLevel Verbose -y
          
          
          
      - name: stage for pack
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $stage = Join-Path $env:RUNNER_TEMP 'uipack-stage'
          if (Test-Path $stage) { Remove-Item -Recurse -Force $stage }
          New-Item -ItemType Directory -Path $stage | Out-Null

          robocopy "${{ github.workspace }}" "$stage" /MIR `
            /XD '.git' '.github' 'output' 'results' '.nuget-cache' '.nuget-http' '.nuget' `
            /XF '*.nupkg' 'nuget.config'


          # Treat Robocopy exit codes 0â€“7 as success
          $rc = $LASTEXITCODE
          if ($rc -ge 8) { throw "robocopy failed with exit $rc" } else { Write-Host "robocopy exit $rc (OK)"; exit 0 }

          
      - name: pack
        shell: powershell
        env:
          NUGET_PACKAGES:        ${{ github.workspace }}\.nuget-cache
          NUGET_HTTP_CACHE_PATH: ${{ github.workspace }}\.nuget-http
        run: |
            $ErrorActionPreference = 'Stop'
            $stage = Join-Path $env:RUNNER_TEMP 'uipack-stage'
            $proj  = Join-Path $stage 'project.json'
            if (-not (Test-Path $proj)) { throw "Staged project.json not found at $proj" }
            
            $stageOut = Join-Path $stage 'output'
            $repoOut  = Join-Path $env:GITHUB_WORKSPACE 'output'
            New-Item -ItemType Directory -Force -Path $stageOut | Out-Null
            New-Item -ItemType Directory -Force -Path $repoOut  | Out-Null

            uipcli package pack "$proj" `
              --output "$stageOut" `
              --outputType '${{ inputs.ptype }}' `
              -v '${{ inputs.version }}' `
              --repositoryUrl 'https://github.com/${{ github.repository }}' `
              --repositoryBranch '${{ github.ref_name }}' `
              --repositoryCommit '${{ github.sha }}' `
              --repositoryType 'git' `
              --projectUrl 'https://project/url.com' `
              --releaseNotes '${{ inputs.notes }}' `
              --libraryOrchestratorUrl '${{ inputs.base_url }}/' `
              --libraryOrchestratorTenant '${{ inputs.tenant }}' `
              -A '${{ inputs.org }}' -I '${{ env.APP_ID }}' -S '${{ env.APP_SECRET }}' `
              --libraryOrchestratorApplicationScope '${{ inputs.scope }}' `
              --libraryIdentityUrl '${{ inputs.base_url }}/identity_' `
              --disableBuiltInNugetFeeds `
              --traceLevel 'Verbose' -y 
              
            Get-ChildItem "$stageOut" -Filter '*.nupkg' | ForEach-Object {
              Copy-Item $_.FullName $repoOut -Force
              Write-Host "Packaged: $($_.Name) -> $repoOut"
            }

      - name: Upload artifact
        if: ((${{ needs.setup.outputs.publishable }} == 'true')  && inputs.target_env == 'test') || inputs.target_env == 'dev'
        uses: actions/upload-artifact@v4
        with:
          name: results
          path: ./results/*


      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
              name: output
              path: ./output/
