name: "Format UiPath analyze.json to HTML"
description: "Reads analyze.json (utf-8/utf-16) and renders a clean HTML report"

inputs:
  json_path: { required: true, description: "Path to analyze.json" }
  out_path:  { required: false, default: "./email/analysis-report.html", description: "Path to HTML results" }

outputs:
  html:
    value: ${{ steps.analysis_report.outputs.html }}
    description: "HTML body"
  html_path:
    value: ${{ steps.analysis_report.outputs.html_path }}
    description: "Path to HTML file"

runs:
  using: "composite"
  steps:
    - name: Ensure output dir
      shell: bash
      run: mkdir -p "$(dirname "${{ inputs.out_path }}")"

    - name: Convert Analyzer JSON to email-friendly HTML
      id: analysis_report
      uses: actions/github-script@v7
      env:
        IN:  ${{ inputs.json_path }}        # file OR directory
        OUT: ${{ inputs.out_path }}         # e.g., email/analysis-report.html
        SHOW_CODE: "false"                  # set "true" to include ErrorCode/Link column
        TRIM_PREFIX: ""                     # optional extra prefix to strip from paths
      with:
        script: |
          const fs = require('node:fs'); const fsp = require('node:fs/promises'); const path = require('node:path');

          const inPath  = process.env.IN || ''; const outPath = process.env.OUT || 'email/analysis-report.html';
          const showCode = /^true$/i.test(process.env.SHOW_CODE || 'false');
          const trimPrefix = (process.env.TRIM_PREFIX || '').replace(/\\/g,'/');
          if (!inPath) { core.setFailed('IN was empty.'); return; }

          const exists = p => { try { fs.accessSync(p); return true; } catch { return false; } };
          const isDir  = p => { try { return fs.statSync(p).isDirectory(); } catch { return false; } };
          async function *walk(dir){ for (const e of await fsp.readdir(dir,{withFileTypes:true})) { const f=path.join(dir,e.name); if(e.isDirectory()) yield* walk(f); else if(e.isFile()&&/\.json$/i.test(e.name)) yield f; } }

          const esc = s => String(s ?? '').replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/"/g,'&quot;').replace(/'/g,'&#39;');
          function hasMarkdownLink(s){ return /\[[^\]]+\]\(\s*https?:\/\/[^\s)]+\s*\)/i.test(String(s||'')); }
          function applyMarkdownLinks(s){
            // [text](url)
            return String(s||'').replace(/\[([^\]]+)\]\(\s*(https?:\/\/[^\s)]+)\s*\)/g,
              (_m,text,url)=>`<a href="${esc(url)}" style="color:#1d4ed8;text-decoration:none;">${esc(text)}</a>`);
          }
          function linkifyAndMD(s, docLink){
            // 1) convert markdown links first
            let t = applyMarkdownLinks(s);
            // 2) escape any remaining HTML
            t = esc(t);
            // 3) unescape the <a> we just injected (safe because we escaped around it)
            t = t.replace(/&lt;a href=&quot;([^&]*)&quot; style=&quot;color:#1d4ed8;text-decoration:none;&quot;&gt;([^<]*)&lt;\/a&gt;/g,
                          '<a href="$1" style="color:#1d4ed8;text-decoration:none;">$2</a>');
            // 4) bold/code
            t = t.replace(/\*\*(.+?)\*\*/g,'<strong>$1</strong>');
            t = t.replace(/`([^`]+)`/g,'<code style="background:#f4f4f5;border:1px solid #e4e4e7;border-radius:4px;padding:1px 4px;">$1</code>');
            // 5) raw URLs (skip if already part of a link)
            t = t.replace(/\bhttps?:\/\/[^\s<]+/gi,u=>`<a href="${u}" style="color:#1d4ed8;text-decoration:none;">${u}</a>`);
            // 6) “Learn more.” -> doc link ONLY if there is no markdown link and docLink exists
            if (!hasMarkdownLink(s) && docLink) {
              t = t.replace(/\bLearn more\.?/gi, `<a href="${esc(docLink)}" style="color:#1d4ed8;text-decoration:none;">Learn more</a>`);
            }
            // 7) newlines/tabs
            t = t.replace(/\r?\n/g,'<br>').replace(/\t+/g,' · ');
            return t;
          }
          function renderValue(v, docLink){
            if (v == null) return '';
            if (typeof v === 'string' || typeof v === 'number' || typeof v === 'boolean') return linkifyAndMD(v, docLink);
            if (Array.isArray(v)) return '<ul style="margin:0;padding-left:18px;">'+v.map(x=>`<li>${renderValue(x,docLink)}</li>`).join('')+'</ul>';
            if (typeof v === 'object'){ const pref=['Message','Text','Value','Description','Recommendation','Reason','Error','Details']; for (const k of pref) if (v[k]!=null) return renderValue(v[k],docLink); return '<ul style="margin:0;padding-left:18px;">'+Object.entries(v).map(([k,val])=>`<li><strong>${esc(k)}:</strong> ${renderValue(val,docLink)}</li>`).join('')+'</ul>'; }
            return linkifyAndMD(String(v), docLink);
          }
          function normPath(fp){ let f=String(fp||'').replace(/\\/g,'/'); const ws=(process.env.GITHUB_WORKSPACE||'').replace(/\\/g,'/').replace(/\/+$/,''); if(ws&&f.startsWith(ws+'/')) f=f.slice(ws.length+1); if(trimPrefix&&f.startsWith(trimPrefix)) f=f.slice(trimPrefix.length); return f; }
          function arr(json){ if(Array.isArray(json))return json; if(json&&Array.isArray(json.Results))return json.Results; if(json&&Array.isArray(json.results))return json.results; return []; }

          const sevMeta={1:{name:'Error',icon:'❌',bg:'#fde2e2'},2:{name:'Warning',icon:'⚠️',bg:'#fff4e5'},3:{name:'Info',icon:'ℹ️',bg:'#e7f3ff'}};
          if(!exists(inPath)){ core.setFailed(`IN not found: ${inPath}`); return; }

          const files=[]; if(isDir(inPath)){ for await (const f of walk(inPath)) files.push(f); } else files.push(inPath);

          let totalErr=0,totalWarn=0,totalInfo=0; const groups=new Map();
          for (const file of files){
            let json; try { json=JSON.parse(fs.readFileSync(file,'utf8')); } catch(e){ core.warning(`Skip ${file}: ${e.message}`); continue; }
            const rows=arr(json).map(x=>({ s:+(x.ErrorSeverity??0), code:String(x.ErrorCode??''), link:String(x.DocumentationLink??''), rule:String(x.RuleName??''), desc:x.Description??'', rec:x.Recommendation??'', file:normPath(String(x.FilePath??'')), src:path.basename(file) }));
            for(const r of rows){ if(r.s===1) totalErr++; else if(r.s===2) totalWarn++; else if(r.s===3) totalInfo++; const k=r.file||r.src; if(!groups.has(k)) groups.set(k,[]); groups.get(k).push(r); }
          }

          const style = { card:'border:1px solid #e5e7eb;border-radius:12px;margin:12px 0;background:#ffffff;', head:'display:flex;align-items:center;justify-content:space-between;padding:12px 14px;border-bottom:1px solid #e5e7eb;background:linear-gradient(180deg,#f9fafb,#f3f4f6);', file:'font-family:Consolas,Menlo,Monaco,ui-monospace,monospace;font-weight:600;color:#111827;', chips:'display:flex;gap:8px;', chip:(bg,fg)=>`border-radius:999px;padding:4px 10px;font-size:12px;font-weight:600;background:${bg};color:${fg};`, wrap:'overflow:auto;max-width:100%;', table:'border-collapse:separate;border-spacing:0;width:100%;table-layout:fixed;border:1px solid #e5e7eb;', th:'background:#f8fafc;border-bottom:1px solid #e5e7eb;font-weight:700;text-align:left;padding:8px 10px;', td:'border-top:1px solid #e5e7eb;padding:8px 10px;vertical-align:top;word-break:break-word;', tdSev:'white-space:nowrap;width:120px;', h1:'margin:0 0 6px 0;font-size:20px;color:#0f172a;', sub:'margin:0 0 12px 0;color:#475569;', totals:'display:flex;gap:10px;margin:8px 0 16px 0;', pill:(bg,fg,bd)=>`border-radius:999px;padding:6px 12px;font-weight:700;border:1px solid ${bd};background:${bg};color:${fg};` };

          const sections=[]; for (const key of Array.from(groups.keys()).sort((a,b)=>a.localeCompare(b))){
            const rows=groups.get(key).sort((a,b)=>(a.s-b.s)||a.rule.localeCompare(b.rule));
            const c={err:rows.filter(r=>r.s===1).length, warn:rows.filter(r=>r.s===2).length, info:rows.filter(r=>r.s===3).length};
            let html=`<div style="${style.card}">
          <div style="${style.head}">
            <div style="${style.file}">${esc(key||'Unknown file')}</div>
            <div style="${style.chips}">
              <span style="${style.chip('#fecaca','#7f1d1d')}">❌ ${c.err}</span>
              <span style="${style.chip('#fed7aa','#7c2d12')}">⚠️ ${c.warn}</span>
              <span style="${style.chip('#bfdbfe','#1e3a8a')}">ℹ️ ${c.info}</span>
            </div>
          </div>
          <div style="padding:10px;">
            <div style="${style.wrap}">
              <table style="${style.table}">
                <thead><tr>
                  <th style="${style.th}">Severity</th>
                  ${showCode?`<th style="${style.th}">Code / Link</th>`:''}
                  <th style="${style.th}">Rule</th>
                  <th style="${style.th}">Description</th>
                  <th style="${style.th}">Recommendation</th>
                </tr></thead><tbody>`;
                for(const r of rows){
                  const sev=sevMeta[r.s]||{bg:'#fff',icon:'',name:''};
                  html+=`<tr style="background:${sev.bg};">
                    <td style="${style.td}${style.tdSev}">${sev.icon} ${sev.name}</td>
                    ${showCode?`<td style="${style.td}">${r.link?`<a href="${esc(r.link)}" style="color:#1d4ed8;text-decoration:none;">${esc(r.code)}</a>`:esc(r.code)}</td>`:''}
                    <td style="${style.td}">${esc(r.rule)}</td>
                    <td style="${style.td}">${renderValue(r.desc,r.link)}</td>
                    <td style="${style.td}">${renderValue(r.rec,r.link)}</td>
                  </tr>`;
                }
                html+=`</tbody></table></div></div></div>`;
                sections.push(html);
              }

          const when=new Date().toISOString();
          const outHtml = `<!doctype html><html><body style="font-family:Arial,Helvetica,sans-serif;margin:20px;color:#0f172a;background:#ffffff;">
            <h1 style="${style.h1}">UiPath Analyzer Report</h1>
            <p style="${style.sub}">Generated: ${esc(when)}</p>
            <div style="${style.totals}">
              <span style="${style.pill('#fff1f2','#b91c1c','#fecaca')}">❌ Errors: ${totalErr}</span>
              <span style="${style.pill('#fff7ed','#b45309','#fed7aa')}">⚠️ Warnings: ${totalWarn}</span>
              <span style="${style.pill('#eff6ff','#1d4ed8','#bfdbfe')}">ℹ️ Info: ${totalInfo}</span>
            </div>
            ${sections.join('\n')}
          </body></html>`;

          fs.mkdirSync(path.dirname(outPath),{recursive:true}); fs.writeFileSync(outPath,outHtml,'utf8');
          core.setOutput('html_path', outPath);
