name: "Format UiPath analyze.json to HTML"
description: "Reads analyze.json (utf-8/utf-16) and renders a clean HTML report"

inputs:
  json_path: { required: true, description: "Path to analyze.json" }
  out_path:  { required: false, default: "./email/analysis-report.html", description: "Path to HTML results" }

outputs:
  html:
    value: ${{ steps.analysis_report.outputs.html }}
    description: "HTML body"
  html_path:
    value: ${{ steps.analysis_report.outputs.html_path }}
    description: "Path to HTML file"

runs:
  using: "composite"
  steps:
    - name: Ensure output dir
      shell: bash
      run: mkdir -p "$(dirname "${{ inputs.out_path }}")"

    - name: Build analyzer HTML (mobile scroll, proper render)
      id: build_html
      uses: actions/github-script@v7
      env:
        IN:  ${{ inputs.json_path }}          # e.g. ./results/analyze.json
        OUT: ${{ inputs.out_path }}           # e.g. ./email/analysis-report.html
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          const esc = s => String(s ?? '')
            .replace(/&/g,'&amp;').replace(/</g,'&lt;')
            .replace(/>/g,'&gt;').replace(/"/g,'&quot;')
            .replace(/'/g,'&#39;');

          const inPath  = process.env.IN || '';
          const outPath = process.env.OUT || 'email/analysis-report.html';
          if (!inPath) { core.setFailed('IN was empty.'); return; }
          if (!fs.existsSync(inPath)) { core.setFailed(`IN not found: ${inPath}`); return; }

          const sevMeta = {
            1: { name:'Error',   icon:'❌', row:'#fff1f2', pillBg:'#fee2e2', pillFg:'#991b1b', bd:'#fecaca' },
            2: { name:'Warning', icon:'⚠️', row:'#fff7ed', pillBg:'#ffedd5', pillFg:'#92400e', bd:'#fed7aa' },
            3: { name:'Info',    icon:'ℹ️', row:'#eff6ff', pillBg:'#dbeafe', pillFg:'#1e40af', bd:'#bfdbfe' },
          };

          const raw = JSON.parse(fs.readFileSync(inPath, 'utf8'));
          const list = Array.isArray(raw) ? raw : (raw.Results || raw.results || []);
          const rows = list.map(x => ({
            sev: Number(x.ErrorSeverity ?? 3) || 3,
            code: String(x.ErrorCode ?? ''),
            rule: String(x.RuleName ?? ''),
            activity: String(x.ActivityDisplayName ?? ''),
            desc: String(x.Description ?? ''),
            rec: String(x.Recommendation ?? ''),
          }));

          const totals = { 1:0, 2:0, 3:0 };
          for (const r of rows) if (totals[r.sev] != null) totals[r.sev]++;
          rows.sort((a,b) => (a.sev - b.sev) || a.rule.localeCompare(b.rule));

          const css = {
            body: 'margin:20px;font-family:Arial,Helvetica,sans-serif;color:#0f172a;background:#ffffff;',
            h1: 'margin:0 0 8px 0;font-size:20px;',
            sub: 'margin:0 0 12px 0;color:#475569;font-size:12px;',
            pills: 'display:flex;gap:8px;flex-wrap:wrap;margin:8px 0 16px 0;',
            pill: (bg,fg,bd)=>`border:1px solid ${bd};border-radius:999px;padding:6px 10px;font-weight:700;background:${bg};color:${fg};`,
            wrap: 'overflow-x:auto;overflow-y:visible;max-width:100%;-webkit-overflow-scrolling:touch;',
            table: 'border-collapse:separate;border-spacing:0;width:100%;min-width:720px;table-layout:auto;border:1px solid #e5e7eb;',
            th: 'background:#f8fafc;border-bottom:1px solid #e5e7eb;text-align:left;padding:8px 10px;font-weight:700;font-size:13px;white-space:nowrap;',
            td: 'border-top:1px solid #e5e7eb;padding:8px 10px;vertical-align:top;font-size:13px;',
            tdSev: 'white-space:nowrap;width:200px;',
          };

          let tbody = '';
          for (const r of rows) {
            const s = sevMeta[r.sev] || sevMeta[3];
            const sevCell = `${s.icon} ${s.name}${r.code ? ' — ' + esc(r.code) : ''}`;
            tbody += `
            <tr style="background:${s.row};">
              <td style="${css.td}${css.tdSev}">${sevCell}</td>
              <td style="${css.td}">${esc(r.rule)}</td>
              <td style="${css.td}">${esc(r.activity)}</td>
              <td style="${css.td}">${esc(r.desc).replace(/\r?\n/g,'<br>')}</td>
              <td style="${css.td}">${esc(r.rec).replace(/\r?\n/g,'<br>')}</td>
            </tr>`;
                  }

          const when = new Date().toISOString();
          const html = `<!doctype html>
          <html>
            <body style="${css.body}">
              <h1 style="${css.h1}">UiPath Analyzer Report</h1>
              <p style="${css.sub}">Generated: ${esc(when)}</p>

              <div style="${css.pills}">
                <span style="${css.pill('#fee2e2','#991b1b','#fecaca')}">❌ Errors: ${totals[1]}</span>
                <span style="${css.pill('#ffedd5','#92400e','#fed7aa')}">⚠️ Warnings: ${totals[2]}</span>
                <span style="${css.pill('#dbeafe','#1e40af','#bfdbfe')}">ℹ️ Info: ${totals[3]}</span>
              </div>

              <div style="${css.wrap}">
                <table style="${css.table}" role="table" aria-label="Analyzer Results">
                  <thead>
                    <tr>
                      <th style="${css.th}">Severity / Code</th>
                      <th style="${css.th}">Rule</th>
                      <th style="${css.th}">Activity</th>
                      <th style="${css.th}">Description</th>
                      <th style="${css.th}">Recommendation</th>
                    </tr>
                  </thead>
                  <tbody>
                    ${tbody || `<tr><td style="${css.td}" colspan="5">No results.</td></tr>`}
                  </tbody>
                </table>
              </div>
            </body>
          </html>`;

          fs.mkdirSync(path.dirname(outPath), { recursive: true });
          fs.writeFileSync(outPath, html, 'utf8');
          core.setOutput('html_path', outPath);
          // Also expose the full HTML string (raw) for direct use in next steps if needed
          core.setOutput('html', html);

    - name: Add HTML to Job Summary (raw)
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const html = fs.readFileSync('${{ steps.build_html.outputs.html_path }}','utf8');
          await core.summary.addRaw(html, true).write(); // true => don't escape, render HTML
