name: "Format UiPath analyze.json to HTML"
description: "Reads analyze.json (utf-8/utf-16) and renders a clean HTML report"

inputs:
  json_path: { required: true, description: "Path to analyze.json" }
  out_path:  { required: false, default: "./email/analysis-report.html", description: "Path to HTML results" }

outputs:
  html:
    value: ${{ steps.analysis_report.outputs.html }}
    description: "HTML body"
  html_path:
    value: ${{ steps.analysis_report.outputs.html_path }}
    description: "Path to HTML file"

runs:
  using: "composite"
  steps:
    - name: Ensure output dir
      shell: bash
      run: mkdir -p "$(dirname "${{ inputs.out_path }}")"

    - name: Analysis → HTML (email-safe)
      id: analysis_html
      uses: actions/github-script@v7
      env:
        IN:  ${{ inputs.json_path }}           # e.g. ./results/analyze.json
        OUT: ${{ inputs.out_path }}            # e.g. ./email/analysis-report.html
        SHOW_CODE: "false"                     # set "true" to include the code/link column
        TRIM_PREFIX: ""                        # optional extra prefix to strip from file paths
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          const inPath  = process.env.IN || '';
          const outPath = process.env.OUT || 'email/analysis-report.html';
          const showCode = /^true$/i.test(process.env.SHOW_CODE || 'false');
          const trimPrefix = (process.env.TRIM_PREFIX || '').replace(/\\/g,'/');

          if (!inPath) { core.setFailed('IN was empty.'); return; }
          if (!fs.existsSync(inPath)) { core.setFailed(`IN not found: ${inPath}`); return; }

          const esc = s => String(s ?? '')
            .replace(/&/g,'&amp;').replace(/</g,'&lt;')
            .replace(/>/g,'&gt;').replace(/"/g,'&quot;')
            .replace(/'/g,'&#39;');

          // Tokenize markdown links BEFORE escaping (e.g., [Learn more.](https://...))
          function tokenizeMarkdownLinks(src) {
            const links = [];
            const text = String(src || '').replace(/\[([^\]]+)\]\(\s*(https?:\/\/[^\s)]+)\s*\)/gi,
              (_m, label, url) => {
                const id = links.push({ label, url }) - 1;
                return `__LINK_${id}__`;
              }
            );
            return { text, links };
          }

          // Convert the string to HTML with working links and simple formatting
          function renderText(src, docLink) {
            // 1) tokenize explicit markdown links
            const { text, links } = tokenizeMarkdownLinks(src);

            // 2) escape everything
            let out = esc(text);

            // 3) restore markdown links as anchors
            out = out.replace(/__LINK_(\d+)__/g, (_m, i) => {
              const { label, url } = links[Number(i)];
              return `<a href="${esc(url)}" style="color:#1d4ed8;text-decoration:none;">${esc(label)}</a>`;
            });

            // 4) bold/code
            out = out.replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>')
                    .replace(/`([^`]+)`/g, '<code style="background:#f4f4f5;border:1px solid #e4e4e7;border-radius:4px;padding:1px 4px;">$1</code>');

            // 5) raw URLs → links (don’t touch ones already linked)
            out = out.replace(/\bhttps?:\/\/[^\s<]+/gi, u => `<a href="${u}" style="color:#1d4ed8;text-decoration:none;">${u}</a>`);

            // 6) If the source had “Learn more.” but NO markdown link, attach docLink
            if (!/\[[^\]]+\]\(/.test(src) && docLink) {
              out = out.replace(/\bLearn more\.?/gi, `<a href="${esc(docLink)}" style="color:#1d4ed8;text-decoration:none;">Learn more</a>`);
            }

            // 7) bullets & newlines (simple email-safe formatting)
            out = out
              .replace(/\r?\n\*\* /g, '<br>&nbsp;&nbsp;• ')
              .replace(/\r?\n\* /g, '<br>• ')
              .replace(/\r?\n/g, '<br>');

            return out;
          }

          function normPath(fp) {
            let f = String(fp || '').replace(/\\/g,'/');
            const ws = (process.env.GITHUB_WORKSPACE || '').replace(/\\/g,'/').replace(/\/+$/,'');
            if (ws && f.startsWith(ws + '/')) f = f.slice(ws.length + 1);
            if (trimPrefix && f.startsWith(trimPrefix)) f = f.slice(trimPrefix.length);
            return f;
          }

          const json = JSON.parse(fs.readFileSync(inPath, 'utf8'));
          const results = Array.isArray(json) ? json : (json.Results || json.results || []);

          const rows = results.map(x => ({
            sev: Number(x.ErrorSeverity ?? 0),
            code: String(x.ErrorCode ?? ''),
            link: String(x.DocumentationLink ?? ''),
            rule: String(x.RuleName ?? ''),
            desc: x.Description ?? '',
            rec:  x.Recommendation ?? '',
            file: normPath(String(x.FilePath ?? '')),
          }));

          // group by file (fall back to “(project)”)
          const groups = new Map();
          for (const r of rows) {
            const key = r.file || '(project)';
            if (!groups.has(key)) groups.set(key, []);
            groups.get(key).push(r);
          }

          let totalErr=0,totalWarn=0,totalInfo=0;
          const sevMeta = {
            1: { name:'Error',   icon:'❌', bg:'#fde2e2' },
            2: { name:'Warning', icon:'⚠️', bg:'#fff4e5' },
            3: { name:'Info',    icon:'ℹ️', bg:'#e7f3ff' },
          };

          // Inline CSS tokens
          const card='border:1px solid #e5e7eb;border-radius:12px;margin:12px 0;background:#ffffff;';
          const head='display:flex;align-items:center;justify-content:space-between;padding:12px 14px;border-bottom:1px solid #e5e7eb;background:#f9fafb;';
          const fileCss='font-family:Consolas,Menlo,Monaco,ui-monospace,monospace;font-weight:600;color:#111827;';
          const chips='display:flex;gap:8px;';
          const chip=(bg,fg)=>`border-radius:999px;padding:4px 10px;font-size:12px;font-weight:600;background:${bg};color:${fg};`;
          const wrap='overflow:auto;max-width:100%;';
          const table='border-collapse:separate;border-spacing:0;width:100%;table-layout:fixed;border:1px solid #e5e7eb;';
          const th='background:#f8fafc;border-bottom:1px solid #e5e7eb;font-weight:700;text-align:left;padding:8px 10px;';
          const td='border-top:1px solid #e5e7eb;padding:8px 10px;vertical-align:top;word-break:break-word;';
          const tdSev='white-space:nowrap;width:120px;';
          const h1='margin:0 0 6px 0;font-size:20px;color:#0f172a;';
          const sub='margin:0 0 12px 0;color:#475569;';
          const totals='display:flex;gap:10px;margin:8px 0 16px 0;';
          const pill=(bg,fg,bd)=>`border-radius:999px;padding:6px 12px;font-weight:700;border:1px solid ${bd};background:${bg};color:${fg};`;

          const sections = [];
          for (const [fileKey, items] of Array.from(groups.entries()).sort((a,b)=>a[0].localeCompare(b[0]))) {
            items.sort((a,b)=>(a.sev-b.sev)||a.rule.localeCompare(b.rule));
            const c = {
              err: items.filter(i=>i.sev===1).length,
              warn:items.filter(i=>i.sev===2).length,
              info:items.filter(i=>i.sev===3).length,
            };
            totalErr+=c.err; totalWarn+=c.warn; totalInfo+=c.info;

            let html = `<div style="${card}">
                <div style="${head}">
                  <div style="${fileCss}">${esc(fileKey)}</div>
                  <div style="${chips}">
                    <span style="${chip('#fecaca','#7f1d1d')}">❌ ${c.err}</span>
                    <span style="${chip('#fed7aa','#7c2d12')}">⚠️ ${c.warn}</span>
                    <span style="${chip('#bfdbfe','#1e3a8a')}">ℹ️ ${c.info}</span>
                  </div>
                </div>
                <div style="padding:10px;">
                  <div style="${wrap}">
                    <table style="${table}">
                      <thead><tr>
                        <th style="${th}">Severity</th>
                        ${showCode?`<th style="${th}">Code / Link</th>`:''}
                        <th style="${th}">Rule</th>
                        <th style="${th}">Description</th>
                        <th style="${th}">Recommendation</th>
                      </tr></thead><tbody>`;

            for (const r of items) {
              const sev = sevMeta[r.sev] || { name:'', icon:'', bg:'#fff' };
              html += `<tr style="background:${sev.bg};">
                <td style="${td}${tdSev}">${sev.icon} ${sev.name}</td>
                ${showCode ? `<td style="${td}">${r.link ? `<a href="${esc(r.link)}" style="color:#1d4ed8;text-decoration:none;">${esc(r.code)}</a>` : esc(r.code)}</td>` : ''}
                <td style="${td}">${esc(r.rule)}</td>
                <td style="${td}">${renderText(r.desc, r.link)}</td>
                <td style="${td}">${renderText(r.rec,  r.link)}</td>
              </tr>`;
            }

            html += `</tbody></table></div></div></div>`;
            sections.push(html);
          }

          const when = new Date().toISOString();
          const outHtml = `<!doctype html><html><body style="font-family:Arial,Helvetica,sans-serif;margin:20px;color:#0f172a;background:#ffffff;">
            <h1 style="${h1}">UiPath Analyzer Report</h1>
            <p style="${sub}">Generated: ${esc(when)}</p>
            <div style="${totals}">
              <span style="${pill('#fff1f2','#b91c1c','#fecaca')}">❌ Errors: ${totalErr}</span>
              <span style="${pill('#fff7ed','#b45309','#fed7aa')}">⚠️ Warnings: ${totalWarn}</span>
              <span style="${pill('#eff6ff','#1d4ed8','#bfdbfe')}">ℹ️ Info: ${totalInfo}</span>
            </div>
            ${sections.join('\n')}
          </body></html>`;

          fs.mkdirSync(path.dirname(outPath), { recursive: true });
          fs.writeFileSync(outPath, outHtml, 'utf8');
          core.setOutput('html_path', outPath);

