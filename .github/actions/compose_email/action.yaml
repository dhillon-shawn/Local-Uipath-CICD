name: "Compose final email (status + body + subject)"
description: "Picks body (test/analysis), computes overall from cd_status, renders status table and final HTML."
inputs:
  publishable:
    description: "String 'true' or 'false'. Only relevant for test."
    required: false
  target_env:
    description: "Target environment: 'test' or 'dev'."
    required: false
  test_html_path:
    description: "Path to TestResults.html if rendered (formatter output)."
    required: false
    default: "./email/TestResults.html"
  analysis_html_path:
    description: "Path to analysis-report.html if rendered (formatter output)."
    required: false
    default: "./email/analysis-report.html"


  source_ref:
    description: "Source git ref / SHA."
    required: false
  version:
    description: "Version label."
    required: false
  folder_name:
    description: "Folder display name."
    required: false
  project_id:
    description: "Project identifier."
    required: false
  migrate:
    description: "Migration flag text."
    required: false
  cd_status:
    description: "Deployment job result (e.g., success|failure|cancelled)."
    required: false

outputs:
  html:
    description: "Composed full HTML email (file path)."
    value: ${{ steps.make.outputs.html }}
  subject:
    description: "Computed subject."
    value: ${{ steps.make.outputs.subject }}
  attach_path:
    description: "Path to the chosen (or fallback) body file."
    value: ${{ steps.make.outputs.attach_path }}
  overall:
    description: "Computed overall: success or failure (from cd_status)."
    value: ${{ steps.make.outputs.overall }}

runs:
  using: "composite"
  steps:
    - name: Compose final email (table + body + subject)
      id: make
      uses: actions/github-script@v7
      env:
        PUBLISHABLE:        ${{ inputs.publishable }}
        TARGET_ENV:         ${{ inputs.target_env }}
        SOURCE_REF:         ${{ inputs.source_ref }}
        VERSION:            ${{ inputs.version }}
        FOLDER_NAME:        ${{ inputs.folder_name }}
        PROJECT_ID:         ${{ inputs.project_id }}
        MIGRATE:            ${{ inputs.migrate }}
        CD_STATUS:          ${{ inputs.cd_status }}
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          const okFile = p => { try { return p && fs.statSync(p).size > 0; } catch { return false; } };

          // Hard-coded defaults
          const TEST_PATH = './email/TestResults.html';
          const ANALYSIS_PATH = './email/analysis-report.html';

          // Inputs
          const env = (process.env.TARGET_ENV || '').toLowerCase();
          const publishable = (process.env.PUBLISHABLE || '').toLowerCase() === 'true';

          // Pick body path from hard-coded defaults
          let bodyPath = '';
          let fallbackMsg = '';
          if (env === 'test' && publishable) {
            bodyPath = okFile(TEST_PATH) ? TEST_PATH : '';
            if (!bodyPath) fallbackMsg = '<p>No test results found.</p>';
          } else if (env === 'dev') {
            bodyPath = okFile(ANALYSIS_PATH) ? ANALYSIS_PATH : '';
            if (!bodyPath) fallbackMsg = '<p>No analysis results found.</p>';
          } else {
            fallbackMsg = '<p>No content for this environment.</p>';
          }

          // If missing, create a tiny fallback file at the hard-coded path
          if (!bodyPath) {
            const fb = (env === 'test') ? TEST_PATH : ANALYSIS_PATH;
            fs.mkdirSync(path.dirname(fb), { recursive: true });
            fs.writeFileSync(fb, '<!doctype html><html><body>' + fallbackMsg + '</body></html>', 'utf8');
            bodyPath = fb;
          }

          // Extract inner body; strip wrappers and scripts
          const extractBody = (html) => {
            const m = /<body[^>]*>([\s\S]*?)<\/body>/i.exec(html);
            return (m ? m[1] : html);
          };
          let bodyInner = extractBody(fs.readFileSync(bodyPath, 'utf8'))
            .replace(/<\/?(html|head|body)[^>]*>/gi, '')
            .replace(/<script[\s\S]*?<\/script>/gi, '');

          // Build metadata
          const server = (process.env.GITHUB_SERVER_URL || 'https://github.com').replace(/\/+$/,'');
          const repo   = process.env.GITHUB_REPOSITORY || '';
          const runId  = process.env.GITHUB_RUN_ID || '';
          const runUrl = (server && repo && runId) ? (server + '/' + repo + '/actions/runs/' + runId) : '';

          const cd = (process.env.CD_STATUS || '').toLowerCase();
          const overall = (cd === 'success') ? 'success' : 'failure';
          const ok = (overall === 'success');
          const ICON = ok ? '✅' : '❌';
          const COLOR = ok ? '#2e7d32' : '#c62828';
          const WORD = ok ? 'Successful' : 'Failed';

          const subjectPrefix = (env === 'test') ? 'UiPath Test Report'
                                : (env === 'dev') ? 'UiPath Analysis Report'
                                : 'UiPath Report';
          const subject = subjectPrefix + ' - ' + repo + ' #' + (process.env.GITHUB_RUN_NUMBER || '');

          // Status table
          const row = (k, v) => v ? (
            '<tr>' +
              '<td style="padding:8px;border:1px solid #ddd;"><strong>' + k + '</strong></td>' +
              '<td style="padding:8px;border:1px solid #ddd;">' + v + '</td>' +
            '</tr>'
          ) : '';

          const statusHtml =
            '<h2 style="color:' + COLOR + ';margin:0 0 12px 0;">' + ICON + ' Deployment ' + WORD + ' — ' + (process.env.TARGET_ENV || '') + '</h2>' +
            '<table style="border-collapse:collapse;width:100%;margin-bottom:16px;">' +
              row('Repository:', repo) +
              row('Run:', runUrl ? ('<a href="' + runUrl + '" target="_blank" style="color:#1d4ed8;text-decoration:none;">' + runUrl + '</a>') : '(n/a)') +
              row('Source ref:', process.env.SOURCE_REF || '') +
              row('Version:',    process.env.VERSION || '') +
              row('Folder:',     process.env.FOLDER_NAME || '') +
              row('Project ID:', process.env.PROJECT_ID || '') +
              row('Migrate:',    process.env.MIGRATE || '') +
              row('CD Status:',  process.env.CD_STATUS || '') +
              row('Overall:',    overall) +
            '</table>';

          const button = runUrl
            ? ('<p style="margin-top:20px;">' +
                 '<a href="' + runUrl + '" style="background-color:#007acc;color:#ffffff;padding:10px 15px;text-decoration:none;border-radius:5px;display:inline-block;">' +
                   'View Workflow Details' +
                 '</a>' +
               '</p>')
            : '';

          // Compose final HTML (no template literals). Safe-wrap only between tags.
          const safeWrap = (html) => html.replace(/>\s*</g, '>\r\n<');
          let finalHtml = [
            '<!doctype html><html>',
            '<body style="font-family:Arial,Helvetica,sans-serif;margin:20px;color:#0f172a;">',
            statusHtml,
            bodyInner,
            button,
            '</body></html>'
          ].join('');
          finalHtml = safeWrap(finalHtml);

          const outPath = './email/final-email.html';
          fs.mkdirSync(path.dirname(outPath), { recursive: true });
          fs.writeFileSync(outPath, finalHtml, 'utf8');

          core.setOutput('html', outPath);
          core.setOutput('subject', subject);
          core.setOutput('overall', overall);
          core.setOutput('attach_path', bodyPath);
