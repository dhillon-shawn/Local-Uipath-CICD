name: "Auth with Uipath Orchestrator"
description: "Assume role, fetch secret, map credentials, fetch token"
inputs:
  target_env:
    description: "Environment to map/auth with"
    required: true
  role_arn:
    description: "AWS role to assume (OIDC)"
    required: true
  aws_region:
    description: "AWS region"
    required: true
  secret_id:
    description: "Secret ARN"
    required: true
  scopes:
    description: "Scopes for Orchestrator"
    required: true

runs:
  using: "composite"
  steps:
    - name: Configure AWS
      if: ${{ !env.UIPATH }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.role_arn }}
        aws-region: ${{ inputs.aws_region }}

    - name: Get secret JSON as env (UIPATH)
      if: ${{ !env.UIPATH }}
      uses: aws-actions/aws-secretsmanager-get-secrets@v2
      with:
        secret-ids: |
          UIPATH,${{ inputs.secret_id }}
        parse-json-secrets: false

    - name: Map vars and fetch token
      id: token
      uses: actions/github-script@v7
      env:
        TARGET_ENV: ${{ inputs.target_env }}
        SCOPE: ${{ inputs.scopes }}
        ACTIONS_STEP_info: true
      with:
        script: |
          try {
            const ENV = (process.env.TARGET_ENV || '').toUpperCase();
            const PARSE = JSON.parse(process.env.UIPATH); 

            const APP_ID     = String(PARSE[`${ENV}_APP_ID`]);
            const APP_SECRET = String(PARSE[`${ENV}_APP_SECRET`]);
            const BASE_URL   = String(PARSE[`${ENV}_BASE_URL`]);
            const ORG        = String(PARSE[`${ENV}_ORG`]);
            const TENANT     = String(PARSE[`${ENV}_TENANT`]);

            core.setSecret(APP_ID);
            core.setSecret(APP_SECRET);
            core.exportVariable('APP_ID', APP_ID);
            core.exportVariable('APP_SECRET', APP_SECRET);
            core.exportVariable('BASE_URL', BASE_URL);
            core.exportVariable('ORG', ORG);
            core.exportVariable('TENANT', TENANT);

            const OR_URL = `${BASE_URL}/${ORG}/${TENANT}/orchestrator_`;
            core.exportVariable('OR_URL', OR_URL);
            

            const tokenUrl = `${BASE_URL.replace(/\/+$/,'')}/identity_/connect/token`;
            core.info(`Token URL: ${tokenUrl}`);
            core.info(`Scope: ${process.env.SCOPE}`);

            const params = new URLSearchParams();
            params.set('grant_type', 'client_credentials');
            params.set('client_id', APP_ID);
            params.set('client_secret', APP_SECRET);

          } catch (err) {
            core.setFailed(`Token step threw: ${err && err.message ? err.message : String(err)}`);
          }

    - name: Get Auth Token
      id: get-token
      if: runner.os == 'Linux'
      shell: bash
      env:
        CLIENT_ID: ${{  env.APP_ID }}
        CLIENT_SECRET: ${{  env.APP_SECRET }}
        BASE_URL: "${{ env.BASE_URL }}"
        SCOPES: "${{ inputs.scopes }}"
      run: |
        AUTH_RESPONSE=$(
        curl --location \
            --header 'Content-Type: application/x-www-form-urlencoded' \
            --data-urlencode 'grant_type=client_credentials' \
            --data-urlencode "client_id=$CLIENT_ID" \
            --data-urlencode "client_secret=$CLIENT_SECRET" \
            --data-urlencode "scope=$SCOPES" \
            "$BASE_URL/identity_/connect/token"
        )
        echo "Response: $AUTH_RESPONSE"
        TOKEN=$(echo "$AUTH_RESPONSE" | jq -r '.access_token')
        echo "::add-mask::$TOKEN"
        echo "TOKEN=$TOKEN" >> "$GITHUB_ENV"

    - name: Get Auth Token
      if: runner.os == 'Windows'
      shell: powershell
      env:
        CLIENT_ID: ${{ env.APP_ID }}
        CLIENT_SECRET: ${{ env.APP_SECRET }}
        BASE_URL: ${{ env.BASE_URL }}
        SCOPES: ${{ inputs.scopes }}
      run: |
        $response = Invoke-RestMethod -Method Post `
          -Uri "$env:BASE_URL/identity_/connect/token" `
          -ContentType 'application/x-www-form-urlencoded' `
          -Body @{
            grant_type    = 'client_credentials'
            client_id     = $env:CLIENT_ID
            client_secret = $env:CLIENT_SECRET
            scope         = $env:SCOPES
          }

        $token = $response.access_token

        Write-Host "::add-mask::$token"
        Add-Content -Path $env:GITHUB_ENV -Value "TOKEN=$token"
