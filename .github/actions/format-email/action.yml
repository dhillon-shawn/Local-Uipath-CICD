name: "Format results to email"
description: "Cross OS formatting job to generate html for email"

inputs:

  target_env:
    description: "target env"
    required: true



  json_path:
    description: "Path to UiPath analyze.json"
    required: false
    default: ""
  xml_path:
    description: "Path to JUnit XML."
    required: false
    default: ""


  cd_status:
    description: "Deployment job result"
    required: false
    default: ""
  source_ref:
    description: "Source git ref / SHA."
    required: false
    default: ""
  version:
    description: "Version label."
    required: false
    default: ""
  folder_name:
    description: "Folder display name."
    required: false
    default: ""
  project_id:
    description: "Project identifier."
    required: false
    default: ""
  migrate:
    description: "Migration flag text."
    required: false
    default: ""

outputs:
  html:
    description: "Path to composed final HTML email."
    value: ${{ steps.compose.outputs.html }}
  subject:
    description: "Computed email subject."
    value: ${{ steps.compose.outputs.subject }}

runs:
  using: "composite"
  steps:
    - name: Ensure Node available
      uses: actions/setup-node@v4
      with:
        node-version: "20"

    - name: format analysis json to html
      if: ${{ inputs.target_env == 'dev' && inputs.json_path != '' }}
      uses: actions/github-script@v7
      env:
        IN:  ${{ inputs.json_path }}
        OUT: analyze.html
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          const inPath  = process.env.IN || '';
          const outPath = process.env.OUT || './email/analysis-report.html';
          const esc = s => String(s ?? '')
            .replace(/&/g,'&amp;').replace(/</g,'&lt;')
            .replace(/>/g,'&gt;').replace(/"/g,'&quot;')
            .replace(/'/g,'&#39;').replace(/`/g,'&#96;');

          const sevMeta = {
            1: { name:'Error',   icon:'❌', row:'#fff1f2' },
            2: { name:'Warning', icon:'⚠️', row:'#fff7ed' },
            3: { name:'Info',    icon:'ℹ️', row:'#eff6ff' },
          };

          const raw = JSON.parse(fs.readFileSync(inPath, 'utf8'));
          const list = Array.isArray(raw) ? raw : (raw.Results || raw.results || []);
          const rows = list.map(x => ({
            sev: Number(x.ErrorSeverity ?? 3) || 3,
            code: String(x.ErrorCode ?? ''),
            rule: String(x.RuleName ?? ''),
            activity: String(x.ActivityDisplayName ?? ''),
            desc: String(x.Description ?? ''),
            rec: String(x.Recommendation ?? ''),
          }));
          const totals = { 1:0, 2:0, 3:0 }; rows.forEach(r => totals[r.sev] = (totals[r.sev]||0)+1);
          rows.sort((a,b) => (a.sev - b.sev) || a.rule.localeCompare(b.rule));

          const css = {
            body: 'margin:20px;font-family:Arial,Helvetica,sans-serif;color:#0f172a;background:#ffffff;',
            h1: 'margin:0 0 8px 0;font-size:20px;',
            sub: 'margin:0 0 12px 0;color:#475569;font-size:12px;',
            pills: 'display:flex;gap:8px;flex-wrap:wrap;margin:8px 0 16px 0;',
            pill: (bg,fg,bd)=>`border:1px solid ${bd};border-radius:999px;padding:6px 10px;font-weight:700;background:${bg};color:${fg};`,
            wrap: 'overflow-x:auto;max-width:100%;-webkit-overflow-scrolling:touch;',
            table: 'border-collapse:separate;border-spacing:0;width:100%;min-width:720px;border:1px solid #e5e7eb;',
            th: 'background:#f8fafc;border-bottom:1px solid #e5e7eb;text-align:left;padding:8px 10px;font-weight:700;font-size:13px;white-space:nowrap;',
            td: 'border-top:1px solid #e5e7eb;padding:8px 10px;vertical-align:top;font-size:13px;',
            tdSev: 'white-space:nowrap;width:200px;',
          };

          const rowsArr = [];
          for (const r of rows) {
            const s = sevMeta[r.sev] || sevMeta[3];
            const sevCell = (s.icon + ' ' + s.name + (r.code ? ' — ' + esc(r.code) : ''));
            rowsArr.push(
              '<tr style="background:', s.row, ';">',
                '<td style="', css.td, css.tdSev, '">', sevCell, '</td>',
                '<td style="', css.td, '">', esc(r.rule), '</td>',
                '<td style="', css.td, '">', esc(r.activity), '</td>',
                '<td style="', css.td, '">', esc(r.desc).replace(/\r?\n/g,'<br>'), '</td>',
                '<td style="', css.td, '">', esc(r.rec).replace(/\r?\n/g,'<br>'), '</td>',
              '</tr>'
            );
          }
          const rowsHtml = rowsArr.join('');
          const when = new Date().toISOString();

          const html = `<!doctype html>
          <html>
            <body style="${css.body}">
              <h1 style="${css.h1}">UiPath Analyzer Report</h1>
              <p style="${css.sub}">Generated: ${esc(when)}</p>
              <div style="${css.pills}">
                <span style="${css.pill('#fee2e2','#991b1b','#fecaca')}">❌ Errors: ${totals[1]||0}</span>
                <span style="${css.pill('#ffedd5','#92400e','#fed7aa')}">⚠️ Warnings: ${totals[2]||0}</span>
                <span style="${css.pill('#dbeafe','#1e40af','#bfdbfe')}">ℹ️ Info: ${totals[3]||0}</span>
              </div>
              <div style="${css.wrap}">
                <table style="${css.table}" role="table" aria-label="Analyzer Results">
                  <thead>
                    <tr>
                      <th style="${css.th}">Severity / Code</th>
                      <th style="${css.th}">Rule</th>
                      <th style="${css.th}">Activity</th>
                      <th style="${css.th}">Description</th>
                      <th style="${css.th}">Recommendation</th>
                    </tr>
                  </thead>
                  <tbody>${rowsHtml}</tbody>
                </table>
              </div>
            </body>
          </html>`;

          fs.mkdirSync(path.dirname(outPath), { recursive: true });
          fs.writeFileSync(outPath, html, 'utf8');
          core.info(`Analyzer HTML -> ${outPath}`);


    - name: Setup Python
      if: ${{ inputs.target_env == 'test' && inputs.publishable == 'true' && inputs.xml_path != '' }}
      id: py
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - name: format test xml as html (static + inline)
      if: ${{ inputs.target_env == 'test' && inputs.publishable == 'true' && inputs.xml_path != '' }}
      shell: python
      run: |
                        from pathlib import Path
                        import xml.etree.ElementTree as ET
                        import html, re, datetime

                        XML_PATH = r"""${{ inputs.xml_path }}"""
                        OUT = Path("test.html")
                        OUT.parent.mkdir(parents=True, exist_ok=True)

                        def as_int(v):
                            try: return int(v)
                            except: return 0
                        def as_float(v):
                            try: return float(v)
                            except: return 0.0
                        def autolink(txt: str) -> str:
                            # escape first, then linkify http(s)://... sequences
                            esc = html.escape(txt)
                            return re.sub(
                                r'https?://[^\s<>\]]+',
                                lambda m: f'<a href="{m.group(0)}" target="_blank" style="color:#1d4ed8;text-decoration:none;">{html.escape(m.group(0))}</a>',
                                esc
                            )

                        root = ET.parse(XML_PATH).getroot()
                        suites = root.findall(".//testsuite") or ([root] if root.tag == "testsuite" else [])

                        total_tests = sum(as_int(s.attrib.get("tests")) for s in suites)
                        total_fail  = sum(as_int(s.attrib.get("failures")) for s in suites)
                        total_err   = sum(as_int(s.attrib.get("errors")) for s in suites)
                        total_skip  = sum(as_int(s.attrib.get("skipped") or s.attrib.get("disabled")) for s in suites)
                        total_cxl   = sum(as_int(s.attrib.get("cancelled")) for s in suites)
                        total_time  = sum(as_float(s.attrib.get("time")) for s in suites)

                        # Fallback if suites omitted 'tests' — not a skip, just computing totals.
                        if total_tests == 0:
                            cases = root.findall(".//testcase")
                            total_tests = len(cases)
                            for tc in cases:
                                if tc.find("skipped") is not None: total_skip += 1
                                elif tc.find("failure") is not None: total_fail += 1
                                elif tc.find("error")   is not None: total_err  += 1
                                # cancelled not standard at testcase level; keeping suite value
                            total_time = sum(as_float(tc.attrib.get("time")) for tc in cases)
                        passed = max(total_tests - total_fail - total_err - total_skip - total_cxl, 0)

                        # Collect testcases (include ALL, even passes, and ALL logs)
                        cases = []
                        for tc in root.findall(".//testcase"):
                            status = (tc.attrib.get("status") or "").strip()
                            if not status:
                                status = "Failed" if tc.find("failure") is not None else \
                                        "Error"  if tc.find("error")   is not None else \
                                        "Skipped" if tc.find("skipped") is not None else \
                                        "Passed"
                            cases.append({
                                "status": status,
                                "class": tc.attrib.get("classname",""),
                                "name": tc.attrib.get("name",""),
                                "time": tc.attrib.get("time",""),
                                "log": tc.findtext("system-out") or ""
                            })

                        # Suite-level logs (include ALL, even empty)
                        suite_logs = [ (i+1, s.findtext("system-out") or "") for i, s in enumerate(suites) ]

                        # Inline style snippets
                        body_style = "font-family:Arial,Helvetica,sans-serif;margin:20px;color:#0f172a"
                        h1_style = "margin:0 0 8px 0;font-size:20px"
                        sub_style = "color:#475569;font-size:12px;margin:0 0 16px 0"
                        pills_wrap = "display:flex;gap:8px;flex-wrap:wrap;margin:8px 0 16px 0"
                        pill_base = "border:1px solid #e5e7eb;border-radius:999px;padding:6px 10px;font-weight:700"
                        pill_ok = pill_base + ";background:#dcfce7;color:#166534;border-color:#bbf7d0"
                        pill_fail = pill_base + ";background:#fee2e2;color:#991b1b;border-color:#fecaca"
                        pill_err = pill_base + ";background:#fee2e2;color:#991b1b;border-color:#fecaca"
                        pill_skp = pill_base + ";background:#ffedd5;color:#92400e;border-color:#fed7aa"
                        pill_cxl = pill_base + ";background:#ffe4e6;color:#9f1239;border-color:#fecdd3"
                        pill_time = pill_base + ";background:#e0f2fe;color:#075985;border-color:#bae6fd"

                        table_wrap = "overflow-x:auto"
                        table_style = "border-collapse:separate;border-spacing:0;width:100%;min-width:720px;border:1px solid #e5e7eb"
                        th_style = "background:#f8fafc;border-bottom:1px solid #e5e7eb;text-align:left;padding:8px 10px;font-weight:700;font-size:13px;white-space:nowrap"
                        td_style = "border-top:1px solid #e5e7eb;padding:8px 10px;vertical-align:top;font-size:13px"
                        td_nowrap = td_style + ";white-space:nowrap"
                        pre_style = "background:#0b1020;color:#e6edf3;padding:12px;border-radius:8px;line-height:1.35;font-size:12px;white-space:pre-wrap"

                        def status_pill(s):
                            s1 = (s or "").strip().capitalize()
                            style = pill_time
                            if s1 == "Passed": style = pill_ok
                            elif s1 == "Failed": style = pill_fail
                            elif s1 == "Error": style = pill_err
                            elif s1 == "Skipped": style = pill_skp
                            return f'<span style="{style}">{html.escape(s1 or "")}</span>'

                        pills_html = "".join([
                            f'<span style="{pill_ok}">✅ Passed: {passed}</span>',
                            f'<span style="{pill_fail}">❌ Failures: {total_fail}</span>',
                            f'<span style="{pill_err}">🧨 Errors: {total_err}</span>',
                            f'<span style="{pill_skp}">⚠️ Skipped: {total_skip}</span>',
                            f'<span style="{pill_cxl}">⛔ Cancelled: {total_cxl}</span>',
                            f'<span style="{pill_time}">⏱ Time: {total_time:.2f}s</span>',
                        ])

                        # Testcase table (all cases)
                        case_rows = "\n".join(
                            f"<tr>"
                            f"<td style='{td_nowrap}'>{status_pill(c['status'])}</td>"
                            f"<td style='{td_style}'>{html.escape(c['class'])}</td>"
                            f"<td style='{td_style}'>{html.escape(c['name'])}</td>"
                            f"<td style='{td_nowrap}'>{html.escape(c['time'])}</td>"
                            f"</tr>"
                            for c in cases
                        )
                        case_table = f"""
                        <div style="{table_wrap}">
                          <table role="table" aria-label="JUnit Testcases" style="{table_style}">
                            <thead>
                              <tr>
                                <th style="{th_style}">Status</th>
                                <th style="{th_style}">Class</th>
                                <th style="{th_style}">Name</th>
                                <th style="{th_style}">Time</th>
                              </tr>
                            </thead>
                            <tbody>
                              {case_rows}
                            </tbody>
                          </table>
                        </div>"""

                        # Logs: include ALL (even empty)
                        log_sections = []
                        for idx, log in suite_logs:
                            log_sections.append(f'<h3 style="margin-top:16px">Suite Log #{idx}</h3><pre style="{pre_style}">{autolink(log)}</pre>')
                        for c in cases:
                            hdr = f"{c['class']}.{c['name']}".strip(".")
                            log_sections.append(f'<h3 style="margin-top:16px">Testcase Log — {html.escape(hdr)}</h3><pre style="{pre_style}">{autolink(c["log"])}</pre>')

                        logs_html = "\n".join(log_sections)

                        when = datetime.datetime.utcnow().isoformat(timespec="seconds") + "Z"
                        html_doc = f"""<!doctype html>
                        <html>
                          <head><meta charset="utf-8"></head>
                          <body style="{body_style}">
                            <h1 style="{h1_style}">JUnit Test Results</h1>
                            <p style="{sub_style}">Generated: {html.escape(when)}</p>
                            <div style="{pills_wrap}">{pills_html}</div>
                            {case_table}
                            <h2 style="margin-top:20px">Logs</h2>
                            {logs_html}
                          </body>
                        </html>"""

                        OUT.write_text(html_doc, encoding="utf-8")
                        print(f"Wrote {OUT}")



    - name: Compose final email
      id: compose
      uses: actions/github-script@v7
      env:
        TARGET_ENV:   ${{ inputs.target_env }}
        CD_STATUS:    ${{ inputs.cd_status }}
        SOURCE_REF:   ${{ inputs.source_ref }}
        VERSION:      ${{ inputs.version }}
        FOLDER_NAME:  ${{ inputs.folder_name }}
        PROJECT_ID:   ${{ inputs.project_id }}
        MIGRATE:      ${{ inputs.migrate }}
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          const TEST_PATH = 'test.html';
          const ANALYSIS_PATH = 'analyze.html';

          const env = (process.env.TARGET_ENV || 'dev').toLowerCase();
          const bodyPath = (env === 'test') ? TEST_PATH : ANALYSIS_PATH;

          const extractBody = (html) => {
            const m = /<body[^>]*>([\s\S]*?)<\/body>/i.exec(html);
            return (m ? m[1] : html);
          };

          // If the chosen body isn't there, make a tiny placeholder — minimal logic
          try { fs.statSync(bodyPath); } catch {
            fs.mkdirSync(path.dirname(bodyPath), { recursive: true });
            fs.writeFileSync(bodyPath, '<!doctype html><html><body><p>No content found.</p></body></html>', 'utf8');
          }

          const inner = extractBody(fs.readFileSync(bodyPath, 'utf8')).replace(/<script[\s\S]*?<\/script>/gi, '');

          const repo   = process.env.GITHUB_REPOSITORY || '';
          const runId  = process.env.GITHUB_RUN_ID || '';
          const runUrl = (repo && runId) ? `https://github.com/${repo}/actions/runs/${runId}` : '';

          const cd = (process.env.CD_STATUS || '').toLowerCase();
          const overall = (cd === 'success') ? 'success' : 'failure';
          const ok = (overall === 'success');
          const ICON = ok ? '✅' : '❌';
          const COLOR = ok ? '#2e7d32' : '#c62828';
          const WORD = ok ? 'Successful' : 'Failed';

          const subjectPrefix = (env === 'test') ? 'UiPath Test Report'
                                : (env === 'dev') ? 'UiPath Analysis Report'
                                : 'UiPath Report';
          const subject = `${subjectPrefix} - ${repo} #${process.env.GITHUB_RUN_NUMBER || ''}`;

          const row = (k, v) => v ? `<tr><td style="padding:8px;border:1px solid #ddd;"><strong>${k}</strong></td><td style="padding:8px;border:1px solid #ddd;">${v}</td></tr>` : '';

          const statusHtml =
            `<h2 style="color:${COLOR};margin:0 0 12px 0;">${ICON} Deployment ${WORD} — ${env}</h2>` +
            `<table style="border-collapse:collapse;width:100%;margin-bottom:16px;">` +
              row('Repository:', repo) +
              row('Run:', runUrl ? `<a href="${runUrl}" target="_blank" style="color:#1d4ed8;text-decoration:none;">${runUrl}</a>` : '') +
              row('Source ref:', process.env.SOURCE_REF || '') +
              row('Version:',    process.env.VERSION || '') +
              row('Folder:',     process.env.FOLDER_NAME || '') +
              row('Project ID:', process.env.PROJECT_ID || '') +
              row('Migrate:',    process.env.MIGRATE || '') +
              row('CD Status:',  process.env.CD_STATUS || '') +
              row('Overall:',    overall) +
            `</table>`;

          const button = runUrl
            ? `<p style="margin-top:20px;"><a href="${runUrl}" style="background-color:#007acc;color:#ffffff;padding:10px 15px;text-decoration:none;border-radius:5px;display:inline-block;">View Workflow Details</a></p>`
            : '';

          const finalHtml = [
            '<!doctype html><html>',
            '<body style="font-family:Arial,Helvetica,sans-serif;margin:20px;color:#0f172a;">',
            statusHtml,
            inner,
            button,
            '</body></html>'
          ].join('').replace(/>\s+</g, '>\r\n<');

          const outPath = 'final-email.html';
          fs.mkdirSync(path.dirname(outPath), { recursive: true });
          fs.writeFileSync(outPath, finalHtml, 'utf8');

          core.setOutput('html', outPath);
          core.setOutput('subject', subject);
          core.setOutput('overall', overall);
          core.setOutput('attach_path', bodyPath);
