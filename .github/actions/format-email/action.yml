name: "Format results to email"
description: "Cross OS formatting job to generate html for email"

inputs:

  target_env:
    description: "target env"
    required: true



  json_path:
    description: "Path to UiPath analyze.json"
    required: false
    default: ""
  xml_path:
    description: "Path to JUnit XML."
    required: false
    default: ""


  cd_status:
    description: "Deployment job result"
    required: false
    default: ""
  source_ref:
    description: "Source git ref / SHA."
    required: false
    default: ""
  version:
    description: "Version label."
    required: false
    default: ""
  folder_name:
    description: "Folder display name."
    required: false
    default: ""
  project_id:
    description: "Project identifier."
    required: false
    default: ""
  migrate:
    description: "Migration flag text."
    required: false
    default: ""

outputs:
  html:
    description: "Path to composed final HTML email."
    value: ${{ steps.compose.outputs.html }}
  subject:
    description: "Computed email subject."
    value: ${{ steps.compose.outputs.subject }}

runs:
  using: "composite"
  steps:
    - name: Ensure Node available
      uses: actions/setup-node@v4
      with:
        node-version: "20"

    - name: format analysis json to html
      if: ${{ inputs.target_env == 'dev' && inputs.json_path != '' }}
      uses: actions/github-script@v7
      env:
        IN:  ${{ inputs.json_path }}
        OUT: analyze.html
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          const inPath  = process.env.IN || '';
          const outPath = process.env.OUT || './email/analysis-report.html';
          const esc = s => String(s ?? '')
            .replace(/&/g,'&amp;').replace(/</g,'&lt;')
            .replace(/>/g,'&gt;').replace(/"/g,'&quot;')
            .replace(/'/g,'&#39;').replace(/`/g,'&#96;');

          const sevMeta = {
            1: { name:'Error',   icon:'❌', row:'#fff1f2' },
            2: { name:'Warning', icon:'⚠️', row:'#fff7ed' },
            3: { name:'Info',    icon:'ℹ️', row:'#eff6ff' },
          };

          const raw = JSON.parse(fs.readFileSync(inPath, 'utf8'));
          const list = Array.isArray(raw) ? raw : (raw.Results || raw.results || []);
          const rows = list.map(x => ({
            sev: Number(x.ErrorSeverity ?? 3) || 3,
            code: String(x.ErrorCode ?? ''),
            rule: String(x.RuleName ?? ''),
            activity: String(x.ActivityDisplayName ?? ''),
            desc: String(x.Description ?? ''),
            rec: String(x.Recommendation ?? ''),
          }));
          const totals = { 1:0, 2:0, 3:0 }; rows.forEach(r => totals[r.sev] = (totals[r.sev]||0)+1);
          rows.sort((a,b) => (a.sev - b.sev) || a.rule.localeCompare(b.rule));

          const css = {
            body: 'margin:20px;font-family:Arial,Helvetica,sans-serif;color:#0f172a;background:#ffffff;',
            h1: 'margin:0 0 8px 0;font-size:20px;',
            sub: 'margin:0 0 12px 0;color:#475569;font-size:12px;',
            pills: 'display:flex;gap:8px;flex-wrap:wrap;margin:8px 0 16px 0;',
            pill: (bg,fg,bd)=>`border:1px solid ${bd};border-radius:999px;padding:6px 10px;font-weight:700;background:${bg};color:${fg};`,
            wrap: 'overflow-x:auto;max-width:100%;-webkit-overflow-scrolling:touch;',
            table: 'border-collapse:separate;border-spacing:0;width:100%;min-width:720px;border:1px solid #e5e7eb;',
            th: 'background:#f8fafc;border-bottom:1px solid #e5e7eb;text-align:left;padding:8px 10px;font-weight:700;font-size:13px;white-space:nowrap;',
            td: 'border-top:1px solid #e5e7eb;padding:8px 10px;vertical-align:top;font-size:13px;',
            tdSev: 'white-space:nowrap;width:200px;',
          };

          const rowsArr = [];
          for (const r of rows) {
            const s = sevMeta[r.sev] || sevMeta[3];
            const sevCell = (s.icon + ' ' + s.name + (r.code ? ' — ' + esc(r.code) : ''));
            rowsArr.push(
              '<tr style="background:', s.row, ';">',
                '<td style="', css.td, css.tdSev, '">', sevCell, '</td>',
                '<td style="', css.td, '">', esc(r.rule), '</td>',
                '<td style="', css.td, '">', esc(r.activity), '</td>',
                '<td style="', css.td, '">', esc(r.desc).replace(/\r?\n/g,'<br>'), '</td>',
                '<td style="', css.td, '">', esc(r.rec).replace(/\r?\n/g,'<br>'), '</td>',
              '</tr>'
            );
          }
          const rowsHtml = rowsArr.join('');
          const when = new Date().toISOString();

          const html = `<!doctype html>
          <html>
            <body style="${css.body}">
              <h1 style="${css.h1}">UiPath Analyzer Report</h1>
              <p style="${css.sub}">Generated: ${esc(when)}</p>
              <div style="${css.pills}">
                <span style="${css.pill('#fee2e2','#991b1b','#fecaca')}">❌ Errors: ${totals[1]||0}</span>
                <span style="${css.pill('#ffedd5','#92400e','#fed7aa')}">⚠️ Warnings: ${totals[2]||0}</span>
                <span style="${css.pill('#dbeafe','#1e40af','#bfdbfe')}">ℹ️ Info: ${totals[3]||0}</span>
              </div>
              <div style="${css.wrap}">
                <table style="${css.table}" role="table" aria-label="Analyzer Results">
                  <thead>
                    <tr>
                      <th style="${css.th}">Severity / Code</th>
                      <th style="${css.th}">Rule</th>
                      <th style="${css.th}">Activity</th>
                      <th style="${css.th}">Description</th>
                      <th style="${css.th}">Recommendation</th>
                    </tr>
                  </thead>
                  <tbody>${rowsHtml}</tbody>
                </table>
              </div>
            </body>
          </html>`;

          fs.mkdirSync(path.dirname(outPath), { recursive: true });
          fs.writeFileSync(outPath, html, 'utf8');
          core.info(`Analyzer HTML -> ${outPath}`);


    - name: Setup Python
      if: ${{ inputs.target_env == 'test' && inputs.publishable == 'true' && inputs.xml_path != '' }}
      id: py
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - name: format test xml as html (static + inline)
      if: ${{ inputs.target_env == 'test' && inputs.publishable == 'true' && inputs.xml_path != '' }}
      shell: python
      run: |
            from pathlib import Path
            import xml.etree.ElementTree as ET
            import html, re, datetime, json

            XML_PATH = r"""${{ inputs.xml_path }}"""
            OUT = Path("test.html")
            OUT.parent.mkdir(parents=True, exist_ok=True)

            # ---------- helpers ----------
            def as_int(v):
                try: return int(v)
                except: return 0
            def as_float(v):
                try: return float(v)
                except: return 0.0

            def autolink(txt: str) -> str:
                # escape first, then linkify http(s)://... sequences
                esc = html.escape(txt)
                return re.sub(
                    r'https?://[^\s<>\]]+',
                    lambda m: f'<a href="{html.escape(m.group(0))}" target="_blank" style="color:#1d4ed8;text-decoration:none;">{html.escape(m.group(0))}</a>',
                    esc
                )

            def try_pretty_json_block(s: str) -> str:
                """
                Try to pretty-print notable JSON blocks inside the string:
                - If the whole string is JSON, pretty-print it.
                - Else, if it contains 'Robot logs' ... [ ... ], pretty-print the bracketed part.
                - Else, try to find the first top-level JSON object/array and pretty-print it.
                On failure, return the original text escaped+autolinked.
                """
                # whole-string JSON?
                for candidate in (s.strip(), s.strip().strip('`')):
                    try:
                        obj = json.loads(candidate)
                        pretty = json.dumps(obj, indent=2, ensure_ascii=False)
                        return f"<pre style=\"{PRE}\">{html.escape(pretty)}</pre>"
                    except Exception:
                        pass

                # "Robot logs ... [ ... ]" pattern (UiPath)
                if "Robot logs" in s:
                    # find the first bracketed JSON after 'Robot logs'
                    idx = s.find("Robot logs")
                    tail = s[idx:]
                    lb = tail.find('[')
                    rb = tail.rfind(']')
                    if lb != -1 and rb != -1 and rb > lb:
                        json_str = tail[lb:rb+1].strip()
                        try:
                            obj = json.loads(json_str)
                            pretty = json.dumps(obj, indent=2, ensure_ascii=False)
                            # build composed text: everything before JSON, pretty JSON, then after JSON
                            before = s[:idx+lb].rstrip()
                            after = tail[rb+1:]
                            parts = []
                            if before.strip():
                                parts.append(f"<pre style=\"{PRE}\">{autolink(before)}</pre>")
                            parts.append(f"<pre style=\"{PRE}\">{html.escape(pretty)}</pre>")
                            if after.strip():
                                parts.append(f"<pre style=\"{PRE}\">{autolink(after)}</pre>")
                            return "\n".join(parts)
                        except Exception:
                            pass

                # first JSON object/array anywhere (simple heuristic)
                m = re.search(r'(\{.*\}|\[.*\])', s, flags=re.DOTALL)
                if m:
                    json_str = m.group(1)
                    try:
                        obj = json.loads(json_str)
                        pretty = json.dumps(obj, indent=2, ensure_ascii=False)
                        before = s[:m.start()]
                        after = s[m.end():]
                        return (
                            (f"<pre style=\"{PRE}\">{autolink(before)}</pre>" if before.strip() else "") +
                            f"<pre style=\"{PRE}\">{html.escape(pretty)}</pre>" +
                            (f"<pre style=\"{PRE}\">{autolink(after)}</pre>" if after.strip() else "")
                        )
                    except Exception:
                        pass

                # fallback: raw text
                return f"<pre style=\"{PRE}\">{autolink(s)}</pre>"

            # ---------- inline style tokens ----------
            BODY = "font-family:Arial,Helvetica,sans-serif;margin:20px;color:#0f172a"
            H1   = "margin:0 0 8px 0;font-size:20px"
            H2   = "margin:20px 0 8px 0;font-size:18px"
            H3   = "margin:16px 0 8px 0;font-size:16px"
            SUB  = "color:#475569;font-size:12px;margin:0 0 16px 0"

            BOX  = "border:1px solid #e5e7eb;border-radius:10px;padding:12px;margin:12px 0"
            PILLS_WRAP = "display:flex;gap:8px;flex-wrap:wrap;margin:8px 0 16px 0"
            PILL = "border:1px solid #e5e7eb;border-radius:999px;padding:6px 10px;font-weight:700"
            OK   = PILL + ";background:#dcfce7;color:#166534;border-color:#bbf7d0"
            FAIL = PILL + ";background:#fee2e2;color:#991b1b;border-color:#fecaca"
            ERR  = PILL + ";background:#fee2e2;color:#991b1b;border-color:#fecaca"
            SKP  = PILL + ";background:#ffedd5;color:#92400e;border-color:#fed7aa"
            CXL  = PILL + ";background:#ffe4e6;color:#9f1239;border-color:#fecdd3"
            TIM  = PILL + ";background:#e0f2fe;color:#075985;border-color:#bae6fd"

            WRAP = "overflow-x:auto"
            TAB  = "border-collapse:separate;border-spacing:0;width:100%;min-width:900px;border:1px solid #e5e7eb"
            TH   = "background:#f8fafc;border-bottom:1px solid #e5e7eb;text-align:left;padding:8px 10px;font-weight:700;font-size:13px;white-space:nowrap"
            TD   = "border-top:1px solid #e5e7eb;padding:8px 10px;vertical-align:top;font-size:13px"
            TDN  = TD + ";white-space:nowrap"
            PRE  = "background:#0b1020;color:#e6edf3;padding:12px;border-radius:8px;line-height:1.35;font-size:12px;white-space:pre-wrap"

            def status_pill(status):
                s = (status or "").strip().capitalize()
                style = TIM
                if s == "Passed":  style = OK
                elif s == "Failed": style = FAIL
                elif s == "Error":  style = ERR
                elif s == "Skipped":style = SKP
                return f'<span style="{style}">{html.escape(s)}</span>'

            # ---------- parse XML ----------
            root = ET.parse(XML_PATH).getroot()
            suites = root.findall(".//testsuite") or ([root] if root.tag == "testsuite" else [])

            # totals
            total_tests = sum(as_int(s.attrib.get("tests")) for s in suites)
            total_fail  = sum(as_int(s.attrib.get("failures")) for s in suites)
            total_err   = sum(as_int(s.attrib.get("errors")) for s in suites)
            total_skip  = sum(as_int(s.attrib.get("skipped") or s.attrib.get("disabled")) for s in suites)
            total_cxl   = sum(as_int(s.attrib.get("cancelled")) for s in suites)
            total_time  = sum(as_float(s.attrib.get("time")) for s in suites)

            # fallback if suites omitted 'tests'
            if total_tests == 0:
                all_cases = root.findall(".//testcase")
                total_tests = len(all_cases)
                for tc in all_cases:
                    if tc.find("skipped") is not None: total_skip += 1
                    elif tc.find("failure") is not None: total_fail += 1
                    elif tc.find("error")   is not None: total_err  += 1
                total_time = sum(as_float(tc.attrib.get("time")) for tc in all_cases)
            passed = max(total_tests - total_fail - total_err - total_skip - total_cxl, 0)

            # collect testcases (all)
            cases = []
            for tc in root.findall(".//testcase"):
                status = (tc.attrib.get("status") or "").strip()
                if not status:
                    status = "Failed" if tc.find("failure") is not None else \
                            "Error"  if tc.find("error")   is not None else \
                            "Skipped" if tc.find("skipped") is not None else \
                            "Passed"
                cases.append({
                    "suite": tc.getparent().attrib.get("name") if hasattr(tc, "getparent") else "",  # lxml has getparent; stdlib doesn't—left blank
                    "class": tc.attrib.get("classname",""),
                    "name":  tc.attrib.get("name",""),
                    "time":  tc.attrib.get("time",""),
                    "status": status,
                    "log":   tc.findtext("system-out") or ""
                })

            # stdlib ET doesn't have getparent; derive suite name via walk:
            # map suite -> its testcases
            suite_to_cases = []
            for s in suites:
                scases = []
                for tc in s.findall(".//testcase"):
                    scases.append(tc)
                suite_to_cases.append((s, scases))

            # ---------- build HTML ----------
            pills_html = "".join([
                f'<span style="{OK}">✅ Passed: {passed}</span>',
                f'<span style="{FAIL}">❌ Failures: {total_fail}</span>',
                f'<span style="{ERR}">🧨 Errors: {total_err}</span>',
                f'<span style="{SKP}">⚠️ Skipped: {total_skip}</span>',
                f'<span style="{CXL}">⛔ Cancelled: {total_cxl}</span>',
                f'<span style="{TIM}">⏱ Time: {total_time:.2f}s</span>',
            ])

            # Global testcase table
            case_rows = "\n".join(
                f"<tr>"
                f"<td style='{TDN}'>{status_pill((tc.attrib.get('status') or '').strip() or ('Failed' if tc.find('failure') is not None else 'Error' if tc.find('error') is not None else 'Skipped' if tc.find('skipped') is not None else 'Passed'))}</td>"
                f"<td style='{TD}'>{html.escape(tc.attrib.get('classname',''))}</td>"
                f"<td style='{TD}'>{html.escape(tc.attrib.get('name',''))}</td>"
                f"<td style='{TDN}'>{html.escape(tc.attrib.get('time',''))}</td>"
                f"</tr>"
                for tc in root.findall(".//testcase")
            )
            case_table = f"""
            <div style="{WRAP}">
              <table role="table" aria-label="All Testcases" style="{TAB}">
                <thead>
                  <tr>
                    <th style="{TH}">Status</th>
                    <th style="{TH}">Class</th>
                    <th style="{TH}">Name</th>
                    <th style="{TH}">Time</th>
                  </tr>
                </thead>
                <tbody>
                  {case_rows}
                </tbody>
              </table>
            </div>"""

            # Per-suite sections (metadata + suite system-out + suite-local table)
            suite_sections = []
            for si, (s, scases) in enumerate(suite_to_cases, 1):
                sname   = s.attrib.get("name","")
                spkg    = s.attrib.get("package","")
                shost   = s.attrib.get("hostname","")
                sid     = s.attrib.get("id","")
                stime   = s.attrib.get("time","")
                stests  = s.attrib.get("tests","")
                sfail   = s.attrib.get("failures","")
                serr    = s.attrib.get("errors","")
                sskip   = s.attrib.get("skipped") or s.attrib.get("disabled") or ""
                scxl    = s.attrib.get("cancelled") or ""
                stamp   = s.attrib.get("timestamp","")
                slog    = s.findtext("system-out") or ""

                # suite meta table
                meta_rows = "".join([
                  f"<tr><td style='{TD}'><b>Name</b></td><td style='{TD}'>{html.escape(sname)}</td></tr>",
                  f"<tr><td style='{TD}'><b>Package</b></td><td style='{TD}'>{html.escape(spkg)}</td></tr>",
                  f"<tr><td style='{TD}'><b>Hostname</b></td><td style='{TD}'>{html.escape(shost)}</td></tr>",
                  f"<tr><td style='{TD}'><b>ID</b></td><td style='{TD}'>{html.escape(sid)}</td></tr>",
                  f"<tr><td style='{TD}'><b>Timestamp</b></td><td style='{TD}'>{html.escape(stamp)}</td></tr>",
                  f"<tr><td style='{TD}'><b>Tests</b></td><td style='{TD}'>{html.escape(stests)}</td></tr>",
                  f"<tr><td style='{TD}'><b>Failures</b></td><td style='{TD}'>{html.escape(sfail)}</td></tr>",
                  f"<tr><td style='{TD}'><b>Errors</b></td><td style='{TD}'>{html.escape(serr)}</td></tr>",
                  f"<tr><td style='{TD}'><b>Skipped</b></td><td style='{TD}'>{html.escape(sskip)}</td></tr>",
                  f"<tr><td style='{TD}'><b>Cancelled</b></td><td style='{TD}'>{html.escape(scxl)}</td></tr>",
                  f"<tr><td style='{TD}'><b>Time</b></td><td style='{TD}'>{html.escape(stime)}</td></tr>",
                ])

                scase_rows = "\n".join(
                    f"<tr>"
                    f"<td style='{TDN}'>{status_pill((tc.attrib.get('status') or '').strip() or ('Failed' if tc.find('failure') is not None else 'Error' if tc.find('error') is not None else 'Skipped' if tc.find('skipped') is not None else 'Passed'))}</td>"
                    f"<td style='{TD}'>{html.escape(tc.attrib.get('classname',''))}</td>"
                    f"<td style='{TD}'>{html.escape(tc.attrib.get('name',''))}</td>"
                    f"<td style='{TDN}'>{html.escape(tc.attrib.get('time',''))}</td>"
                    f"</tr>"
                    for tc in scases
                )
                scase_table = f"""
                <div style="{WRAP}">
                  <table role="table" aria-label="Suite Testcases" style="{TAB}">
                    <thead>
                      <tr><th style="{TH}">Status</th><th style="{TH}">Class</th><th style="{TH}">Name</th><th style="{TH}">Time</th></tr>
                    </thead>
                    <tbody>{scase_rows}</tbody>
                  </table>
                </div>
                """

                suite_log_html = try_pretty_json_block(slog) if slog != "" else f"<pre style=\"{PRE}\"></pre>"

                suite_sections.append(f"""
                <div style="{BOX}">
                  <h3 style="{H3}">Suite #{si}: {html.escape(sname)}</h3>
                  <div style="{WRAP}">
                    <table style="{TAB}">
                      <tbody>{meta_rows}</tbody>
                    </table>
                  </div>
                  <h3 style="{H3}">Suite Log</h3>
                  {suite_log_html}
                  <h3 style="{H3}">Suite Testcases</h3>
                  {scase_table}
                </div>
                """)

            # Per-testcase sections (each with its system-out)
            tc_sections = []
            for ti, tc in enumerate(root.findall(".//testcase"), 1):
                cname = tc.attrib.get("classname","")
                tname = tc.attrib.get("name","")
                ttime = tc.attrib.get("time","")
                status = (tc.attrib.get("status") or "").strip() or ("Failed" if tc.find("failure") is not None else "Error" if tc.find("error") is not None else "Skipped" if tc.find("skipped") is not None else "Passed")
                tlog = tc.findtext("system-out") or ""
                tc_sections.append(f"""
                <div style="{BOX}">
                  <h3 style="{H3}">Testcase #{ti}: {html.escape(cname+'.'+tname).strip('.')}</h3>
                  <div style="{WRAP}">
                    <table style="{TAB}">
                      <tbody>
                        <tr><td style="{TD}"><b>Status</b></td><td style="{TD}">{status_pill(status)}</td></tr>
                        <tr><td style="{TD}"><b>Class</b></td><td style="{TD}">{html.escape(cname)}</td></tr>
                        <tr><td style="{TD}"><b>Name</b></td><td style="{TD}">{html.escape(tname)}</td></tr>
                        <tr><td style="{TD}"><b>Time</b></td><td style="{TD}">{html.escape(ttime)}</td></tr>
                      </tbody>
                    </table>
                  </div>
                  <h3 style="{H3}">Testcase Log</h3>
                  {try_pretty_json_block(tlog) if tlog != "" else f"<pre style='{PRE}'></pre>"}
                </div>
                """)

            when = datetime.datetime.utcnow().isoformat(timespec="seconds") + "Z"

            html_doc = f"""<!doctype html>
            <html>
              <head><meta charset="utf-8"></head>
              <body style="{BODY}">
                <h1 style="{H1}">JUnit Test Results</h1>
                <p style="{SUB}">Generated: {html.escape(when)}</p>

                <div style="{PILLS_WRAP}">
                  <span style="{OK}">✅ Passed: {passed}</span>
                  <span style="{FAIL}">❌ Failures: {total_fail}</span>
                  <span style="{ERR}">🧨 Errors: {total_err}</span>
                  <span style="{SKP}">⚠️ Skipped: {total_skip}</span>
                  <span style="{CXL}">⛔ Cancelled: {total_cxl}</span>
                  <span style="{TIM}">⏱ Time: {total_time:.2f}s</span>
                </div>

                <h2 style="{H2}">All Testcases</h2>
                {case_table}

                <h2 style="{H2}">Suites</h2>
                {''.join(suite_sections) or '<div style="'+BOX+'"><p>No suites.</p></div>'}

                <h2 style="{H2}">Testcases (Detailed)</h2>
                {''.join(tc_sections) or '<div style="'+BOX+'"><p>No testcases.</p></div>'}
              </body>
            </html>"""

            OUT.write_text(html_doc, encoding="utf-8")
            print(f"Wrote {OUT}")




    - name: Compose final email
      id: compose
      uses: actions/github-script@v7
      env:
        TARGET_ENV:   ${{ inputs.target_env }}
        CD_STATUS:    ${{ inputs.cd_status }}
        SOURCE_REF:   ${{ inputs.source_ref }}
        VERSION:      ${{ inputs.version }}
        FOLDER_NAME:  ${{ inputs.folder_name }}
        PROJECT_ID:   ${{ inputs.project_id }}
        MIGRATE:      ${{ inputs.migrate }}
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          const TEST_PATH = 'test.html';
          const ANALYSIS_PATH = 'analyze.html';

          const env = (process.env.TARGET_ENV || 'dev').toLowerCase();
          const bodyPath = (env === 'test') ? TEST_PATH : ANALYSIS_PATH;

          const extractBody = (html) => {
            const m = /<body[^>]*>([\s\S]*?)<\/body>/i.exec(html);
            return (m ? m[1] : html);
          };

          // If the chosen body isn't there, make a tiny placeholder — minimal logic
          try { fs.statSync(bodyPath); } catch {
            fs.mkdirSync(path.dirname(bodyPath), { recursive: true });
            fs.writeFileSync(bodyPath, '<!doctype html><html><body><p>No content found.</p></body></html>', 'utf8');
          }

          const inner = extractBody(fs.readFileSync(bodyPath, 'utf8')).replace(/<script[\s\S]*?<\/script>/gi, '');

          const repo   = process.env.GITHUB_REPOSITORY || '';
          const runId  = process.env.GITHUB_RUN_ID || '';
          const runUrl = (repo && runId) ? `https://github.com/${repo}/actions/runs/${runId}` : '';

          const cd = (process.env.CD_STATUS || '').toLowerCase();
          const overall = (cd === 'success') ? 'success' : 'failure';
          const ok = (overall === 'success');
          const ICON = ok ? '✅' : '❌';
          const COLOR = ok ? '#2e7d32' : '#c62828';
          const WORD = ok ? 'Successful' : 'Failed';

          const subjectPrefix = (env === 'test') ? 'UiPath Test Report'
                                : (env === 'dev') ? 'UiPath Analysis Report'
                                : 'UiPath Report';
          const subject = `${subjectPrefix} - ${repo} #${process.env.GITHUB_RUN_NUMBER || ''}`;

          const row = (k, v) => v ? `<tr><td style="padding:8px;border:1px solid #ddd;"><strong>${k}</strong></td><td style="padding:8px;border:1px solid #ddd;">${v}</td></tr>` : '';

          const statusHtml =
            `<h2 style="color:${COLOR};margin:0 0 12px 0;">${ICON} Deployment ${WORD} — ${env}</h2>` +
            `<table style="border-collapse:collapse;width:100%;margin-bottom:16px;">` +
              row('Repository:', repo) +
              row('Run:', runUrl ? `<a href="${runUrl}" target="_blank" style="color:#1d4ed8;text-decoration:none;">${runUrl}</a>` : '') +
              row('Source ref:', process.env.SOURCE_REF || '') +
              row('Version:',    process.env.VERSION || '') +
              row('Folder:',     process.env.FOLDER_NAME || '') +
              row('Project ID:', process.env.PROJECT_ID || '') +
              row('Migrate:',    process.env.MIGRATE || '') +
              row('CD Status:',  process.env.CD_STATUS || '') +
              row('Overall:',    overall) +
            `</table>`;

          const button = runUrl
            ? `<p style="margin-top:20px;"><a href="${runUrl}" style="background-color:#007acc;color:#ffffff;padding:10px 15px;text-decoration:none;border-radius:5px;display:inline-block;">View Workflow Details</a></p>`
            : '';

          const finalHtml = [
            '<!doctype html><html>',
            '<body style="font-family:Arial,Helvetica,sans-serif;margin:20px;color:#0f172a;">',
            statusHtml,
            inner,
            button,
            '</body></html>'
          ].join('').replace(/>\s+</g, '>\r\n<');

          const outPath = 'final-email.html';
          fs.mkdirSync(path.dirname(outPath), { recursive: true });
          fs.writeFileSync(outPath, finalHtml, 'utf8');

          core.setOutput('html', outPath);
          core.setOutput('subject', subject);
          core.setOutput('overall', overall);
          core.setOutput('attach_path', bodyPath);
