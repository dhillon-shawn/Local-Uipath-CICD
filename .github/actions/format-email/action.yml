name: "Format results to email"
description: "Cross OS formatting job to generate html for email"

inputs:

  target_env:
    description: "target env"
    required: true



  json_path:
    description: "Path to UiPath analyze.json"
    required: false
    default: ""
  xml_path:
    description: "Path to JUnit XML."
    required: false
    default: ""


  cd_status:
    description: "Deployment job result"
    required: false
    default: ""
  source_ref:
    description: "Source git ref / SHA."
    required: false
    default: ""
  version:
    description: "Version label."
    required: false
    default: ""
  folder_name:
    description: "Folder display name."
    required: false
    default: ""
  project_id:
    description: "Project identifier."
    required: false
    default: ""
  migrate:
    description: "Migration flag text."
    required: false
    default: ""

outputs:
  html:
    description: "Path to composed final HTML email."
    value: ${{ steps.compose.outputs.html }}
  subject:
    description: "Computed email subject."
    value: ${{ steps.compose.outputs.subject }}

runs:
  using: "composite"
  steps:
    - name: Ensure Node available
      uses: actions/setup-node@v4
      with:
        node-version: "20"

    - name: format analysis json to html
      if: ${{ inputs.target_env == 'dev' && inputs.json_path != '' }}
      uses: actions/github-script@v7
      env:
        IN:  ${{ inputs.json_path }}
        OUT: analyze.html
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          const inPath  = process.env.IN || '';
          const outPath = process.env.OUT || './email/analysis-report.html';
          const esc = s => String(s ?? '')
            .replace(/&/g,'&amp;').replace(/</g,'&lt;')
            .replace(/>/g,'&gt;').replace(/"/g,'&quot;')
            .replace(/'/g,'&#39;').replace(/`/g,'&#96;');

          const sevMeta = {
            1: { name:'Error',   icon:'❌', row:'#fff1f2' },
            2: { name:'Warning', icon:'⚠️', row:'#fff7ed' },
            3: { name:'Info',    icon:'ℹ️', row:'#eff6ff' },
          };

          const raw = JSON.parse(fs.readFileSync(inPath, 'utf8'));
          const list = Array.isArray(raw) ? raw : (raw.Results || raw.results || []);
          const rows = list.map(x => ({
            sev: Number(x.ErrorSeverity ?? 3) || 3,
            code: String(x.ErrorCode ?? ''),
            rule: String(x.RuleName ?? ''),
            activity: String(x.ActivityDisplayName ?? ''),
            desc: String(x.Description ?? ''),
            rec: String(x.Recommendation ?? ''),
          }));
          const totals = { 1:0, 2:0, 3:0 }; rows.forEach(r => totals[r.sev] = (totals[r.sev]||0)+1);
          rows.sort((a,b) => (a.sev - b.sev) || a.rule.localeCompare(b.rule));

          const css = {
            body: 'margin:20px;font-family:Arial,Helvetica,sans-serif;color:#0f172a;background:#ffffff;',
            h1: 'margin:0 0 8px 0;font-size:20px;',
            sub: 'margin:0 0 12px 0;color:#475569;font-size:12px;',
            pills: 'display:flex;gap:8px;flex-wrap:wrap;margin:8px 0 16px 0;',
            pill: (bg,fg,bd)=>`border:1px solid ${bd};border-radius:999px;padding:6px 10px;font-weight:700;background:${bg};color:${fg};`,
            wrap: 'overflow-x:auto;max-width:100%;-webkit-overflow-scrolling:touch;',
            table: 'border-collapse:separate;border-spacing:0;width:100%;min-width:720px;border:1px solid #e5e7eb;',
            th: 'background:#f8fafc;border-bottom:1px solid #e5e7eb;text-align:left;padding:8px 10px;font-weight:700;font-size:13px;white-space:nowrap;',
            td: 'border-top:1px solid #e5e7eb;padding:8px 10px;vertical-align:top;font-size:13px;',
            tdSev: 'white-space:nowrap;width:200px;',
          };

          const rowsArr = [];
          for (const r of rows) {
            const s = sevMeta[r.sev] || sevMeta[3];
            const sevCell = (s.icon + ' ' + s.name + (r.code ? ' — ' + esc(r.code) : ''));
            rowsArr.push(
              '<tr style="background:', s.row, ';">',
                '<td style="', css.td, css.tdSev, '">', sevCell, '</td>',
                '<td style="', css.td, '">', esc(r.rule), '</td>',
                '<td style="', css.td, '">', esc(r.activity), '</td>',
                '<td style="', css.td, '">', esc(r.desc).replace(/\r?\n/g,'<br>'), '</td>',
                '<td style="', css.td, '">', esc(r.rec).replace(/\r?\n/g,'<br>'), '</td>',
              '</tr>'
            );
          }
          const rowsHtml = rowsArr.join('');
          const when = new Date().toISOString();

          const html = `<!doctype html>
          <html>
            <body style="${css.body}">
              <h1 style="${css.h1}">UiPath Analyzer Report</h1>
              <p style="${css.sub}">Generated: ${esc(when)}</p>
              <div style="${css.pills}">
                <span style="${css.pill('#fee2e2','#991b1b','#fecaca')}">❌ Errors: ${totals[1]||0}</span>
                <span style="${css.pill('#ffedd5','#92400e','#fed7aa')}">⚠️ Warnings: ${totals[2]||0}</span>
                <span style="${css.pill('#dbeafe','#1e40af','#bfdbfe')}">ℹ️ Info: ${totals[3]||0}</span>
              </div>
              <div style="${css.wrap}">
                <table style="${css.table}" role="table" aria-label="Analyzer Results">
                  <thead>
                    <tr>
                      <th style="${css.th}">Severity / Code</th>
                      <th style="${css.th}">Rule</th>
                      <th style="${css.th}">Activity</th>
                      <th style="${css.th}">Description</th>
                      <th style="${css.th}">Recommendation</th>
                    </tr>
                  </thead>
                  <tbody>${rowsHtml}</tbody>
                </table>
              </div>
            </body>
          </html>`;

          fs.mkdirSync(path.dirname(outPath), { recursive: true });
          fs.writeFileSync(outPath, html, 'utf8');
          core.info(`Analyzer HTML -> ${outPath}`);


    - name: Setup Python
      if: ${{ inputs.target_env == 'test' && inputs.publishable == 'true' && inputs.xml_path != '' }}
      id: py
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - name: format test xml as html (static + inline)
      if: ${{ inputs.target_env == 'test' && inputs.publishable == 'true' && inputs.xml_path != '' }}
      shell: python
      run: |
            from pathlib import Path
            import xml.etree.ElementTree as ET
            import html, re, json, datetime

            XML_PATH = r"""${{ inputs.xml_path }}"""
            OUT = Path("test.html")
            OUT.parent.mkdir(parents=True, exist_ok=True)

            # ---------- helpers ----------
            def esc(s): return html.escape("" if s is None else str(s))
            def i(v, d=0):
                try: return int(v)
                except: return d
            def f(v, d=0.0):
                try: return float(v)
                except: return d
            def autolink(s: str) -> str:
                e = esc(s)
                return re.sub(r'https?://[^\s<>\]]+', lambda m: f'<a href="{esc(m.group(0))}" target="_blank" style="color:#1d4ed8;text-decoration:none;">{esc(m.group(0))}</a>', e)

            # Pretty-print JSON **only** for the Test Logs section
            def render_logs(text: str, pre_style: str) -> str:
                t = text.strip().strip('`')
                # Case 1: whole string is JSON
                try:
                    obj = json.loads(t)
                    return f"<pre style='{pre_style}'>{esc(json.dumps(obj, indent=2, ensure_ascii=False))}</pre>"
                except Exception:
                    pass
                # Case 2: pretty any balanced {...} / [...] blocks inside, leave other parts raw
                s = text
                n = len(s); idx = 0; parts = []
                while idx < n:
                    m = re.search(r'[\{\[]', s[idx:])
                    if not m:
                        if s[idx:]:
                            parts.append(f"<pre style='{pre_style}'>{autolink(s[idx:])}</pre>")
                        break
                    start = idx + m.start()
                    opener = s[start]; closer = '}' if opener == '{' else ']'
                    if start > idx:
                        parts.append(f"<pre style='{pre_style}'>{autolink(s[idx:start])}</pre>")
                    # match with quote-awareness
                    j = start; depth = 0; in_str = False; q = ''; escp = False; matched = False
                    while j < n:
                        ch = s[j]
                        if in_str:
                            if escp: escp = False
                            elif ch == '\\\\': escp = True
                            elif ch == q: in_str = False
                        else:
                            if ch in ('"', "'"): in_str = True; q = ch
                            elif ch == opener: depth += 1
                            elif ch == closer:
                                depth -= 1
                                if depth == 0:
                                    cand = s[start:j+1]
                                    try:
                                        obj = json.loads(cand)
                                        parts.append(f"<pre style='{pre_style}'>{esc(json.dumps(obj, indent=2, ensure_ascii=False))}</pre>")
                                        idx = j + 1
                                        matched = True
                                        break
                                    except Exception:
                                        # not JSON → treat the opener char as normal text
                                        parts.append(f"<pre style='{pre_style}'>{autolink(s[start:start+1])}</pre>")
                                        idx = start + 1
                                        matched = True
                                        break
                        j += 1
                    if not matched:
                        parts.append(f"<pre style='{pre_style}'>{autolink(s[start:])}</pre>")
                        idx = n
                return "".join(parts)

            def status_of(tc):
                s = (tc.attrib.get("status") or "").strip()
                if s: return s
                if tc.find("failure") is not None: return "Failed"
                if tc.find("error")   is not None: return "Error"
                if tc.find("skipped") is not None: return "Skipped"
                return "Passed"

            # ---------- parse ----------
            root = ET.parse(XML_PATH).getroot()
            suites = root.findall(".//testsuite") or ([root] if root.tag == "testsuite" else [])
            cases  = root.findall(".//testcase")

            tot_tests = sum(i(s.attrib.get("tests")) for s in suites) or (len(cases) if cases else 0)
            tot_fail  = sum(i(s.attrib.get("failures")) for s in suites)
            tot_err   = sum(i(s.attrib.get("errors")) for s in suites)
            tot_skip  = sum(i(s.attrib.get("skipped") or s.attrib.get("disabled")) for s in suites)
            tot_cxl   = sum(i(s.attrib.get("cancelled")) for s in suites)
            tot_time  = (sum(f(s.attrib.get("time")) for s in suites) or sum(f(tc.attrib.get("time")) for tc in cases))
            if not tot_tests and cases:
                tot_tests = len(cases)
                for tc in cases:
                    if tc.find("skipped") is not None: tot_skip += 1
                    elif tc.find("failure") is not None: tot_fail += 1
                    elif tc.find("error") is not None: tot_err += 1
            passed = max(tot_tests - tot_fail - tot_err - tot_skip - tot_cxl, 0)

            # associate suite → (direct) testcases + suite log
            suite_blocks = [(s, s.findall("./testcase"), s.findtext("system-out") or "") for s in suites]

            # ---------- inline styles ----------
            BODY="font-family:Arial,Helvetica,sans-serif;margin:20px;color:#0f172a"
            H1="margin:0 0 8px 0;font-size:20px"; H2="margin:20px 0 8px 0;font-size:18px"
            SUB="color:#475569;font-size:12px;margin:0 0 16px 0"
            WRAP="overflow-x:auto"; TAB="border-collapse:separate;border-spacing:0;width:100%;min-width:900px;border:1px solid #e5e7eb"
            TH="background:#f8fafc;border-bottom:1px solid #e5e7eb;text-align:left;padding:8px 10px;font-weight:700;font-size:13px;white-space:nowrap"
            TD="border-top:1px solid #e5e7eb;padding:8px 10px;vertical-align:top;font-size:13px"; TDN=TD+";white-space:nowrap"
            PRE="background:#0b1020;color:#e6edf3;padding:12px;border-radius:8px;line-height:1.35;font-size:12px;white-space:pre-wrap"
            PILL="border:1px solid #e5e7eb;border-radius:999px;padding:6px 10px;font-weight:700"
            OK=PILL+";background:#dcfce7;color:#166534;border-color:#bbf7d0"; FAIL=PILL+";background:#fee2e2;color:#991b1b;border-color:#fecaca"
            ERR=PILL+";background:#fee2e2;color:#991b1b;border-color:#fecaca"; SKP=PILL+";background:#ffedd5;color:#92400e;border-color:#fed7aa"
            CXL=PILL+";background:#ffe4e6;color:#9f1239;border-color:#fecdd3"; TIM=PILL+";background:#e0f2fe;color:#075985;border-color:#bae6fd"

            def pill(text, cls): return f'<span style="{cls}">{esc(text)}</span>'
            def pill_status(s):
                s1=(s or "").strip().capitalize()
                cls=TIM
                if s1=="Passed": cls=OK
                elif s1=="Failed": cls=FAIL
                elif s1=="Error": cls=ERR
                elif s1=="Skipped": cls=SKP
                return pill(s1, cls)

            # ---------- summary ----------
            when = datetime.datetime.utcnow().isoformat(timespec="seconds")+"Z"
            summary = (
              f'<h1 style="{H1}">JUnit Test Results</h1>'
              f'<p style="{SUB}">Generated: {esc(when)}</p>'
              f'<div style="display:flex;gap:8px;flex-wrap:wrap;margin:8px 0 16px 0">'
              f'{pill(f"✅ Passed: {passed}", OK)}'
              f'{pill(f"❌ Failures: {tot_fail}", FAIL)}'
              f'{pill(f"🧨 Errors: {tot_err}", ERR)}'
              f'{pill(f"⚠️ Skipped: {tot_skip}", SKP)}'
              f'{pill(f"⛔ Cancelled: {tot_cxl}", CXL)}'
              f'{pill(f"⏱ Time: {tot_time:.2f}s", TIM)}'
              f'</div>'
            )

            # ---------- all testcases table (details as plain text with links) ----------
            def detail_cell(tc):
                out=[]
                for tag in ("failure","error","skipped"):
                    n=tc.find(tag)
                    if n is not None:
                        msg = n.attrib.get("message","")
                        txt = n.text or ""
                        block = (msg + ("\n" if msg and txt else "") + txt).strip()
                        if block:
                            out.append(f"<div><b>{tag.capitalize()}</b></div><pre style='{PRE}'>{autolink(block)}</pre>")
                        else:
                            out.append(f"<div><b>{tag.capitalize()}</b></div>")
                return "".join(out)

            case_rows = "\n".join(
                f"<tr>"
                f"<td style='{TDN}'>{pill_status(status_of(tc))}</td>"
                f"<td style='{TD}'>{esc(tc.attrib.get('classname',''))}</td>"
                f"<td style='{TD}'>{esc(tc.attrib.get('name',''))}</td>"
                f"<td style='{TDN}'>{esc(tc.attrib.get('time',''))}</td>"
                f"<td style='{TD}'>{detail_cell(tc)}</td>"
                f"</tr>"
                for tc in cases
            )
            case_table = f"""
            <div style="{WRAP}">
              <table role="table" aria-label="All Testcases" style="{TAB}">
                <thead>
                  <tr>
                    <th style="{TH}">Status</th>
                    <th style="{TH}">Class</th>
                    <th style="{TH}">Name</th>
                    <th style="{TH}">Time</th>
                    <th style="{TH}">Details</th>
                  </tr>
                </thead>
                <tbody>
                  {case_rows}
                </tbody>
              </table>
            </div>"""

            # ---------- Test Logs (only place we pretty-print JSON) ----------
            logs_parts = []
            for s, scases, slog in suite_blocks:
                name = s.attrib.get("name","")
                logs_parts.append(f"<h3 style='margin:16px 0 8px 0;font-size:16px'>Suite Log — {esc(name)}</h3>")
                logs_parts.append(render_logs(slog, PRE))
            for tc in cases:
                cname = tc.attrib.get("classname",""); tname = tc.attrib.get("name","")
                logs_parts.append(f"<h3 style='margin:16px 0 8px 0;font-size:16px'>Testcase Log — {esc((cname+'.'+tname).strip('.'))}</h3>")
                logs_parts.append(render_logs(tc.findtext("system-out") or "", PRE))
            logs_block = "".join(logs_parts) or f"<pre style='{PRE}'></pre>"

            # ---------- write ----------
            html_doc = f"""<!doctype html>
            <html><head><meta charset="utf-8"></head>
            <body style="{BODY}">
              {summary}
              <h2 style="{H2}">All Testcases</h2>
              {case_table}
              <h2 style="{H2}">Test Logs</h2>
              {logs_block}
            </body></html>"""
            OUT.write_text(html_doc, encoding="utf-8")
            print(f"Wrote {OUT}")




    - name: Compose final email
      id: compose
      uses: actions/github-script@v7
      env:
        TARGET_ENV:   ${{ inputs.target_env }}
        CD_STATUS:    ${{ inputs.cd_status }}
        SOURCE_REF:   ${{ inputs.source_ref }}
        VERSION:      ${{ inputs.version }}
        FOLDER_NAME:  ${{ inputs.folder_name }}
        PROJECT_ID:   ${{ inputs.project_id }}
        MIGRATE:      ${{ inputs.migrate }}
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          const TEST_PATH = 'test.html';
          const ANALYSIS_PATH = 'analyze.html';

          const env = (process.env.TARGET_ENV || 'dev').toLowerCase();
          const bodyPath = (env === 'test') ? TEST_PATH : ANALYSIS_PATH;

          const extractBody = (html) => {
            const m = /<body[^>]*>([\s\S]*?)<\/body>/i.exec(html);
            return (m ? m[1] : html);
          };

          // If the chosen body isn't there, make a tiny placeholder — minimal logic
          try { fs.statSync(bodyPath); } catch {
            fs.mkdirSync(path.dirname(bodyPath), { recursive: true });
            fs.writeFileSync(bodyPath, '<!doctype html><html><body><p>No content found.</p></body></html>', 'utf8');
          }

          const inner = extractBody(fs.readFileSync(bodyPath, 'utf8')).replace(/<script[\s\S]*?<\/script>/gi, '');

          const repo   = process.env.GITHUB_REPOSITORY || '';
          const runId  = process.env.GITHUB_RUN_ID || '';
          const runUrl = (repo && runId) ? `https://github.com/${repo}/actions/runs/${runId}` : '';

          const cd = (process.env.CD_STATUS || '').toLowerCase();
          const overall = (cd === 'success') ? 'success' : 'failure';
          const ok = (overall === 'success');
          const ICON = ok ? '✅' : '❌';
          const COLOR = ok ? '#2e7d32' : '#c62828';
          const WORD = ok ? 'Successful' : 'Failed';

          const subjectPrefix = (env === 'test') ? 'UiPath Test Report'
                                : (env === 'dev') ? 'UiPath Analysis Report'
                                : 'UiPath Report';
          const subject = `${subjectPrefix} - ${repo} #${process.env.GITHUB_RUN_NUMBER || ''}`;

          const row = (k, v) => v ? `<tr><td style="padding:8px;border:1px solid #ddd;"><strong>${k}</strong></td><td style="padding:8px;border:1px solid #ddd;">${v}</td></tr>` : '';

          const statusHtml =
            `<h2 style="color:${COLOR};margin:0 0 12px 0;">${ICON} Deployment ${WORD} — ${env}</h2>` +
            `<table style="border-collapse:collapse;width:100%;margin-bottom:16px;">` +
              row('Repository:', repo) +
              row('Run:', runUrl ? `<a href="${runUrl}" target="_blank" style="color:#1d4ed8;text-decoration:none;">${runUrl}</a>` : '') +
              row('Source ref:', process.env.SOURCE_REF || '') +
              row('Version:',    process.env.VERSION || '') +
              row('Folder:',     process.env.FOLDER_NAME || '') +
              row('Project ID:', process.env.PROJECT_ID || '') +
              row('Migrate:',    process.env.MIGRATE || '') +
              row('CD Status:',  process.env.CD_STATUS || '') +
              row('Overall:',    overall) +
            `</table>`;

          const button = runUrl
            ? `<p style="margin-top:20px;"><a href="${runUrl}" style="background-color:#007acc;color:#ffffff;padding:10px 15px;text-decoration:none;border-radius:5px;display:inline-block;">View Workflow Details</a></p>`
            : '';

          const finalHtml = [
            '<!doctype html><html>',
            '<body style="font-family:Arial,Helvetica,sans-serif;margin:20px;color:#0f172a;">',
            statusHtml,
            inner,
            button,
            '</body></html>'
          ].join('').replace(/>\s+</g, '>\r\n<');

          const outPath = 'final-email.html';
          fs.mkdirSync(path.dirname(outPath), { recursive: true });
          fs.writeFileSync(outPath, finalHtml, 'utf8');

          core.setOutput('html', outPath);
          core.setOutput('subject', subject);
          core.setOutput('overall', overall);
          core.setOutput('attach_path', bodyPath);
