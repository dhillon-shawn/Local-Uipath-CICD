name: "Format results to email"
description: "Cross OS formatting job to generate html for email"

inputs:

  target_env:
    description: "target env"
    required: true



  json_path:
    description: "Path to UiPath analyze.json"
    required: false
    default: ""
  xml_path:
    description: "Path to JUnit XML."
    required: false
    default: ""

  publishable:
    description: "Test cases detected."
    required: true
  cd_status:
    description: "Deployment job result"
    required: false
    default: ""
  source_ref:
    description: "Source git ref / SHA."
    required: false
    default: ""
  version:
    description: "Version label."
    required: false
    default: ""
  folder_name:
    description: "Folder display name."
    required: false
    default: ""
  project_id:
    description: "Project identifier."
    required: false
    default: ""
  migrate:
    description: "Migration flag text."
    required: false
    default: ""

outputs:
  html:
    description: "Path to composed final HTML email."
    value: ${{ steps.compose.outputs.html }}
  subject:
    description: "Computed email subject."
    value: ${{ steps.compose.outputs.subject }}

runs:
  using: "composite"
  steps:

    - name: Download results artifact
      uses: actions/download-artifact@v4
      with:
          name: results
          path: ./results
      continue-on-error: true

    - name: Ensure Node available
      uses: actions/setup-node@v4
      with:
        node-version: "20"

    - name: format analysis json to html
      if: ${{ inputs.target_env == 'dev' && hashFiles(inputs.json_path) != '' }}
      uses: actions/github-script@v7
      env:
        IN:  ${{ inputs.json_path }}
        OUT: analyze.html
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          const inPath  = process.env.IN || '';
          const outPath = process.env.OUT;

          const esc = s => String(s ?? '')
            .replace(/&/g,'&amp;').replace(/</g,'&lt;')
            .replace(/>/g,'&gt;').replace(/"/g,'&quot;')
            .replace(/'/g,'&#39;').replace(/`/g,'&#96;');

          const sevMeta = {
            1: { name:'Error',   icon:'❌', row:'#fff1f2', bar:'#dc2626' },
            2: { name:'Warning', icon:'⚠️', row:'#fff7ed', bar:'#d97706' },
            3: { name:'Info',    icon:'ℹ️', row:'#eff6ff', bar:'#2563eb' },
          };


          const stripLink = (s) => String(s || '')
            .replace(/\s*\[learn more\.?\]\([^)]+\)/gi, '')
            .replace(/\s*<a\b[^>]*>\s*learn more\.?\s*<\/a>/gi, '');

          const cleanDesc = (s) => /^expand to see details$/i.test(String(s ?? '').trim()) ? '' : String(s ?? '');

          const raw = JSON.parse(fs.readFileSync(inPath, 'utf8'));
          const list = Array.isArray(raw) ? raw : (raw.Results || raw.results || []);


          const norm = p => String(p || '').replace(/[\\/]+/g, '/'); // normalize to forward slashes
          const base = p => {
            if (!p) return '(Project-wide)';
            const parts = norm(p).split('/').filter(Boolean);
            return parts.length ? parts[parts.length - 1] : '(Project-wide)';
          };

          const rows = list.map(x => ({
            sev: Number(x.ErrorSeverity ?? 3) || 3,
            code: String(x.ErrorCode ?? ''),
            rule: String(x.RuleName ?? ''),
            activity: String(x.ActivityDisplayName ?? ''),
            desc: cleanDesc(x.Description),
            rec: stripLink(x.Recommendation),
            shortPath: base(x.FilePath)
          }));


          const totals = { 1:0, 2:0, 3:0 };
          rows.forEach(r => totals[r.sev] = (totals[r.sev] || 0) + 1);

          const rowSort = (a,b) => (a.sev - b.sev) || a.rule.localeCompare(b.rule);

          const groups = new Map();
          for (const r of rows.sort(rowSort)) {
            if (!groups.has(r.shortPath)) groups.set(r.shortPath, []);
            groups.get(r.shortPath).push(r);
          }

          const css = {
            body: 'margin:20px;font-family:Arial,Helvetica,sans-serif;color:#0f172a;background:#ffffff;',
            h1: 'margin:0 0 8px 0;font-size:20px;',
            sub: 'margin:0 0 12px 0;color:#475569;font-size:12px;',
            pills: 'display:flex;gap:8px;flex-wrap:wrap;margin:8px 0 16px 0;',
            pill: (bg,fg,bd)=>`border:1px solid ${bd};border-radius:999px;padding:6px 10px;font-weight:700;background:${bg};color:${fg};`,
            wrap: 'overflow-x:auto;max-width:100%;-webkit-overflow-scrolling:touch;',
            table: 'border-collapse:separate;border-spacing:0;width:100%;min-width:720px;border:1px solid #e5e7eb;',
            th: 'background:#f8fafc;border-bottom:1px solid #e5e7eb;text-align:left;padding:8px 10px;font-weight:700;font-size:13px;white-space:nowrap;',
            td: 'border-top:1px solid #e5e7eb;padding:8px 10px;vertical-align:top;font-size:13px;',
            tdSev: 'white-space:nowrap;width:200px;',
            h2: 'margin:22px 0 8px 0;font-size:15px;color:#0f172a;'
          };

          const tdBg = (bg, bar) =>
            css.td + `background-color:${bg};mso-padding-alt:8px 10px 8px 10px;border-left:6px solid ${bar};`;

          const renderTableRows = (arr) => {
            const buf = [];
            for (const r of arr) {
              const s = sevMeta[r.sev] || sevMeta[3];
              const sevCell = (s.icon + ' ' + s.name + (r.code ? ' — ' + esc(r.code) : ''));
              buf.push(
                '<tr>',
                  '<td style="', tdBg(s.row, s.bar), css.tdSev, '" bgcolor="', s.row, '">', sevCell, '</td>',
                  '<td style="', tdBg(s.row, s.bar), '" bgcolor="', s.row, '">', esc(r.rule), '</td>',
                  '<td style="', tdBg(s.row, s.bar), '" bgcolor="', s.row, '">', esc(r.activity), '</td>',
                  '<td style="', tdBg(s.row, s.bar), '" bgcolor="', s.row, '">', esc(r.desc).replace(/\r?\n/g,'<br>'), '</td>',
                  '<td style="', tdBg(s.row, s.bar), '" bgcolor="', s.row, '">', esc(r.rec).replace(/\r?\n/g,'<br>'), '</td>',
                '</tr>'
              );
            }
            return buf.join('');
          };

          const renderTable = (rowsHtml) => `
            <div style="${css.wrap}">
              <table role="table" aria-label="Analyzer Results" cellspacing="0" cellpadding="0" style="${css.table}">
                <thead>
                  <tr>
                    <th style="${css.th}">Severity / Code</th>
                    <th style="${css.th}">Rule</th>
                    <th style="${css.th}">Activity</th>
                    <th style="${css.th}">Description</th>
                    <th style="${css.th}">Recommendation</th>
                  </tr>
                </thead>
                <tbody>${rowsHtml}</tbody>
              </table>
            </div>`;

          const priorityOrder = ['(project-wide)','project.json', 'main.xaml', 'process.xaml'];
          const baseLower = (name) => base(name).toLowerCase(); 
          const priorityIndex = (name) => {
            const n = baseLower(name);
            const i = priorityOrder.indexOf(n);
            return i === -1 ? 999 : i;
          };

          const when = new Date().toISOString();

          let content = '';
          if (rows.length === 0) {
            content = '<p>No analyzer results found.</p>';
          } else {
            const keys = Array.from(groups.keys()).sort((a,b) => {
              const pa = priorityIndex(a);
              const pb = priorityIndex(b);
              if (pa !== pb) return pa - pb;
              return a.localeCompare(b, undefined, { sensitivity: 'base' });
            });

            const parts = [];
            for (const key of keys) {
              parts.push(
                '<h2 style="', css.h2, '">', esc(base(key)), '</h2>',
                renderTable(renderTableRows(groups.get(key)))
              );
            }
            content = parts.join('');
          }

          const html = `<!doctype html>
          <html>
            <body style="${css.body}">
              <h1 style="${css.h1}">UiPath Analyzer Report</h1>
              <p style="${css.sub}">Generated: ${esc(when)}</p>

              <div style="${css.pills}">
                <span style="${css.pill('#fee2e2','#991b1b','#fecaca')}">❌ Errors: ${totals[1]||0}</span>
                <span style="${css.pill('#ffedd5','#92400e','#fed7aa')}">⚠️ Warnings: ${totals[2]||0}</span>
                <span style="${css.pill('#dbeafe','#1e40af','#bfdbfe')}">ℹ️ Info: ${totals[3]||0}</span>
              </div>

              ${content}
            </body>
          </html>`;

          fs.mkdirSync(path.dirname(outPath), { recursive: true });
          fs.writeFileSync(outPath, html, 'utf8');
          core.info(`Analyzer HTML -> ${outPath}`);






    - name: Write junit2 requirements file
      if: ${{ inputs.target_env == 'test' && inputs.publishable == 'true' && hashFiles(inputs.xml_path) != ''}}
      shell: python
      run: |
          open("junit2-requirements.txt","w",encoding="utf-8").write("junit2html\npremailer\n")


    - uses: actions/setup-python@v5
      if: ${{ inputs.target_env == 'test' && inputs.publishable == 'true' && hashFiles(inputs.xml_path) != ''}}
      with:
        python-version: "3.x"
        cache: "pip"
        cache-dependency-path: "junit2-requirements.txt"

    - name: JUnit XML → inline HTML (test.html)
      if: ${{ inputs.target_env == 'test' && inputs.publishable == 'true' && hashFiles(inputs.xml_path) != ''}}
      shell: python
      run: |
        import sys, runpy, importlib.util

        def missing(mod): return importlib.util.find_spec(mod) is None
        if missing("junit2htmlreport") or missing("premailer"):
            import pip
            pip.main(["install", "--no-input", "junit2html", "premailer"])

        xml = r"""${{ inputs.xml_path }}"""
        out = "test.html"

        sys.argv = ["junit2html", xml, out]
        runpy.run_module("junit2htmlreport.__main__", run_name="__main__")

        from premailer import transform
        with open(out, "r", encoding="utf-8") as f:
            html = f.read().replace("Generated by junit2html", "")
        with open(out, "w", encoding="utf-8") as f:
            f.write(transform(html, remove_classes=False))



    - name: Compose final email
      id: compose
      uses: actions/github-script@v7
      env:
        TARGET_ENV:   ${{ inputs.target_env }}
        CD_STATUS:    ${{ inputs.cd_status }}
        SOURCE_REF:   ${{ inputs.source_ref }}
        VERSION:      ${{ inputs.version }}
        FOLDER_NAME:  ${{ inputs.folder_name }}
        PROJECT_ID:   ${{ inputs.project_id }}
        MIGRATE:      ${{ inputs.migrate }}
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          const TEST_PATH = 'test.html';
          const ANALYSIS_PATH = 'analyze.html';

          const env = (process.env.TARGET_ENV || 'dev').toLowerCase();
          const bodyPath = (env === 'test') ? TEST_PATH : ANALYSIS_PATH;

          const extractBody = (html) => {
            const m = /<body[^>]*>([\s\S]*?)<\/body>/i.exec(html);
            return (m ? m[1] : html);
          };

          // If the chosen body isn't there, make a tiny placeholder — minimal logic
          try { fs.statSync(bodyPath); } catch {
            fs.mkdirSync(path.dirname(bodyPath), { recursive: true });
            fs.writeFileSync(bodyPath, '<!doctype html><html><body><p>No content found.</p></body></html>', 'utf8');
          }

          const inner = extractBody(fs.readFileSync(bodyPath, 'utf8')).replace(/<script[\s\S]*?<\/script>/gi, '');

          const repo   = process.env.GITHUB_REPOSITORY || '';
          const runId  = process.env.GITHUB_RUN_ID || '';
          const runUrl = (repo && runId) ? `https://github.com/${repo}/actions/runs/${runId}` : '';

          const cd = (process.env.CD_STATUS || '').toLowerCase();
          const overall = (cd === 'success') ? 'success' : 'failure';
          const ok = (overall === 'success');
          const ICON = ok ? '✅' : '❌';
          const COLOR = ok ? '#2e7d32' : '#c62828';
          const WORD = ok ? 'Successful' : 'Failed';

          const subjectPrefix = (env === 'test') ? 'UiPath Test Report'
                                : (env === 'dev') ? 'UiPath Analysis Report'
                                : 'UiPath Report';
          const subject = `${subjectPrefix} - ${repo} #${process.env.GITHUB_RUN_NUMBER || ''}`;

          const row = (k, v) => v ? `<tr><td style="padding:8px;border:1px solid #ddd;"><strong>${k}</strong></td><td style="padding:8px;border:1px solid #ddd;">${v}</td></tr>` : '';

          const statusHtml =
            `<h2 style="color:${COLOR};margin:0 0 12px 0;">${ICON} Deployment ${WORD} — ${env}</h2>` +
            `<table style="border-collapse:collapse;width:100%;margin-bottom:16px;">` +
              row('Repository:', repo) +
              row('Run:', runUrl ? `<a href="${runUrl}" target="_blank" style="color:#1d4ed8;text-decoration:none;">${runUrl}</a>` : '') +
              row('Source ref:', process.env.SOURCE_REF || '') +
              row('Version:',    process.env.VERSION || '') +
              row('Folder:',     process.env.FOLDER_NAME || '') +
              row('Project ID:', process.env.PROJECT_ID || '') +
              row('Migrate:',    process.env.MIGRATE || '') +
              row('CD Status:',  process.env.CD_STATUS || '') +
              row('Overall:',    overall) +
            `</table>`;

          const button = runUrl
            ? `<p style="margin-top:20px;"><a href="${runUrl}" style="background-color:#007acc;color:#ffffff;padding:10px 15px;text-decoration:none;border-radius:5px;display:inline-block;">View Workflow Details</a></p>`
            : '';

          const finalHtml = [
            '<!doctype html><html>',
            '<body style="font-family:Arial,Helvetica,sans-serif;margin:20px;color:#0f172a;">',
            statusHtml,
            inner,
            button,
            '</body></html>'
          ].join('').replace(/>\s+</g, '>\r\n<');

          const outPath = 'final-email.html';
          fs.mkdirSync(path.dirname(outPath), { recursive: true });
          fs.writeFileSync(outPath, finalHtml, 'utf8');

          core.setOutput('html', outPath);
          core.setOutput('subject', subject);
          core.setOutput('overall', overall);
          core.setOutput('attach_path', bodyPath);
