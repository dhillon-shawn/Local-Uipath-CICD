name: CD
description: Continuos Deployment

inputs:
  base_folder_name: { required: true, description: "" }
  full_folder_name: { required: true, description: "" }
  fid: { required: true, description: "" }
  version: { required: true, description: "" }
  pid: { required: true, description: "" }
  or_url: { required: true, description: "" }
  token: { required: true, description: "" }
  target_env: { required: true, description: "" }
  entry_point: { required: true, description: "" }

runs:
  using: composite
  steps:
    - name: Publishing
      shell: bash
      run: |
        PACKAGE_PATH=$(find output -name '*.nupkg' | head -n 1)
        echo "Package Path: $PACKAGE_PATH"
        echo "Publishing Package to Tenant Feed "

        response=$(curl  --location \
          --header "Authorization: Bearer ${{ inputs.token }}" \
          --form "file=@$PACKAGE_PATH" \
          "${{ inputs.or_url }}/odata/Processes/UiPath.Server.Configuration.OData.UploadPackage()"
        )
        echo "Response: $response"

    - name: Check Release
      shell: bash
      run: |
        echo "Checking Release"
        response=$(curl --fail --location \
          --header "Authorization: Bearer ${{inputs.token}}" \
          --header "X-UIPATH-OrganizationUnitId: ${{ inputs.fid }}" \
          "${{ inputs.or_url }}/odata/Releases?%24select=Id%2CProcessKey%2CName%2CProcessType&%24filter=ProcessKey%20eq%20%27${{ inputs.pid }}%27"
        )
        echo "Release Response: $response"     
        id_found=$(echo "$response" | jq -r '.value[0].Id // empty')
        echo "id_found=$id_found" >> "$GITHUB_ENV"
        if [ -n "$id_found" ]; then
          echo "Release Id found"
          echo "CREATE=false" >> "$GITHUB_ENV"
        else
          echo "Release Id NOT found"
          echo "CREATE=true" >> "$GITHUB_ENV"
        fi

    - name: Upgrade Release
      shell: bash
      if: env.CREATE != 'true'
      run: |
        echo "Upgrading Release "
        response=$(curl --request POST  --location \
          --header "Authorization: Bearer ${{ inputs.token }}" \
          --header "X-UIPATH-OrganizationUnitId: ${{ inputs.fid }}" \
          --header "Content-Type: application/json" \
          --header "Content-Length: 0" \
          "${{ inputs.or_url }}/odata/Releases(${{env.id_found}})/UiPath.Server.Configuration.OData.UpdateToLatestPackageVersion"
        )
        echo "Response: $response"

    - name: update release
      if: env.CREATE != 'true'
      shell: bash
      run: |
        echo "updating release"
        body="$(mktemp)"
        trap 'rm -f "$body"' EXIT  

        curl_rc=0
        status=$(
          curl -X PATCH -L -sS \
            --connect-timeout 10 --max-time 120 \
            --output "$body" --write-out '%{http_code}' \
            -H "Authorization: Bearer ${{inputs.token}}" \
            -H "Content-Type: application/json" \
            -H "X-UIPATH-FolderPath: ${{ inputs.full_folder_name }}" \
            "${{ inputs.or_url }}/odata/Releases"
            <<'JSON'
                      {
                        "Name": "${{ inputs.pid }}",
                        "ProcessKey": "${{ inputs.pid }}",
                        "ProcessVersion": "${{ inputs.version }}",
                        "EntryPointPath": "${{ inputs.entry_point }}",
                        "Description": "https://github.com/${{ github.repository_owner }}/${{ github.repository }}"
                      }
            JSON
          )|| curl_rc=$?

        echo "Status Code: $status"
        echo "::group::Response body"
        if command -v jq >/dev/null; then jq -r . "$body" || cat "$body"; else cat "$body"; fi
        echo "::endgroup::"


        if [[ $curl_rc -ne 0 || ${status:-0} -ge 400 ]]; then
          exit 1
        fi

    - name: Create Release
      shell: bash
      if: env.CREATE == 'true'
      run: |
        echo "Creating Release "
        response=$(curl -fsS -X POST \
          -H "Authorization: Bearer ${{ inputs.token }}" \
          --header "X-UIPATH-OrganizationUnitId: ${{ inputs.fid }}" \
          -H "Content-Type: application/json" \
          --data @- \
          "${{ inputs.or_url }}/odata/Releases" <<'JSON'
        {
          "Name": "${{ inputs.pid }}",
          "ProcessKey": "${{ inputs.pid }}",
          "ProcessVersion": "${{ inputs.version }}",
          "EntryPoint": "${{ inputs.entry_point }}",
          "Description": "Repo https://github.com/${{ github.repository_owner }}/${{ github.repository }}"
        }
        JSON
        )

        echo "Response: $response"
