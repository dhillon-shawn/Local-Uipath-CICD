name: Compute Version
description: Simulate version resolution without external calls
inputs:
  target_env:      {  required: true, description: "" }
  pid:              {  required: true, description: "" }

outputs:
  version:
    value: ${{ steps.set.outputs.NEW_VERSION }}
    description: ""

runs:
  using: composite
  steps:

    - name: Get latest version
      id: get_latest_version
      shell: powershell
      run: |
          $url = ("{0}/odata/Processes/UiPath.Server.Configuration.OData.GetProcessVersions(processId='{1}')" -f $env:OR_URL, "${{ inputs.pid }}") +
                "?`$orderby=Version%20desc&`$top=1&`$select=Version"

          $resp = Invoke-RestMethod -Method Get -Headers @{ Authorization = "Bearer $env:TOKEN" } -Uri $url

          $latest = $null
          if ($resp -and $resp.value -and $resp.value.Count -ge 1) { $latest = $resp.value[0].Version }
          if ([string]::IsNullOrWhiteSpace($latest) -or $latest -eq 'null') { $latest = '0.0.0' }

          # Write env var (UTF-8 without BOM)
          $utf8 = New-Object System.Text.UTF8Encoding($false)
          [System.IO.File]::AppendAllText($env:GITHUB_ENV, "LATEST_VERSION=$latest`n", $utf8)


    - name: Compute auto-bumped version
      id: auto_bump
      shell: bash
      env:
        INPUT_VERSION: ${{ env.LATEST_VERSION }}
      run: |
        CORE=$(printf '%s\n' "$INPUT_VERSION" \
          | LC_ALL=C grep -Eo '[[:digit:]]+(\.[[:digit:]]+)*([+-][[:alnum:].-]+)?' \
          | head -n1)

        # drop +pre/-pre/rc/etc.
        BASE="${CORE%%+*}"; BASE="${BASE%%-*}"

        IFS='.' read -ra PARTS <<< "$BASE"
        N=${#PARTS[@]}

        MAJOR=$((10#${PARTS[0]:-0}))
        PATCH=0
        if (( N >= 2 )); then PATCH=$((10#${PARTS[N-1]:-0})); fi

        MINOR=0
        if (( N > 2 )); then
          for ((i=1;i<N-1;i++)); do
            MINOR=$(( MINOR + 10#${PARTS[i]:-0} ))
          done
        fi

        INC=$((PATCH + 1))
        NEW_PATCH=$((INC % 10))
        NEW_MINOR=$((MINOR + INC / 10))

        NEW_VERSION="${MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
        echo "NEW_VERSION=$NEW_VERSION" >> "$GITHUB_OUTPUT"



