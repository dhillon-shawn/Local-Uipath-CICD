name: "Pre-check"
description: "Decide target_env, sha, rc_tag, pr_num"
outputs:
  target_env:
    value: ${{ steps.decide.outputs.target_env }}
    description: ""
  sha:
    value: ${{ steps.decide.outputs.sha }}
    description: ""
  rc_tag:
    value: ${{ steps.decide.outputs.rc_tag }}
    description: ""
  pr_num:
    value: ${{ steps.decide.outputs.pr_num }}
    description: ""
  promote:
    value: ${{ steps.decide.outputs.promote }}
    description: ""

runs:
  using: "composite"
  steps:
    - id: decide
      uses: actions/github-script@v7
      with:
        script: |
          const out = { target_env: '', sha: '', rc_tag: '', pr_num: '', promote: 'false' };

          const isFeature = (ref) => String(ref || '').startsWith('feature/');
          const isHotfix  = (ref) => String(ref || '').startsWith('hotfix/');

          if (context.eventName === 'push') {
            const { owner, repo } = context.repo;
            const assoc = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner, repo, commit_sha: context.sha
            });
            if (!assoc.data?.length) {
              core.setFailed(`Pre-check: no PR found for push sha=${context.sha}`);
              return;
            }
            const pr = assoc.data.find(p => !p.draft) || assoc.data[0];

            out.pr_num  = String(pr.number);
            out.rc_tag  = `rc-pr-${out.pr_num}`;
            out.sha     = context.sha;
            out.target_env = pr.draft ? 'dev' : 'test';
            out.promote = 'false'; // pushes always go to stage (dev or test)

          } else if (context.eventName === 'pull_request') {
            const pr     = context.payload.pull_request;
            const action = context.payload.action || '';
            const head   = pr.head?.ref || '';

            if (action === 'ready_for_review') {
              // Promote the latest dev build to test (create/refresh RC)
              out.pr_num    = String(pr.number);
              out.rc_tag    = `rc-pr-${out.pr_num}`;
              out.target_env= 'test';
              out.sha       = pr.head.sha;
              out.promote   = 'true';

            } else if (action === 'closed') {
              if (!pr.merged) {
                // Closed without merge 
                out.target_env = '';
                out.sha = '';
                out.promote = 'false';
              } else if (isFeature(head)) {
                // Merged feature -> promote RC to prod 
                out.pr_num    = String(pr.number);
                out.rc_tag    = `rc-pr-${out.pr_num}`;
                out.target_env= 'prod';
                out.sha       = '';
                out.promote   = 'true';
              } else if (isHotfix(head)) {
                // Merged hotfix -> stage to hotfix
                out.target_env= 'hotfix';
                out.sha       = pr.merge_commit_sha || '';
                out.promote   = 'false';
              } else {
                // Unknown branch type 
                out.target_env = '';
                out.sha = '';
                out.promote = 'false';
              }
            } else {
              // Any other PR event
              out.target_env = '';
              out.sha = '';
              out.promote = 'false';
            }

          } else {
            // Other
            out.target_env = '';
            out.sha = '';
            out.promote = 'false';
          }

          core.setOutput('target_env', out.target_env);
          core.setOutput('sha', out.sha);
          core.setOutput('rc_tag', out.rc_tag);
          core.setOutput('pr_num', out.pr_num);
          core.setOutput('promote', out.promote);

          console.log('pre-check:', out);

          await core.summary.addRaw([
            '### Pre-check decision',
            `- event: \`${context.eventName}\` / action: \`${context.payload?.action || ''}\``,
            `- target_env: \`${out.target_env}\``,
            `- promote: \`${out.promote}\``,
            `- pr_num: \`${out.pr_num}\``,
            `- rc_tag: \`${out.rc_tag}\``,
            `- sha: \`${out.sha}\``,
          ].join('\n')).write();
