name: "Pre-check"
description: "Decide target_env, sha, and rc_tag based on event"


outputs:
  target_env:
    value: ${{ steps.decide.outputs.target_env }}
    description: ""
  sha:
    value: ${{ steps.decide.outputs.sha }}
    description: ""
  rc_tag:
    value: ${{ steps.decide.outputs.rc_tag }}
    description: ""
  pr_num:
    value: ${{ steps.decide.outputs.pr_num }}
    description: ""


runs:
  using: "composite"
  steps:
    - id: decide
      uses: actions/github-script@v7
      with:
        script: |
          const out = {
            target_env: '',
            from_sha: '',
            rc_tag: '',
            pr_number: '',
          };

          const branchFromRef = (ref) => (ref || '').replace('refs/heads/','');
          const isFeature = (ref) => branchFromRef(ref).startsWith('feature/');
          const isHotfix  = (ref) => branchFromRef(ref).startsWith('hotfix/');

          if (context.eventName === 'push') {
            // Pushes only happen for feature/** in your dispatcher
            const branch = branchFromRef(process.env.GITHUB_REF);
            const { owner, repo } = context.repo;
            const prs = await github.paginate(github.rest.pulls.list, {
              owner, repo, state: 'open', head: `${owner}:${branch}`
            });
            const pr = prs.find(p => !p.draft);

            if (pr) {
              // Ready-for-review PR exists → test path (dev+test later), update RC on pipeline
              out.target_env = 'test';
              out.sha = context.sha;
              out.rc_tag = `rc-pr-${pr.number}`;
              out.pr_number = String(pr.number);
            } else {
              // No PR or draft PR → dev only
              out.target_env = 'dev';
              out.sha = context.sha;
            }
          }

          if (context.eventName === 'pull_request') {
            const pr = context.payload.pull_request;
            const headRef = pr.head.ref;

            if (context.payload.action === 'ready_for_review') {
              // Rebuild from PR head, deploy dev+test, and (pipeline) update RC
              out.target_env = 'test';
              out.sha = pr.head.sha;
              out.rc_tag = `rc-pr-${pr.number}`;
              out.pr_number = String(pr.number);
            }

            if (context.payload.action === 'closed') {
              if (!pr.merged) {
                // Closed without merge → no work
                out.target_env = '';
              } else if (isFeature(`refs/heads/${headRef}`)) {
                // Feature merged → promote previously built RC (no rebuild)
                out.target_env = 'prod';
                out.sha = ''; // pipeline will download RC by tag
                out.rc_tag = `rc-pr-${pr.number}`;
                out.pr_number = String(pr.number);
              } else if (isHotfix(`refs/heads/${headRef}`)) {
                // Hotfix merged → rebuild from merge commit and deploy to hotfix env
                out.target_env = 'hotfix';
                out.sha = context.payload.pull_request.merge_commit_sha || '';
              } else {
                // Other branches: ignore
                out.target_env = '';
              }
            }
          }

          core.setOutput('target_env', out.target_env);
          core.setOutput('sha', out.sha);
          core.setOutput('rc_tag', out.rc_tag);
          core.setOutput('pr_num', out.pr_num);

